{
    "pipes": [],
    "interfaces": [
        {
            "name": "CloudinaryWidget",
            "id": "interface-CloudinaryWidget-bd3d766179cb3833125894024e2b81998e6c7307b32b0edd0f5cb76b0149745a62aaaddd05ec2e9d95936c011e4315b1a51bfc51c494c3f6eadd9d0bca83ab54",
            "file": "src/types/cloudinary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CloudinaryWidget {\n    open(): void;\n    close(): void;\n    show(): void;\n}\n\nexport type CloudinaryWidgetSourceType =\n    | 'local'\n    | 'url'\n    | 'camera'\n    | 'dropbox'\n    | 'image_search'\n    | 'shutterstock'\n    | 'gettyimages'\n    | 'istock'\n    | 'unsplash'\n    | 'google_drive';\n\nexport interface CloudinaryWidgetEvent {\n    event: string;\n    info: object;\n}\n\nexport interface CloudinaryWidgetEventUploadAdded\n    extends CloudinaryWidgetEvent {\n    event: 'upload-added';\n    info: {\n        id: string;\n        publicId: string;\n        file: {\n            lastModified: number;\n            lastModifiedDate: string;\n            name: string;\n            size: number;\n            type: string;\n        };\n    };\n}\n\nexport interface CloudinaryWidgetEventSuccess extends CloudinaryWidgetEvent {\n    event: 'success';\n    info: {\n        id: string;\n        asset_id: string;\n        bytes: number;\n        create_at: string;\n        etag: string;\n        folder: string;\n        format: string;\n        height: number;\n        path: string;\n        public_id: string;\n        resource_type: 'image' | 'video';\n        secure_url: string;\n        signature: string;\n        tags: string[];\n        thumbnail_url: string;\n        url: string;\n        version: number;\n        version_id: string;\n        width: number;\n    };\n}\n\nexport interface CloudinaryWidgetEventClose extends CloudinaryWidgetEvent {\n    event: 'close';\n    info: {\n        message: string;\n    };\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "CloudinaryWidgetEvent",
            "id": "interface-CloudinaryWidgetEvent-bd3d766179cb3833125894024e2b81998e6c7307b32b0edd0f5cb76b0149745a62aaaddd05ec2e9d95936c011e4315b1a51bfc51c494c3f6eadd9d0bca83ab54",
            "file": "src/types/cloudinary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CloudinaryWidget {\n    open(): void;\n    close(): void;\n    show(): void;\n}\n\nexport type CloudinaryWidgetSourceType =\n    | 'local'\n    | 'url'\n    | 'camera'\n    | 'dropbox'\n    | 'image_search'\n    | 'shutterstock'\n    | 'gettyimages'\n    | 'istock'\n    | 'unsplash'\n    | 'google_drive';\n\nexport interface CloudinaryWidgetEvent {\n    event: string;\n    info: object;\n}\n\nexport interface CloudinaryWidgetEventUploadAdded\n    extends CloudinaryWidgetEvent {\n    event: 'upload-added';\n    info: {\n        id: string;\n        publicId: string;\n        file: {\n            lastModified: number;\n            lastModifiedDate: string;\n            name: string;\n            size: number;\n            type: string;\n        };\n    };\n}\n\nexport interface CloudinaryWidgetEventSuccess extends CloudinaryWidgetEvent {\n    event: 'success';\n    info: {\n        id: string;\n        asset_id: string;\n        bytes: number;\n        create_at: string;\n        etag: string;\n        folder: string;\n        format: string;\n        height: number;\n        path: string;\n        public_id: string;\n        resource_type: 'image' | 'video';\n        secure_url: string;\n        signature: string;\n        tags: string[];\n        thumbnail_url: string;\n        url: string;\n        version: number;\n        version_id: string;\n        width: number;\n    };\n}\n\nexport interface CloudinaryWidgetEventClose extends CloudinaryWidgetEvent {\n    event: 'close';\n    info: {\n        message: string;\n    };\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "CloudinaryWidgetEventClose",
            "id": "interface-CloudinaryWidgetEventClose-bd3d766179cb3833125894024e2b81998e6c7307b32b0edd0f5cb76b0149745a62aaaddd05ec2e9d95936c011e4315b1a51bfc51c494c3f6eadd9d0bca83ab54",
            "file": "src/types/cloudinary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CloudinaryWidget {\n    open(): void;\n    close(): void;\n    show(): void;\n}\n\nexport type CloudinaryWidgetSourceType =\n    | 'local'\n    | 'url'\n    | 'camera'\n    | 'dropbox'\n    | 'image_search'\n    | 'shutterstock'\n    | 'gettyimages'\n    | 'istock'\n    | 'unsplash'\n    | 'google_drive';\n\nexport interface CloudinaryWidgetEvent {\n    event: string;\n    info: object;\n}\n\nexport interface CloudinaryWidgetEventUploadAdded\n    extends CloudinaryWidgetEvent {\n    event: 'upload-added';\n    info: {\n        id: string;\n        publicId: string;\n        file: {\n            lastModified: number;\n            lastModifiedDate: string;\n            name: string;\n            size: number;\n            type: string;\n        };\n    };\n}\n\nexport interface CloudinaryWidgetEventSuccess extends CloudinaryWidgetEvent {\n    event: 'success';\n    info: {\n        id: string;\n        asset_id: string;\n        bytes: number;\n        create_at: string;\n        etag: string;\n        folder: string;\n        format: string;\n        height: number;\n        path: string;\n        public_id: string;\n        resource_type: 'image' | 'video';\n        secure_url: string;\n        signature: string;\n        tags: string[];\n        thumbnail_url: string;\n        url: string;\n        version: number;\n        version_id: string;\n        width: number;\n    };\n}\n\nexport interface CloudinaryWidgetEventClose extends CloudinaryWidgetEvent {\n    event: 'close';\n    info: {\n        message: string;\n    };\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "CloudinaryWidgetEvent"
        },
        {
            "name": "CloudinaryWidgetEventSuccess",
            "id": "interface-CloudinaryWidgetEventSuccess-bd3d766179cb3833125894024e2b81998e6c7307b32b0edd0f5cb76b0149745a62aaaddd05ec2e9d95936c011e4315b1a51bfc51c494c3f6eadd9d0bca83ab54",
            "file": "src/types/cloudinary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CloudinaryWidget {\n    open(): void;\n    close(): void;\n    show(): void;\n}\n\nexport type CloudinaryWidgetSourceType =\n    | 'local'\n    | 'url'\n    | 'camera'\n    | 'dropbox'\n    | 'image_search'\n    | 'shutterstock'\n    | 'gettyimages'\n    | 'istock'\n    | 'unsplash'\n    | 'google_drive';\n\nexport interface CloudinaryWidgetEvent {\n    event: string;\n    info: object;\n}\n\nexport interface CloudinaryWidgetEventUploadAdded\n    extends CloudinaryWidgetEvent {\n    event: 'upload-added';\n    info: {\n        id: string;\n        publicId: string;\n        file: {\n            lastModified: number;\n            lastModifiedDate: string;\n            name: string;\n            size: number;\n            type: string;\n        };\n    };\n}\n\nexport interface CloudinaryWidgetEventSuccess extends CloudinaryWidgetEvent {\n    event: 'success';\n    info: {\n        id: string;\n        asset_id: string;\n        bytes: number;\n        create_at: string;\n        etag: string;\n        folder: string;\n        format: string;\n        height: number;\n        path: string;\n        public_id: string;\n        resource_type: 'image' | 'video';\n        secure_url: string;\n        signature: string;\n        tags: string[];\n        thumbnail_url: string;\n        url: string;\n        version: number;\n        version_id: string;\n        width: number;\n    };\n}\n\nexport interface CloudinaryWidgetEventClose extends CloudinaryWidgetEvent {\n    event: 'close';\n    info: {\n        message: string;\n    };\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "CloudinaryWidgetEvent"
        },
        {
            "name": "CloudinaryWidgetEventUploadAdded",
            "id": "interface-CloudinaryWidgetEventUploadAdded-bd3d766179cb3833125894024e2b81998e6c7307b32b0edd0f5cb76b0149745a62aaaddd05ec2e9d95936c011e4315b1a51bfc51c494c3f6eadd9d0bca83ab54",
            "file": "src/types/cloudinary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CloudinaryWidget {\n    open(): void;\n    close(): void;\n    show(): void;\n}\n\nexport type CloudinaryWidgetSourceType =\n    | 'local'\n    | 'url'\n    | 'camera'\n    | 'dropbox'\n    | 'image_search'\n    | 'shutterstock'\n    | 'gettyimages'\n    | 'istock'\n    | 'unsplash'\n    | 'google_drive';\n\nexport interface CloudinaryWidgetEvent {\n    event: string;\n    info: object;\n}\n\nexport interface CloudinaryWidgetEventUploadAdded\n    extends CloudinaryWidgetEvent {\n    event: 'upload-added';\n    info: {\n        id: string;\n        publicId: string;\n        file: {\n            lastModified: number;\n            lastModifiedDate: string;\n            name: string;\n            size: number;\n            type: string;\n        };\n    };\n}\n\nexport interface CloudinaryWidgetEventSuccess extends CloudinaryWidgetEvent {\n    event: 'success';\n    info: {\n        id: string;\n        asset_id: string;\n        bytes: number;\n        create_at: string;\n        etag: string;\n        folder: string;\n        format: string;\n        height: number;\n        path: string;\n        public_id: string;\n        resource_type: 'image' | 'video';\n        secure_url: string;\n        signature: string;\n        tags: string[];\n        thumbnail_url: string;\n        url: string;\n        version: number;\n        version_id: string;\n        width: number;\n    };\n}\n\nexport interface CloudinaryWidgetEventClose extends CloudinaryWidgetEvent {\n    event: 'close';\n    info: {\n        message: string;\n    };\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "CloudinaryWidgetEvent"
        },
        {
            "name": "DefaultModalButtonParameters",
            "id": "interface-DefaultModalButtonParameters-4ab7f0cf188adf189a5d4068afe37c05340b100c79ef4caae089e35f78aa598489ad5588543471cad589d9140b0cd275b9183a63280542cbd5573970e2a0d2ca",
            "file": "src/modules/modals/types/default-modal.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DefaultModalButtonParameters {\n    content: string;\n    closeDialog?: boolean;\n    action?: () => void;\n    redirect?: string;\n    icon?: string;\n    key?: string;\n    color?: boolean;\n}\n\nexport interface DefaultModalParameters {\n    title: string;\n    content?: string;\n    buttons?: DefaultModalButtonParameters[];\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "closeDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "redirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "DefaultModalParameters",
            "id": "interface-DefaultModalParameters-4ab7f0cf188adf189a5d4068afe37c05340b100c79ef4caae089e35f78aa598489ad5588543471cad589d9140b0cd275b9183a63280542cbd5573970e2a0d2ca",
            "file": "src/modules/modals/types/default-modal.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DefaultModalButtonParameters {\n    content: string;\n    closeDialog?: boolean;\n    action?: () => void;\n    redirect?: string;\n    icon?: string;\n    key?: string;\n    color?: boolean;\n}\n\nexport interface DefaultModalParameters {\n    title: string;\n    content?: string;\n    buttons?: DefaultModalButtonParameters[];\n}\n",
            "properties": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultModalButtonParameters[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ImageSizeFixed",
            "id": "interface-ImageSizeFixed-9bcc9c150ed1500790771bc4e02987cfe11b16c3fbd497765357cf94846caa129daf0767a782f15709232c96627af77e19fdc332e3782f33336dcf830cd0139c",
            "file": "src/modules/ui/components/image/image.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Cloudinary, CloudinaryImage } from '@cloudinary/url-gen';\nimport { thumbnail } from '@cloudinary/url-gen/actions/resize';\n\ninterface ImageSizeFixed {\n    height: number;\n    width: number;\n}\n\ninterface ImageSizeWidth {\n    width: number;\n    ratio: number;\n}\n\ninterface ImageSizeHeight {\n    height: number;\n    ratio: number;\n}\n\ninterface ImageSizeSquare {\n    square: number;\n}\n\ntype ImageSize =\n    | ImageSizeFixed\n    | ImageSizeWidth\n    | ImageSizeHeight\n    | ImageSizeSquare;\n\n@Component({\n    selector: 'app-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n})\nexport class ImageComponent {\n    @Input() publicID: string | undefined | null = null;\n    @Input() alt!: string;\n    @Input() size: ImageSize | null = null;\n    @Input() inferSize: boolean = false;\n\n    getSrc(scale: number = 1): string | null {\n        let image = this.getImage();\n\n        if (!image) return null;\n\n        image = this.resizeImage(image, scale);\n\n        return image.toURL();\n    }\n\n    getSrcset(): string | null {\n        return `${this.getSrc(0.5)} 0.5x, ${this.getSrc(1)} 1x, ${this.getSrc(\n            2,\n        )} 2x`;\n    }\n\n    private resizeImage(\n        image: CloudinaryImage,\n        scale: number = 1,\n    ): CloudinaryImage {\n        let resize = thumbnail();\n\n        if (this.height) resize = resize.height(this.height * scale);\n        if (this.width) resize = resize.width(this.width * scale);\n\n        return image.resize(resize);\n    }\n\n    private getImage(): CloudinaryImage | null {\n        if (!this.publicID) return null;\n\n        return new Cloudinary({ cloud: { cloudName: 'dofjtcdow' } }).image(\n            this.publicID,\n        );\n    }\n\n    get width(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('width' in this.size) {\n            return this.size.width;\n        }\n\n        if ('height' in this.size) {\n            return Math.floor(this.size.height * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n\n    get height(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('height' in this.size) {\n            return this.size.height;\n        }\n\n        if ('width' in this.size) {\n            return Math.floor(this.size.width * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ImageSizeHeight",
            "id": "interface-ImageSizeHeight-9bcc9c150ed1500790771bc4e02987cfe11b16c3fbd497765357cf94846caa129daf0767a782f15709232c96627af77e19fdc332e3782f33336dcf830cd0139c",
            "file": "src/modules/ui/components/image/image.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Cloudinary, CloudinaryImage } from '@cloudinary/url-gen';\nimport { thumbnail } from '@cloudinary/url-gen/actions/resize';\n\ninterface ImageSizeFixed {\n    height: number;\n    width: number;\n}\n\ninterface ImageSizeWidth {\n    width: number;\n    ratio: number;\n}\n\ninterface ImageSizeHeight {\n    height: number;\n    ratio: number;\n}\n\ninterface ImageSizeSquare {\n    square: number;\n}\n\ntype ImageSize =\n    | ImageSizeFixed\n    | ImageSizeWidth\n    | ImageSizeHeight\n    | ImageSizeSquare;\n\n@Component({\n    selector: 'app-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n})\nexport class ImageComponent {\n    @Input() publicID: string | undefined | null = null;\n    @Input() alt!: string;\n    @Input() size: ImageSize | null = null;\n    @Input() inferSize: boolean = false;\n\n    getSrc(scale: number = 1): string | null {\n        let image = this.getImage();\n\n        if (!image) return null;\n\n        image = this.resizeImage(image, scale);\n\n        return image.toURL();\n    }\n\n    getSrcset(): string | null {\n        return `${this.getSrc(0.5)} 0.5x, ${this.getSrc(1)} 1x, ${this.getSrc(\n            2,\n        )} 2x`;\n    }\n\n    private resizeImage(\n        image: CloudinaryImage,\n        scale: number = 1,\n    ): CloudinaryImage {\n        let resize = thumbnail();\n\n        if (this.height) resize = resize.height(this.height * scale);\n        if (this.width) resize = resize.width(this.width * scale);\n\n        return image.resize(resize);\n    }\n\n    private getImage(): CloudinaryImage | null {\n        if (!this.publicID) return null;\n\n        return new Cloudinary({ cloud: { cloudName: 'dofjtcdow' } }).image(\n            this.publicID,\n        );\n    }\n\n    get width(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('width' in this.size) {\n            return this.size.width;\n        }\n\n        if ('height' in this.size) {\n            return Math.floor(this.size.height * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n\n    get height(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('height' in this.size) {\n            return this.size.height;\n        }\n\n        if ('width' in this.size) {\n            return Math.floor(this.size.width * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ImageSizeSquare",
            "id": "interface-ImageSizeSquare-9bcc9c150ed1500790771bc4e02987cfe11b16c3fbd497765357cf94846caa129daf0767a782f15709232c96627af77e19fdc332e3782f33336dcf830cd0139c",
            "file": "src/modules/ui/components/image/image.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Cloudinary, CloudinaryImage } from '@cloudinary/url-gen';\nimport { thumbnail } from '@cloudinary/url-gen/actions/resize';\n\ninterface ImageSizeFixed {\n    height: number;\n    width: number;\n}\n\ninterface ImageSizeWidth {\n    width: number;\n    ratio: number;\n}\n\ninterface ImageSizeHeight {\n    height: number;\n    ratio: number;\n}\n\ninterface ImageSizeSquare {\n    square: number;\n}\n\ntype ImageSize =\n    | ImageSizeFixed\n    | ImageSizeWidth\n    | ImageSizeHeight\n    | ImageSizeSquare;\n\n@Component({\n    selector: 'app-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n})\nexport class ImageComponent {\n    @Input() publicID: string | undefined | null = null;\n    @Input() alt!: string;\n    @Input() size: ImageSize | null = null;\n    @Input() inferSize: boolean = false;\n\n    getSrc(scale: number = 1): string | null {\n        let image = this.getImage();\n\n        if (!image) return null;\n\n        image = this.resizeImage(image, scale);\n\n        return image.toURL();\n    }\n\n    getSrcset(): string | null {\n        return `${this.getSrc(0.5)} 0.5x, ${this.getSrc(1)} 1x, ${this.getSrc(\n            2,\n        )} 2x`;\n    }\n\n    private resizeImage(\n        image: CloudinaryImage,\n        scale: number = 1,\n    ): CloudinaryImage {\n        let resize = thumbnail();\n\n        if (this.height) resize = resize.height(this.height * scale);\n        if (this.width) resize = resize.width(this.width * scale);\n\n        return image.resize(resize);\n    }\n\n    private getImage(): CloudinaryImage | null {\n        if (!this.publicID) return null;\n\n        return new Cloudinary({ cloud: { cloudName: 'dofjtcdow' } }).image(\n            this.publicID,\n        );\n    }\n\n    get width(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('width' in this.size) {\n            return this.size.width;\n        }\n\n        if ('height' in this.size) {\n            return Math.floor(this.size.height * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n\n    get height(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('height' in this.size) {\n            return this.size.height;\n        }\n\n        if ('width' in this.size) {\n            return Math.floor(this.size.width * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n}\n",
            "properties": [
                {
                    "name": "square",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ImageSizeWidth",
            "id": "interface-ImageSizeWidth-9bcc9c150ed1500790771bc4e02987cfe11b16c3fbd497765357cf94846caa129daf0767a782f15709232c96627af77e19fdc332e3782f33336dcf830cd0139c",
            "file": "src/modules/ui/components/image/image.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Cloudinary, CloudinaryImage } from '@cloudinary/url-gen';\nimport { thumbnail } from '@cloudinary/url-gen/actions/resize';\n\ninterface ImageSizeFixed {\n    height: number;\n    width: number;\n}\n\ninterface ImageSizeWidth {\n    width: number;\n    ratio: number;\n}\n\ninterface ImageSizeHeight {\n    height: number;\n    ratio: number;\n}\n\ninterface ImageSizeSquare {\n    square: number;\n}\n\ntype ImageSize =\n    | ImageSizeFixed\n    | ImageSizeWidth\n    | ImageSizeHeight\n    | ImageSizeSquare;\n\n@Component({\n    selector: 'app-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n})\nexport class ImageComponent {\n    @Input() publicID: string | undefined | null = null;\n    @Input() alt!: string;\n    @Input() size: ImageSize | null = null;\n    @Input() inferSize: boolean = false;\n\n    getSrc(scale: number = 1): string | null {\n        let image = this.getImage();\n\n        if (!image) return null;\n\n        image = this.resizeImage(image, scale);\n\n        return image.toURL();\n    }\n\n    getSrcset(): string | null {\n        return `${this.getSrc(0.5)} 0.5x, ${this.getSrc(1)} 1x, ${this.getSrc(\n            2,\n        )} 2x`;\n    }\n\n    private resizeImage(\n        image: CloudinaryImage,\n        scale: number = 1,\n    ): CloudinaryImage {\n        let resize = thumbnail();\n\n        if (this.height) resize = resize.height(this.height * scale);\n        if (this.width) resize = resize.width(this.width * scale);\n\n        return image.resize(resize);\n    }\n\n    private getImage(): CloudinaryImage | null {\n        if (!this.publicID) return null;\n\n        return new Cloudinary({ cloud: { cloudName: 'dofjtcdow' } }).image(\n            this.publicID,\n        );\n    }\n\n    get width(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('width' in this.size) {\n            return this.size.width;\n        }\n\n        if ('height' in this.size) {\n            return Math.floor(this.size.height * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n\n    get height(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('height' in this.size) {\n            return this.size.height;\n        }\n\n        if ('width' in this.size) {\n            return Math.floor(this.size.width * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n}\n",
            "properties": [
                {
                    "name": "ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "LayoutActionContent",
            "id": "interface-LayoutActionContent-c24173a11f88456e4099128bd5a42c491009c49b4f17db17120a8cd1b3f5740594f183807c7fcafb35c27eef9fc9490fd3919e3f040c9364aab4899e68afc2b7",
            "file": "src/modules/ui/models/layout.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface LayoutActionContent {\n    content: string;\n    icon?: string;\n}\n\ninterface LayoutActionIcon {\n    content?: string;\n    icon: string;\n}\n\nexport type LayoutAction = (LayoutActionContent | LayoutActionIcon) & {\n    link?: string;\n    action?: () => void;\n};\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "LayoutActionIcon",
            "id": "interface-LayoutActionIcon-c24173a11f88456e4099128bd5a42c491009c49b4f17db17120a8cd1b3f5740594f183807c7fcafb35c27eef9fc9490fd3919e3f040c9364aab4899e68afc2b7",
            "file": "src/modules/ui/models/layout.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface LayoutActionContent {\n    content: string;\n    icon?: string;\n}\n\ninterface LayoutActionIcon {\n    content?: string;\n    icon: string;\n}\n\nexport type LayoutAction = (LayoutActionContent | LayoutActionIcon) & {\n    link?: string;\n    action?: () => void;\n};\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "LoadedPublicUserResultClass",
            "id": "interface-LoadedPublicUserResultClass-99b3e3bcd7eb0629a66a4a0c68b24ba6664c635158c6e62a9a8c971d5102cca169cbf3743bff3405720050d501350f9bee62788157d750a32bdb4b0baa41f87d",
            "file": "src/modules/matching/models/public-user-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n    NotLoadedPublicUserResult,\n    PublicUserResult,\n} from 'common/models/user';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\nexport interface NotLoadedPublicUserResultClass {\n    get value(): NotLoadedPublicUserResult;\n}\n\nexport interface LoadedPublicUserResultClass {\n    get value(): PublicUserResult;\n}\n\nexport class PublicUserResultClass {\n    private value$: BehaviorSubject<PublicUserResult>;\n    private loaded$: BehaviorSubject<boolean>;\n\n    constructor(\n        initialValue: NotLoadedPublicUserResult,\n        private readonly http: HttpClient,\n    ) {\n        this.value$ = new BehaviorSubject<PublicUserResult>(initialValue);\n        this.loaded$ = new BehaviorSubject<boolean>(false);\n\n        this.fetch().subscribe();\n    }\n\n    get id(): number {\n        return this.value$.value.userId;\n    }\n\n    get currentValue(): PublicUserResult {\n        return this.value$.value;\n    }\n\n    get currentlyLoaded(): boolean {\n        return this.loaded$.value;\n    }\n\n    get value(): Observable<PublicUserResult> {\n        return this.value$.asObservable();\n    }\n\n    get loaded(): Observable<boolean> {\n        return this.loaded$.asObservable();\n    }\n\n    private fetch(): Observable<PublicUserResult> {\n        return this.http\n            .get<PublicUserResult>(`/public-profile/find/${this.id}`)\n            .pipe(\n                tap((user) => {\n                    this.value$.next(user);\n                    this.loaded$.next(true);\n                }),\n            );\n    }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 174,
            "methods": []
        },
        {
            "name": "NotLoadedPublicUserResultClass",
            "id": "interface-NotLoadedPublicUserResultClass-99b3e3bcd7eb0629a66a4a0c68b24ba6664c635158c6e62a9a8c971d5102cca169cbf3743bff3405720050d501350f9bee62788157d750a32bdb4b0baa41f87d",
            "file": "src/modules/matching/models/public-user-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n    NotLoadedPublicUserResult,\n    PublicUserResult,\n} from 'common/models/user';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\nexport interface NotLoadedPublicUserResultClass {\n    get value(): NotLoadedPublicUserResult;\n}\n\nexport interface LoadedPublicUserResultClass {\n    get value(): PublicUserResult;\n}\n\nexport class PublicUserResultClass {\n    private value$: BehaviorSubject<PublicUserResult>;\n    private loaded$: BehaviorSubject<boolean>;\n\n    constructor(\n        initialValue: NotLoadedPublicUserResult,\n        private readonly http: HttpClient,\n    ) {\n        this.value$ = new BehaviorSubject<PublicUserResult>(initialValue);\n        this.loaded$ = new BehaviorSubject<boolean>(false);\n\n        this.fetch().subscribe();\n    }\n\n    get id(): number {\n        return this.value$.value.userId;\n    }\n\n    get currentValue(): PublicUserResult {\n        return this.value$.value;\n    }\n\n    get currentlyLoaded(): boolean {\n        return this.loaded$.value;\n    }\n\n    get value(): Observable<PublicUserResult> {\n        return this.value$.asObservable();\n    }\n\n    get loaded(): Observable<boolean> {\n        return this.loaded$.asObservable();\n    }\n\n    private fetch(): Observable<PublicUserResult> {\n        return this.http\n            .get<PublicUserResult>(`/public-profile/find/${this.id}`)\n            .pipe(\n                tap((user) => {\n                    this.value$.next(user);\n                    this.loaded$.next(true);\n                }),\n            );\n    }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 174,
            "methods": []
        },
        {
            "name": "UploadcareEvent",
            "id": "interface-UploadcareEvent-979adceb9c370cf7946da81ed5d0afd51608ce4b44e868b028425e7ea87d162e5aef6681697245425c6af847342c236e75a479a53327effbf708e558946a6a9f",
            "file": "src/modules/image/models/event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UploadcareFile } from './image';\n\nexport interface UploadcareEvent extends Event {\n    detail: {\n        ctxName: string;\n        data: UploadcareFile[];\n        timestamp: number;\n    };\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "Event"
        },
        {
            "name": "UploadcareFile",
            "id": "interface-UploadcareFile-423a62154340bc92acc17cc999a0590450501a7502844a20e0834df5197e607888b2dc46f9aee63bc37666228cb092c5ab4b5291bfd4eb1c2e759b7cf2438d5b",
            "file": "src/modules/image/models/image.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UploadcareFile {\n    cdnUrl: string;\n    isImage: boolean;\n    isStored: boolean;\n    name: string;\n    uuid: string;\n}\n",
            "properties": [
                {
                    "name": "cdnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isStored",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-dd1943fa9fe8611c0d69b3c8da178efc34f4cac0c23b7db0cbf52f43510a5c0ae079f1035904e137b74211b470c181bc80abe5300d4069ea0d4d19eec289f9b6",
            "file": "src/modules/authentication/services/authentication-service/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserPublicSession | undefined>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "AuthenticationUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserPublicSession>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "AuthenticationUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "ignoreApi",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ignoreApi",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestPasswordReset",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "user",
                            "type": "AuthenticationUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserPublicSession>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "AuthenticationUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n    AuthenticationUser,\n    UserPublicSession,\n} from 'common/models/authentication';\nimport { Observable, catchError, map, of, switchMap, tap } from 'rxjs';\nimport { SessionService } from '../session-service/session.service';\nimport { Router } from '@angular/router';\nimport { HOME_ROUTE, LOGIN_ROUTE } from 'src/constants/routes';\nimport { WsService } from 'src/services/ws-service/ws.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthenticationService {\n    constructor(\n        private readonly http: HttpClient,\n        private readonly sessionService: SessionService,\n        private readonly router: Router,\n        private readonly wsService: WsService,\n    ) {}\n\n    login(user: AuthenticationUser): Observable<UserPublicSession> {\n        return this.http.post<UserPublicSession>('/auth/login', user).pipe(\n            switchMap((session) =>\n                this.wsService.connect(session.token).pipe(\n                    tap(() => {\n                        this.sessionService.setSession(session);\n                        this.router.navigate([HOME_ROUTE]);\n                    }),\n                    map(() => session),\n                ),\n            ),\n        );\n    }\n\n    signup(user: AuthenticationUser): Observable<UserPublicSession> {\n        return this.http.post<UserPublicSession>('/auth/signup', user).pipe(\n            switchMap((session) =>\n                this.wsService.connect(session.token).pipe(\n                    tap(() => {\n                        this.sessionService.setSession(session);\n                        this.router.navigate([HOME_ROUTE]);\n                    }),\n                    map(() => session),\n                ),\n            ),\n        );\n    }\n\n    logout(ignoreApi: boolean = false): Observable<void> {\n        const onLogout = () => {\n            this.wsService.disconnect();\n            this.sessionService.setSession(undefined);\n            this.router.navigate([LOGIN_ROUTE]);\n        };\n\n        if (ignoreApi) {\n            onLogout();\n            return of();\n        }\n\n        return this.http\n            .post<void>('/auth/logout', {})\n            .pipe(tap(() => onLogout()));\n    }\n\n    loadSession(): Observable<UserPublicSession | undefined> {\n        const token = this.sessionService.getLocalToken();\n\n        if (!token) {\n            return of(undefined);\n        }\n\n        return this.http.post<UserPublicSession>('/auth/load', { token }).pipe(\n            tap((session) => {\n                this.sessionService.setSession(session);\n            }),\n            catchError(() => of(undefined)),\n        );\n    }\n\n    requestPasswordReset(email: string): Observable<void> {\n        return this.http.post<void>('/auth/password-reset/request', { email });\n    }\n\n    resetPassword(token: string, newPassword: string): Observable<void> {\n        return this.http.post<void>('/auth/password-reset', {\n            token,\n            newPassword,\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "InitializerService",
            "id": "injectable-InitializerService-04e18d8d2900e6a14cd82674e5a8b0eb0be68f6770b8929b1539c9aaf213730597d2ed8eb86fa46f1412a2d0a44140e2a596c81eb9c1d65c74ac677a50ae5e31",
            "file": "src/services/initializer-service/initializer.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleEmailVerificationUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRedirect",
                    "args": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isPubliclyAccessibleRoute",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HOME_ROUTE,\n    LOGIN_ROUTE,\n    PUBLICLY_ACCESSIBLE_ROUTES_PATH,\n    PUBLIC_ROUTES_PATH,\n} from 'src/constants/routes';\nimport { AuthenticationService } from 'src/modules/authentication/services/authentication-service/authentication.service';\nimport { StateService } from '../state-service/state.service';\nimport { combineLatest } from 'rxjs';\nimport { WsService } from '../ws-service/ws.service';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { UserPublicSession } from 'common/models/authentication';\nimport { Location } from '@angular/common';\nimport {\n    EMAIL_VALIDATION_TOKEN_KEY,\n    EMAIL_VALIDATION_URL_REGEX,\n} from 'src/constants/user-validation';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\nimport { ABOUT_ROUTE } from 'src/modules/about/constants/routes';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class InitializerService {\n    constructor(\n        private readonly stateService: StateService,\n        private readonly authenticationService: AuthenticationService,\n        private readonly sessionService: SessionService,\n        private readonly router: Router,\n        private readonly location: Location,\n        private readonly wsService: WsService,\n        private readonly validationService: ValidationService,\n    ) {}\n\n    async initialize(): Promise<void> {\n        this.stateService.setLoading();\n\n        this.handleEmailVerificationUrl(this.location.path());\n\n        combineLatest([\n            this.sessionService.session,\n            this.wsService.disconnect$,\n        ]).subscribe({\n            next: ([session]) => {\n                if (session) {\n                    this.stateService.setLoading();\n                } else {\n                    this.stateService.setReady();\n                }\n            },\n            error: (error) => {\n                this.stateService.setError(error);\n            },\n        });\n\n        this.wsService.ws.subscribe((ws) => {\n            if (ws) {\n                this.stateService.setReady();\n            }\n        });\n\n        this.authenticationService.loadSession().subscribe((session) => {\n            if (session) {\n                this.wsService.connect(session.token).subscribe();\n            } else {\n                this.stateService.setReady();\n            }\n            this.handleRedirect(session);\n        });\n\n        combineLatest([\n            this.sessionService.session,\n            this.wsService.ws,\n        ]).subscribe(([session, ws]) => {\n            if (session && ws) {\n                const emailValidationToken = localStorage.getItem(\n                    EMAIL_VALIDATION_TOKEN_KEY,\n                );\n                if (emailValidationToken) {\n                    this.validationService\n                        .validateEmail(emailValidationToken)\n                        .subscribe();\n                }\n\n                localStorage.removeItem(EMAIL_VALIDATION_TOKEN_KEY);\n            }\n        });\n    }\n\n    handleRedirect(session: UserPublicSession | undefined): void {\n        if (session && PUBLIC_ROUTES_PATH.includes(this.location.path())) {\n            this.router.navigate([HOME_ROUTE]);\n        }\n\n        if (!session && !this.isPubliclyAccessibleRoute(this.location.path())) {\n            this.router.navigate([LOGIN_ROUTE]);\n        }\n    }\n\n    private handleEmailVerificationUrl(path: string): void {\n        const match = EMAIL_VALIDATION_URL_REGEX.exec(path);\n\n        const token = match?.groups?.['token'];\n\n        if (!token) return;\n\n        localStorage.setItem(EMAIL_VALIDATION_TOKEN_KEY, token);\n    }\n\n    private isPubliclyAccessibleRoute(path: string): boolean {\n        return (\n            path.startsWith(ABOUT_ROUTE) ||\n            PUBLICLY_ACCESSIBLE_ROUTES_PATH.find((publicPath) =>\n                new RegExp(`^${publicPath}(?:\\\\?.+)?$`).test(path),\n            ) !== undefined\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MatchingService",
            "id": "injectable-MatchingService-3334c31eda8f6551e74228a1d36198baae1900a1bb8611eb9b13e4468e5ebf07e07358aa0b12f32632d2b8057e164f4e8c7129ed28f802e0e02130cc1a077aab",
            "file": "src/modules/matching/services/matching-service/matching.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "askUnmatchUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dislikeUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMatch",
                    "args": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "instantiate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "likeUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unmatchedUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WsServer } from 'common/models/ws';\nimport { WsService } from 'src/services/ws-service/ws.service';\nimport { PublicProfileService } from '../public-profile-service/public-profile.service';\nimport { map, switchMap } from 'rxjs';\nimport { ModalService } from 'src/modules/modals/services/modal.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PublicUserResultClass } from '../../models/public-user-result';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MatchingService {\n    constructor(\n        private readonly http: HttpClient,\n        private readonly wsService: WsService,\n        private readonly dialog: MatDialog,\n        private readonly publicProfileService: PublicProfileService,\n        private readonly modalService: ModalService,\n        private readonly snackBar: MatSnackBar,\n    ) {\n        this.instantiate();\n    }\n\n    likeUser(userId: number) {\n        return this.http.post(`/matching/like/${userId}`, {}).pipe(\n            switchMap(() => this.publicProfileService.fetchMatches()),\n            map(() => {}),\n        );\n    }\n\n    dislikeUser(userId: number) {\n        return this.http.post(`/matching/dislike/${userId}`, {}).pipe(\n            switchMap(() => this.publicProfileService.fetchMatches()),\n            map(() => {}),\n        );\n    }\n\n    unmatchedUser(userId: number) {\n        return this.http.post(`/matching/unmatch/${userId}`, {}).pipe(\n            switchMap(() => this.publicProfileService.fetchMatches()),\n            map(() => {}),\n        );\n    }\n\n    askUnmatchUser(user: PublicUserResultClass) {\n        this.modalService.open({\n            title: `Supprimer ${user.currentValue.name} de vos matchs ?`,\n            content: `Vous ne pourrez plus lui envoyer de messages.`,\n            buttons: [\n                {\n                    content: 'Annuler',\n                    closeDialog: true,\n                },\n                {\n                    content: 'Supprimer',\n                    closeDialog: true,\n                    color: true,\n                    action: () => this.unmatchedUser(user.id).subscribe(),\n                },\n            ],\n        });\n    }\n\n    private instantiate() {\n        this.wsService\n            .listen('match:matched-active')\n            .subscribe((data) => this.handleMatch(data, true));\n        this.wsService\n            .listen('match:matched-passive')\n            .subscribe((data) => this.handleMatch(data, false));\n    }\n\n    private handleMatch(\n        {\n            matchedUserId,\n        }: WsServer['match:matched-active' | 'match:matched-passive'],\n        active: boolean,\n    ) {\n        this.publicProfileService.fetchMatches().subscribe((result) => {\n            const user = result.find((user) => user.id === matchedUserId);\n\n            if (!user) {\n                throw new Error('User not found');\n            }\n\n            user.loaded.subscribe((loaded) => {\n                if (loaded) {\n                    if (active) {\n                        this.modalService.open({\n                            title: \"C'est un match !\",\n                            content: `Vous avez matché avec ${user.currentValue.name} !`,\n                            buttons: [\n                                {\n                                    content: 'Plus tard',\n                                    closeDialog: true,\n                                },\n                                {\n                                    content: 'Discuter',\n                                    redirect: `/matches/${user.id}`,\n                                    color: true,\n                                },\n                            ],\n                        });\n                    } else {\n                        this.snackBar.open(\n                            `Nouveau match avec ${user.currentValue.name} !`,\n                            undefined,\n                            { duration: 2000, verticalPosition: 'top' },\n                        );\n                    }\n                }\n            });\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MessagesService",
            "id": "injectable-MessagesService-80f165327257353a76b289cf50ce9c4462dacf4f4729061e0f67a1b0ded57c4d152ba5597e6172ffdb9dd4b1af96e6bf7d534a262be8f04ae131e7bf9e0e7701",
            "file": "src/modules/matching/services/messages-service/messages.service.ts",
            "properties": [
                {
                    "name": "messages$",
                    "defaultValue": "new BehaviorSubject(new Map())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Map<TypeOfId<User>, Message[]>>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchMessages",
                    "args": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message[]>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMessages",
                    "args": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsRead",
                    "args": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "TypeOfId<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, switchMap, tap } from 'rxjs';\nimport { TypeOfId } from 'common/types/id';\nimport { User } from 'common/models/user';\nimport { Message } from 'common/models/message';\nimport { HttpClient } from '@angular/common/http';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { WsService } from 'src/services/ws-service/ws.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MessagesService {\n    private messages$: BehaviorSubject<Map<TypeOfId<User>, Message[]>> =\n        new BehaviorSubject(new Map());\n\n    constructor(\n        private readonly http: HttpClient,\n        private readonly sessionService: SessionService,\n        private readonly wsService: WsService,\n    ) {\n        this.wsService.listen('message:new').subscribe((message) => {\n            this.messages$.next(\n                this.messages$.value.set(message.senderId, [\n                    ...(this.messages$.value.get(message.senderId) ?? []),\n                    message,\n                ]),\n            );\n        });\n\n        this.sessionService.isLoggedIn().subscribe((isLoggedIn) => {\n            if (!isLoggedIn) this.messages$.next(new Map());\n        });\n    }\n\n    getMessages(userId: TypeOfId<User>): Observable<Message[]> {\n        return this.messages$.pipe(\n            switchMap((messages) =>\n                messages.has(userId)\n                    ? of(messages.get(userId)!)\n                    : this.fetchMessages(userId),\n            ),\n        );\n    }\n\n    sendMessage(userId: TypeOfId<User>, content: string): Observable<void> {\n        this.messages$.next(\n            this.messages$.value.set(userId, [\n                ...(this.messages$.value.get(userId) ?? []),\n                {\n                    content,\n                    recipientId: userId,\n                    senderId:\n                        this.sessionService.getCurrentSession().user.userId,\n                    timestamp: new Date(),\n                    read: false,\n                },\n            ]),\n        );\n\n        return this.http.post<void>('/messages', {\n            recipientId: userId,\n            content,\n        });\n    }\n\n    markAsRead(userId: TypeOfId<User>): Observable<void> {\n        return this.http.post<void>(`/messages/read/${userId}`, {});\n    }\n\n    private fetchMessages(userId: TypeOfId<User>): Observable<Message[]> {\n        return this.http.get<Message[]>(`/messages/${userId}`).pipe(\n            tap((messages) => {\n                this.messages$.next(this.messages$.value.set(userId, messages));\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-f670ff8b1003061b274307866344cc872e882d672d68744e4623ab3e841c47f7a12130810bc3b2fad624eb55eef58449b9b7291be1306c5ca851b95ec9b8270f",
            "file": "src/modules/modals/services/modal.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "modal",
                            "type": "DefaultModalParameters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "DefaultModalParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DefaultModalParameters } from '../types/default-modal';\nimport { DefaultModalComponent } from '../components/default-modal/default-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ModalService {\n    constructor(private readonly dialog: MatDialog) {}\n\n    open(modal: DefaultModalParameters) {\n        this.dialog.open<DefaultModalComponent, DefaultModalParameters>(\n            DefaultModalComponent,\n            {\n                data: modal,\n            },\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModerationService",
            "id": "injectable-ModerationService-b31bee5662d26411cf4689260681b5c1b31d40860d4f4b19b23384d0f0415dbbff5074acb34a78862d6fa946770fbd77cfab27bdb006c3d5db84df8e2c9f100c",
            "file": "src/modules/moderation/services/moderation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "blockUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openBlockUserModal",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openReportUserModal",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendReport",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reportType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportUserModalComponent } from '../components/report-user-modal/report-user-modal.component';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject, tap } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ModalService } from 'src/modules/modals/services/modal.service';\nimport { PublicProfileService } from 'src/modules/matching/services/public-profile-service/public-profile.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ModerationService {\n    constructor(\n        private readonly modalService: ModalService,\n        private readonly dialog: MatDialog,\n        private readonly http: HttpClient,\n        private readonly snackBar: MatSnackBar,\n        private readonly publicProfileService: PublicProfileService,\n    ) {}\n\n    openReportUserModal(userId: number, userName: string) {\n        this.dialog.open(ReportUserModalComponent, {\n            data: { userId, userName },\n        });\n    }\n\n    openBlockUserModal(userId: number, userName: string): Observable<void> {\n        const subject = new Subject<void>();\n        this.modalService.open({\n            title: 'Bloquer un utilisateur',\n            content: `Êtes-vous sûr de vouloir bloquer ${userName} ?`,\n            buttons: [\n                {\n                    content: 'Annuler',\n                    closeDialog: true,\n                    action: () => {\n                        subject.error('Canceled by user');\n                    },\n                },\n                {\n                    content: 'Bloquer',\n                    action: () => {\n                        this.blockUser(userId).subscribe(() => {\n                            subject.next();\n                        });\n                    },\n                    color: true,\n                },\n            ],\n        });\n        return subject;\n    }\n\n    sendReport(\n        userId: number,\n        reportType: string,\n        description: string | undefined,\n    ) {\n        return this.http\n            .post<void>(`/moderation/report/${userId}`, {\n                reportType,\n                description,\n            })\n            .pipe(\n                tap(() => {\n                    this.snackBar.open(\n                        \"L'utilisateur a été signalé. Merci !\",\n                        undefined,\n                        {\n                            duration: 2000,\n                            verticalPosition: 'top',\n                        },\n                    );\n                }),\n            );\n    }\n\n    blockUser(userId: number) {\n        return this.http.post<void>(`/moderation/block/${userId}`, {}).pipe(\n            tap(() => {\n                this.snackBar.open(\n                    \"L'utilisateur a été bloqué. Merci !\",\n                    undefined,\n                    {\n                        duration: 2000,\n                        verticalPosition: 'top',\n                    },\n                );\n                this.publicProfileService.fetchMatches().subscribe();\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PublicProfileService",
            "id": "injectable-PublicProfileService-1f458313abfaf5919f28ecabca8abee052c37cfe75283d74a2d14fa4f84d6af11d3848267a683ad71165f87c1e239d65f20ff22717e9943f2ae96a40049994d9",
            "file": "src/modules/matching/services/public-profile-service/public-profile.service.ts",
            "properties": [
                {
                    "name": "matches$",
                    "defaultValue": "new BehaviorSubject<MatchListItemClass[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MatchListItemClass[]>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchMatches",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MatchListItemClass[]>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchMatchesIfNotLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PublicUserResultClass[]>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAvailableUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PublicUserResultClass[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMatch",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { NotLoadedPublicUserResult } from 'common/models/user';\nimport { BehaviorSubject, Observable, combineLatest, map, tap } from 'rxjs';\nimport { PublicUserResultClass } from '../../models/public-user-result';\nimport { MatchListItem } from 'common/models/matching';\nimport { MatchListItemClass } from '../../models/match-list-item';\nimport { WsService } from 'src/services/ws-service/ws.service';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PublicProfileService {\n    private matches$: BehaviorSubject<MatchListItemClass[]> =\n        new BehaviorSubject<MatchListItemClass[]>([]);\n\n    constructor(\n        private readonly http: HttpClient,\n        private readonly wsService: WsService,\n        private readonly sessionService: SessionService,\n        private readonly validationService: ValidationService,\n    ) {\n        this.wsService.listen('message:new').subscribe((message) => {\n            const matches = this.matches$.getValue();\n            const match = matches.find(\n                (match) => match.id === message.senderId,\n            );\n\n            if (match) {\n                match.queryInfo.lastMessage = message.content;\n                match.queryInfo.lastMessageAuthorId = message.senderId;\n                match.queryInfo.lastMessageTimestamp = message.timestamp;\n                match.queryInfo.messagesCount =\n                    (match.queryInfo.messagesCount ?? 0) + 1;\n                match.queryInfo.unreadMessagesCount =\n                    (match.queryInfo.unreadMessagesCount ?? 0) + 1;\n\n                this.matches$.next(matches);\n            }\n        });\n        this.wsService.listen('match:update-list').subscribe(() => {\n            this.fetchMatches().subscribe();\n        });\n\n        combineLatest([\n            this.sessionService.isLoggedIn(),\n            this.validationService.userValid,\n        ]).subscribe(([isLoggedIn, userValid]) => {\n            if (isLoggedIn && userValid) {\n                this.fetchMatches().subscribe();\n            } else {\n                this.matches$.next([]);\n            }\n        });\n    }\n\n    get matches() {\n        return this.matches$.asObservable();\n    }\n\n    get unreadConversationCount(): Observable<string> {\n        return this.matches.pipe(\n            map((matches) => {\n                return matches.reduce((acc, match) => {\n                    return acc + match.queryInfo.unreadMessagesCount ? 1 : 0;\n                }, 0);\n            }),\n            map((count) => (count > 9 ? '+' : `${count}`)),\n        );\n    }\n\n    getMatch(id: number) {\n        return this.matches.pipe(\n            map((matches) => matches.find((match) => match.id === id)),\n        );\n    }\n\n    getAvailableUsers(): Observable<PublicUserResultClass[]> {\n        return this.http\n            .get<NotLoadedPublicUserResult[]>('/public-profile')\n            .pipe(\n                map((users) => {\n                    return users.map(\n                        (user) => new PublicUserResultClass(user, this.http),\n                    );\n                }),\n            );\n    }\n\n    fetchMatches(): Observable<MatchListItemClass[]> {\n        return this.http.get<MatchListItem[]>('/public-profile/matches').pipe(\n            map((users) => {\n                return users.map(\n                    (user) => new MatchListItemClass(user, this.http),\n                );\n            }),\n            tap((users) => this.matches$.next(users)),\n        );\n    }\n\n    fetchMatchesIfNotLoaded(): Observable<PublicUserResultClass[]> {\n        if (this.matches$.getValue().length === 0) {\n            return this.fetchMatches();\n        }\n\n        return this.matches;\n    }\n\n    // private haveMatchesChanged(matches: PublicUserResultClass[]): boolean {\n    //     const currentMatches = this.matches$.getValue();\n    //     if (currentMatches.length !== matches.length) {\n    //         return true;\n    //     }\n\n    //     return matches.some((match) => {\n    //         const currentMatch = currentMatches.find(\n    //             (currentMatch) => currentMatch.id === match.id,\n    //         );\n\n    //         if (!currentMatch) {\n    //             return true;\n    //         }\n\n    //         return currentMatch.currentValue.userId !== match.id;\n    //     });\n    // }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "matches": {
                    "name": "matches",
                    "getSignature": {
                        "name": "matches",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "unreadConversationCount": {
                    "name": "unreadConversationCount",
                    "getSignature": {
                        "name": "unreadConversationCount",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 63
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-6112764350da2f8a423dae84b3f30711375343b5a84c7201a69efef409c9df81aa6cea9017540549bc365f7ce06741ad065e7312db6cb15e5d8131bbad105ac9",
            "file": "src/modules/authentication/services/session-service/session.service.ts",
            "properties": [
                {
                    "name": "session$",
                    "defaultValue": "new BehaviorSubject<UserPublicSession | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<UserPublicSession | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentSession",
                    "args": [],
                    "optional": false,
                    "returnType": "UserPublicSession",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocalToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCurrentlyLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeLocalToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setLocalToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { UserPublicSession } from 'common/models/authentication';\nimport { SESSION_TOKEN_KEY } from '../../constants/local-storage';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SessionService {\n    private session$: BehaviorSubject<UserPublicSession | undefined> =\n        new BehaviorSubject<UserPublicSession | undefined>(undefined);\n\n    constructor() {\n        this.session$.subscribe((session) => this.handleSession(session));\n    }\n\n    get session(): Observable<UserPublicSession | undefined> {\n        return this.session$.asObservable();\n    }\n\n    setSession(session: UserPublicSession | undefined): void {\n        if (session?.token === this.session$.value?.token) return;\n        this.session$.next(session);\n    }\n\n    isLoggedIn(): Observable<boolean> {\n        return this.session$\n            .asObservable()\n            .pipe(map((session) => session !== undefined));\n    }\n\n    isCurrentlyLoggedIn(): boolean {\n        return this.session$.value !== undefined;\n    }\n\n    getCurrentSession(): UserPublicSession {\n        if (!this.session$.value) {\n            throw new Error('No session is currently logged in');\n        }\n        return this.session$.value;\n    }\n\n    private handleSession(session: UserPublicSession | undefined): void {\n        if (session) {\n            this.setLocalToken(session.token);\n        }\n    }\n\n    getLocalToken(): string | null {\n        return localStorage.getItem(SESSION_TOKEN_KEY);\n    }\n\n    private setLocalToken(token: string): void {\n        localStorage.setItem(SESSION_TOKEN_KEY, token);\n    }\n\n    private removeLocalToken(): void {\n        localStorage.removeItem(SESSION_TOKEN_KEY);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "session": {
                    "name": "session",
                    "getSignature": {
                        "name": "session",
                        "type": "",
                        "returnType": "Observable<UserPublicSession | undefined>",
                        "line": 17
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "StateService",
            "id": "injectable-StateService-2027eaa4290c1c48cfbf1cf142f1bb27fc34279697c24d451fe3d8121010280a254a6da165f4c341b9a4f194bf878447c405a6106dbae9e59046486e846421f9",
            "file": "src/services/state-service/state.service.ts",
            "properties": [
                {
                    "name": "error$",
                    "defaultValue": "new BehaviorSubject<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state$",
                    "defaultValue": "new BehaviorSubject<State>(State.LOADING)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setError",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { State } from 'src/constants/states';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StateService {\n    private state$ = new BehaviorSubject<State>(State.LOADING);\n    private error$ = new BehaviorSubject<string | undefined>(undefined);\n\n    constructor() {}\n\n    setReady() {\n        this.state$.next(State.READY);\n    }\n\n    setError(error: string) {\n        this.error$.next(error);\n        this.state$.next(State.ERROR);\n    }\n\n    setLoading() {\n        this.state$.next(State.LOADING);\n    }\n\n    get state() {\n        return this.state$.asObservable();\n    }\n\n    get error() {\n        return this.error$.asObservable();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "UserProfileService",
            "id": "injectable-UserProfileService-d92434938806b78a5973a4436f0a4301fdaac94e13d8b60b3164f1846cb9741e7397725ac2592e3bbdbc1d50cebfb5134818bf7dd5eca62a6c549d816931b865",
            "file": "src/modules/user-profile/services/user-profile-service/user-profile.service.ts",
            "properties": [
                {
                    "name": "userProfile$",
                    "defaultValue": "new BehaviorSubject<UserProfile | undefined>(\n        undefined,\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "userProfileDirty$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "applyUserProfileChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile | undefined>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile | undefined>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "UserPublicSession | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserProfile",
                    "args": [
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserProfile",
                    "args": [
                        {
                            "name": "userProfile",
                            "type": "Omit<Partial<UserProfile> | userId>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProfile",
                            "type": "Omit<Partial<UserProfile> | userId>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserPublicSession } from 'common/models/authentication';\nimport { UserProfile } from 'common/models/user';\nimport { BehaviorSubject, Observable, of, switchMap, tap } from 'rxjs';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserProfileService {\n    private userProfile$ = new BehaviorSubject<UserProfile | undefined>(\n        undefined,\n    );\n    userProfileDirty$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly validationService: ValidationService,\n        private readonly http: HttpClient,\n    ) {\n        this.sessionService.session.subscribe((session) =>\n            this.handleSession(session),\n        );\n    }\n\n    getUserProfile(): Observable<UserProfile | undefined> {\n        return this.userProfile$.asObservable();\n    }\n\n    setUserProfile(userProfile: UserProfile) {\n        this.userProfile$.next(userProfile);\n        this.userProfileDirty$.next(true);\n    }\n\n    updateUserProfile(userProfile: Omit<Partial<UserProfile>, 'userId'>) {\n        const currentProfile = this.userProfile$.value;\n\n        if (!currentProfile) {\n            throw new Error('User profile not found');\n        }\n\n        this.userProfile$.next({\n            ...currentProfile,\n            ...userProfile,\n            userId: currentProfile.userId,\n        });\n        this.userProfileDirty$.next(true);\n    }\n\n    applyUserProfileChanges(): Observable<UserProfile | undefined> {\n        if (!this.userProfileDirty$.value) {\n            return of(this.userProfile$.value);\n        }\n\n        return this.http\n            .patch('/user/profile', { userProfile: this.userProfile$.value })\n            .pipe(\n                tap(() => {\n                    this.userProfileDirty$.next(false);\n                }),\n                switchMap(() =>\n                    this.fetchUserProfile().pipe(\n                        tap((userProfile) => {\n                            this.userProfile$.next(userProfile);\n                        }),\n                    ),\n                ),\n            );\n    }\n\n    private handleSession(session: UserPublicSession | undefined) {\n        if (session) {\n            this.fetchUserProfile().subscribe((userProfile) => {\n                this.userProfile$.next(userProfile);\n            });\n        } else {\n            this.userProfile$.next(undefined);\n        }\n        this.userProfileDirty$.next(false);\n    }\n\n    private fetchUserProfile() {\n        return this.http.get<UserProfile>('/user/profile');\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-33b1610647b67c29f33d6dc1c74ce22483d506d0791d88001dc03335dcf27aacb9dbaf979bd78170977d4dfc6d90b32d25b355398979b4bf15a025be5238bf52",
            "file": "src/modules/user/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "askDeleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable, tap } from 'rxjs';\nimport { AuthenticationService } from 'src/modules/authentication/services/authentication-service/authentication.service';\nimport { DeleteUserModalComponent } from '../components/delete-user-modal/delete-user-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserService {\n    constructor(\n        private readonly http: HttpClient,\n        private readonly authenticationService: AuthenticationService,\n        private readonly dialog: MatDialog,\n    ) {}\n\n    askDeleteUser() {\n        this.dialog.open(DeleteUserModalComponent);\n    }\n\n    deleteUser(password: string): Observable<void> {\n        return this.http\n            .delete<void>('/user', {\n                body: { password },\n            })\n            .pipe(\n                tap(() => {\n                    this.authenticationService.logout(true);\n                }),\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidationService",
            "id": "injectable-ValidationService-aa4be04217ea1c2e2bc9d23183396def6a3dc34adaff456e98f35ae56777fda84044da7d22d10349b4fa318018994c6e1fd38b05697c6707d7d4ce150f1c13e0",
            "file": "src/modules/validation/services/validation.service.ts",
            "properties": [
                {
                    "name": "userValid$",
                    "defaultValue": "new BehaviorSubject<UserValidationResponse | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<UserValidationResponse | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserValidationResponse>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "requestEmailValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserValidationResponse>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateEmail",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserValidationResponse>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { UserValidationResponse } from 'common/models/user';\nimport {\n    BehaviorSubject,\n    Observable,\n    catchError,\n    map,\n    of,\n    switchMap,\n    tap,\n} from 'rxjs';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { WsService } from 'src/services/ws-service/ws.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ValidationService {\n    private userValid$: BehaviorSubject<UserValidationResponse | undefined> =\n        new BehaviorSubject<UserValidationResponse | undefined>(undefined);\n\n    constructor(\n        private readonly wsService: WsService,\n        private readonly http: HttpClient,\n        private readonly sessionService: SessionService,\n        private readonly snackBar: MatSnackBar,\n    ) {\n        this.wsService\n            .listen('user-validation:update')\n            .subscribe((userValid) => {\n                this.userValid$.next(userValid);\n            });\n\n        this.sessionService.isLoggedIn().subscribe((isLoggedIn) => {\n            if (isLoggedIn) {\n                this.fetchValidation().subscribe();\n            } else {\n                this.userValid$.next(undefined);\n            }\n        });\n    }\n\n    get userValid(): Observable<boolean | undefined> {\n        return this.userValid$.pipe(\n            map((userValid) =>\n                userValid\n                    ? Boolean(\n                          userValid.emailValidated &&\n                              userValid.userProfileReady,\n                      )\n                    : undefined,\n            ),\n        );\n    }\n\n    get userValidActionsCount(): Observable<number | undefined> {\n        return this.userValid$.pipe(\n            map((userValid) =>\n                userValid\n                    ? (userValid.emailValidated ? 0 : 1) +\n                      (userValid.userProfileReady ? 0 : 1)\n                    : undefined,\n            ),\n        );\n    }\n\n    get userValidMessage(): Observable<string | undefined> {\n        return this.userValid$.pipe(\n            map((userValid) => {\n                if (!userValid) return undefined;\n\n                if (!userValid.emailValidated) {\n                    return 'Veuillez vérifier votre email';\n                }\n\n                if (!userValid.userProfileReady) {\n                    return 'Veuillez compléter votre profil';\n                }\n\n                return undefined;\n            }),\n        );\n    }\n\n    get userProfileReady(): Observable<boolean | undefined> {\n        return this.userValid$.pipe(\n            map((userValid) =>\n                userValid ? Boolean(userValid.userProfileReady) : undefined,\n            ),\n        );\n    }\n\n    get emailValidated(): Observable<boolean | undefined> {\n        return this.userValid$.pipe(\n            map((userValid) =>\n                userValid ? Boolean(userValid.emailValidated) : undefined,\n            ),\n        );\n    }\n\n    validateEmail(token: string): Observable<UserValidationResponse> {\n        return this.http.post<void>('/user-validation/email', { token }).pipe(\n            map(() =>\n                this.snackBar.open('Email vérifié !', 'OK', { duration: 5000 }),\n            ),\n            catchError(() => {\n                this.snackBar.open(\n                    'Erreur lors de la vérification du email',\n                    'OK',\n                    { duration: 5000 },\n                );\n                return of(undefined);\n            }),\n            switchMap(() => this.fetchValidation()),\n        );\n    }\n\n    requestEmailValidation(): Observable<UserValidationResponse> {\n        return this.http.post<void>('/user-validation/email/request', {}).pipe(\n            map(() =>\n                this.snackBar.open('Email de vérification envoyé !', 'OK', {\n                    duration: 5000,\n                }),\n            ),\n            catchError(() => {\n                this.snackBar.open(\n                    \"Erreur lors de l'envoi du email de vérification\",\n                    'OK',\n                    { duration: 5000 },\n                );\n                return of(undefined);\n            }),\n            switchMap(() => this.fetchValidation()),\n        );\n    }\n\n    private fetchValidation(): Observable<UserValidationResponse> {\n        return this.http\n            .get<UserValidationResponse>('/user-validation')\n            .pipe(tap((userValid) => this.userValid$.next(userValid)));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "wsService",
                        "type": "WsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValid": {
                    "name": "userValid",
                    "getSignature": {
                        "name": "userValid",
                        "type": "",
                        "returnType": "Observable<boolean | undefined>",
                        "line": 45
                    }
                },
                "userValidActionsCount": {
                    "name": "userValidActionsCount",
                    "getSignature": {
                        "name": "userValidActionsCount",
                        "type": "",
                        "returnType": "Observable<number | undefined>",
                        "line": 58
                    }
                },
                "userValidMessage": {
                    "name": "userValidMessage",
                    "getSignature": {
                        "name": "userValidMessage",
                        "type": "",
                        "returnType": "Observable<string | undefined>",
                        "line": 69
                    }
                },
                "userProfileReady": {
                    "name": "userProfileReady",
                    "getSignature": {
                        "name": "userProfileReady",
                        "type": "",
                        "returnType": "Observable<boolean | undefined>",
                        "line": 87
                    }
                },
                "emailValidated": {
                    "name": "emailValidated",
                    "getSignature": {
                        "name": "emailValidated",
                        "type": "",
                        "returnType": "Observable<boolean | undefined>",
                        "line": 95
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "WsService",
            "id": "injectable-WsService-ba274793c4e2590321429364b90efe84df2f640f08714124438c21c6006cf98a6bc1fc0b831b3107d4ded5cfb3f8cbd8ad81a6523da2e090bcbe2446d91a1cc2",
            "file": "src/services/ws-service/ws.service.ts",
            "properties": [
                {
                    "name": "disconnect$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        146
                    ]
                },
                {
                    "name": "ws$",
                    "defaultValue": "new BehaviorSubject<Socket<WsServer, WsClient> | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Socket | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Socket | undefined>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "event",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [
                        {
                            "name": "event",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { io, Socket } from 'socket.io-client';\nimport { environment } from 'src/environments/environment';\nimport { WsClient, WsServer } from 'common/models/ws';\nimport { BehaviorSubject, map, Observable, Subject, switchMap } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class WsService {\n    private ws$: BehaviorSubject<Socket<WsServer, WsClient> | undefined> =\n        new BehaviorSubject<Socket<WsServer, WsClient> | undefined>(undefined);\n    readonly disconnect$ = new Subject<void>();\n\n    constructor() {}\n\n    connect(token: string): Observable<Socket<WsServer, WsClient> | undefined> {\n        try {\n            const ws: Socket<WsServer, WsClient> = io(environment.api.url, {\n                transports: ['websocket'],\n                upgrade: false,\n                auth: { token },\n            });\n\n            ws.on('connect', () => {\n                this.ws$.next(ws);\n            });\n\n            ws.on('disconnect', () => {\n                this.ws$.next(undefined);\n                this.disconnect$.next();\n            });\n\n            ws.on('connect_error', (error) => {\n                // eslint-disable-next-line no-console\n                console.error('WebSocket error', error);\n            });\n        } catch (e) {\n            this.ws$.error(e);\n        }\n\n        return this.ws$.asObservable();\n    }\n\n    disconnect() {\n        this.ws$.value?.disconnect();\n        this.ws$.next(undefined);\n        this.disconnect$.next();\n    }\n\n    get ws() {\n        return this.ws$.asObservable();\n    }\n\n    get connected() {\n        return this.ws.pipe(map((ws) => !!ws));\n    }\n\n    listen<T extends keyof WsServer>(event: T): Observable<WsServer[T]> {\n        return this.ws$.pipe(\n            switchMap((ws) => {\n                const subject = new Subject<WsServer[T]>();\n\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ws?.on(event as any, (data: WsServer[T]) => {\n                    subject.next(data);\n                });\n\n                return subject.asObservable();\n            }),\n        );\n    }\n\n    next<T extends keyof WsClient>(event: T, data: WsClient[T]) {\n        if (!this.ws$.value) throw new Error('WS not connected');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.ws$.value.emit(event as any, data);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "accessors": {
                "ws": {
                    "name": "ws",
                    "getSignature": {
                        "name": "ws",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "connected": {
                    "name": "connected",
                    "getSignature": {
                        "name": "connected",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "ApiInterceptor",
            "id": "injectable-ApiInterceptor-0b0a349e325b45db19e2f17af405ce554b4d572ce40d5ede19b7dd2e03abb6af46d57bde8fba90fbe35803e178589a145dc7fee3f7388102a0b3ad444be7c438",
            "file": "src/middlewares/api.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class ApiInterceptor implements HttpInterceptor {\n    intercept(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        req: HttpRequest<any>,\n        next: HttpHandler,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): Observable<HttpEvent<any>> {\n        return next.handle(\n            req.url.startsWith('http')\n                ? req\n                : req.clone({ url: `${environment.api.url}${req.url}` }),\n        );\n    }\n}\n",
            "type": "interceptor"
        },
        {
            "name": "AuthenticationInterceptor",
            "id": "injectable-AuthenticationInterceptor-eff8088019835b85c18fe98e6f21bc26aed73bfb3a98e176b1be29f5848add22dca851f1a271da98f770f314fcda7685cb1159cf7b6639d96a843ffa0c0fa12f",
            "file": "src/middlewares/auth.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n    HttpEvent,\n    HttpHandler,\n    HttpHeaders,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\n\n@Injectable()\nexport class AuthenticationInterceptor implements HttpInterceptor {\n    intercept(\n        req: HttpRequest<unknown>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<unknown>> {\n        const token = inject(SessionService).getLocalToken();\n\n        return next.handle(\n            token\n                ? req.clone({\n                      headers: new HttpHeaders({\n                          authorization: `Bearer ${token}`,\n                      }),\n                  })\n                : req,\n        );\n    }\n}\n",
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "MatchListItemClass",
            "id": "class-MatchListItemClass-bc6a32b77de9958c0bcad5f5266a7f30b825573720133b486f8445455525a07353c1e229fd66d0ecd0f60193bd68a4dd5cab1aebc6b0b81b333cc87757144236",
            "file": "src/modules/matching/models/match-list-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { PublicUserResultClass } from './public-user-result';\nimport { MatchListItem, MatchQueryInfo } from 'common/models/matching';\n\nexport class MatchListItemClass extends PublicUserResultClass {\n    queryInfo: MatchQueryInfo;\n\n    constructor(initialValue: MatchListItem, http: HttpClient) {\n        super(initialValue, http);\n        this.queryInfo = initialValue;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialValue",
                        "type": "MatchListItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "initialValue",
                        "type": "MatchListItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "queryInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatchQueryInfo",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "PublicUserResultClass"
                    }
                },
                {
                    "name": "value$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PublicUserResult>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "PublicUserResultClass"
                    }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PublicUserResult>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "PublicUserResultClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PublicUserResultClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PublicUserResultClass",
            "id": "class-PublicUserResultClass-99b3e3bcd7eb0629a66a4a0c68b24ba6664c635158c6e62a9a8c971d5102cca169cbf3743bff3405720050d501350f9bee62788157d750a32bdb4b0baa41f87d",
            "file": "src/modules/matching/models/public-user-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n    NotLoadedPublicUserResult,\n    PublicUserResult,\n} from 'common/models/user';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\nexport interface NotLoadedPublicUserResultClass {\n    get value(): NotLoadedPublicUserResult;\n}\n\nexport interface LoadedPublicUserResultClass {\n    get value(): PublicUserResult;\n}\n\nexport class PublicUserResultClass {\n    private value$: BehaviorSubject<PublicUserResult>;\n    private loaded$: BehaviorSubject<boolean>;\n\n    constructor(\n        initialValue: NotLoadedPublicUserResult,\n        private readonly http: HttpClient,\n    ) {\n        this.value$ = new BehaviorSubject<PublicUserResult>(initialValue);\n        this.loaded$ = new BehaviorSubject<boolean>(false);\n\n        this.fetch().subscribe();\n    }\n\n    get id(): number {\n        return this.value$.value.userId;\n    }\n\n    get currentValue(): PublicUserResult {\n        return this.value$.value;\n    }\n\n    get currentlyLoaded(): boolean {\n        return this.loaded$.value;\n    }\n\n    get value(): Observable<PublicUserResult> {\n        return this.value$.asObservable();\n    }\n\n    get loaded(): Observable<boolean> {\n        return this.loaded$.asObservable();\n    }\n\n    private fetch(): Observable<PublicUserResult> {\n        return this.http\n            .get<PublicUserResult>(`/public-profile/find/${this.id}`)\n            .pipe(\n                tap((user) => {\n                    this.value$.next(user);\n                    this.loaded$.next(true);\n                }),\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialValue",
                        "type": "NotLoadedPublicUserResult",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "initialValue",
                        "type": "NotLoadedPublicUserResult",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "loaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "value$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PublicUserResult>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PublicUserResult>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "number",
                        "returnType": "number",
                        "line": 30
                    }
                },
                "currentValue": {
                    "name": "currentValue",
                    "getSignature": {
                        "name": "currentValue",
                        "type": "",
                        "returnType": "PublicUserResult",
                        "line": 34
                    }
                },
                "currentlyLoaded": {
                    "name": "currentlyLoaded",
                    "getSignature": {
                        "name": "currentlyLoaded",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 38
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Observable<PublicUserResult>",
                        "line": 42
                    }
                },
                "loaded": {
                    "name": "loaded",
                    "getSignature": {
                        "name": "loaded",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 46
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutCardComponent",
            "id": "component-AboutCardComponent-de40f5ffe17ff66eb34ad71ab1b39783676b116fb7e11fcc5180f1391373ac67dec395d06c44d41c1f7552aed09be9b9c0b9f90759fe8d8a3579e184f4dbbd13",
            "file": "src/modules/about/components/about-card/about-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-card",
            "styleUrls": [
                "./about-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-about-card',\n    templateUrl: './about-card.component.html',\n    styleUrls: ['./about-card.component.scss'],\n})\nexport class AboutCardComponent {\n    @Input() title!: string;\n    @Input() subtitle!: string;\n    @Input() image!: string;\n    @Input() link?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.about-card {\n    @include no-select;\n\n    appearance: none;\n    background-color: var(--theme-background);\n    color: var(--theme-background-contrast);\n    border: solid 1px rgb(240, 240, 240);\n    border-radius: 12px;\n    height: 100%;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n\n    &__image {\n        width: 100%;\n        aspect-ratio: 16/9;\n        object-fit: fill;\n        object-position: center;\n        border-top-right-radius: 12px;\n        border-top-left-radius: 12px;\n    }\n\n    &__content {\n        padding: 12px;\n        display: flex;\n        flex-direction: column;\n        gap: 4px;\n        width: 100%;\n        box-sizing: border-box;\n\n        &__title {\n            font-size: 1.4em;\n            font-weight: 600;\n        }\n\n        &__subtitle {\n            opacity: 0.55;\n        }\n    }\n}",
                    "styleUrl": "./about-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"about-card interactable--small\" [routerLink]=\"link\">\n    <img [src]=\"image\" [alt]=\"title\" class=\"about-card__image\">\n    <div class=\"about-card__content\">\n        <span class=\"about-card__content__title\">{{ title }}</span>\n        <span class=\"about-card__content__subtitle\">{{ subtitle }}</span>\n    </div>\n</button>"
        },
        {
            "name": "AboutLayoutComponent",
            "id": "component-AboutLayoutComponent-2ac6820009a5686fddb656343db7b92235124e1427e2ed671d2904f520df84c7deecd68d82e0750fdff5b077b5b9e73399b86156abfdbebbba18eebceb4b61a2",
            "file": "src/modules/about/components/about-layout/about-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-layout",
            "styleUrls": [
                "./about-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-about-layout',\n    templateUrl: './about-layout.component.html',\n    styleUrls: ['./about-layout.component.scss'],\n})\nexport class AboutLayoutComponent {\n    @Input() title!: string;\n    @Input() backLink?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\nmain {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    max-width: 800px;\n    padding: 0 24px 24px 24px;\n    gap: 24px;\n    margin: 0 auto;\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 0 12px 12px 12px;\n    }\n}",
                    "styleUrl": "./about-layout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-layout headerType=\"transparent\">\n    <app-layout-action *ngIf=\"backLink\" layout-action-left icon=\"fas fa-chevron-left\" [link]=\"backLink\"></app-layout-action>\n\n    <span layout-title>{{ title }}</span>\n\n    <main>\n        <ng-content></ng-content>\n    </main>\n</app-layout>"
        },
        {
            "name": "AboutPageComponent",
            "id": "component-AboutPageComponent-94e59d6390efb16a8f978644352d95dac2da713350973b7724db5670e157905c030b371c6965b003be2881d9812dc339ff12c8432761f60d3374a4f7f2c73668",
            "file": "src/modules/about/pages/about-page/about-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-page",
            "styleUrls": [
                "./about-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-about-page',\n    templateUrl: './about-page.component.html',\n    styleUrls: ['./about-page.component.scss'],\n})\nexport class AboutPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\napp-about-layout {\n    .section-title {\n        @include no-select;\n\n        font-size: 1.4em;\n        font-weight: 600;\n        margin: 16px 0 0 0;\n        padding-top: 12px;\n        border-top: solid 1px rgb(240, 240, 240);\n    }\n\n    .section-subtitle {\n        @include no-select;\n\n        font-size: 1.2em;\n        font-weight: 600;\n        margin: 0;\n    }\n\n    section {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: 12px;\n\n        @media screen and (max-width: 1050px) {\n            grid-template-columns: repeat(2, 1fr);\n        }\n\n        @media screen and (max-width: 700px) {\n            grid-template-columns: repeat(1, 1fr);\n        }\n\n        @media screen and (max-width: $mobile-breakpoint) {\n            grid-template-columns: repeat(2, 1fr);\n        }\n\n        @media screen and (max-width: 400px) {\n            grid-template-columns: repeat(1, 1fr);\n        }\n    }\n}\n",
                    "styleUrl": "./about-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"À propos\">\n    <app-card title=\"Sur cette page\" icon=\"fas fa-list\" anchor=\"table-of-content\">\n        <ul class=\"table-of-content\">\n            <li><a href=\"/about#rules\">Règlements de l'application</a></li>\n            <li><a href=\"/about#ressources\">Ressources</a></li>\n            <li><a href=\"/about#how-to\">Comment faire</a></li>\n            <li><a href=\"/about#more-info\">Information supplémentaire</a></li>\n            <li><a href=\"/about#contact\">Nous joindre</a></li>\n        </ul>\n    </app-card>\n\n    <h3 class=\"section-title\" id=\"rules\">Règlements de l'application</h3>\n\n    <section>\n        <app-about-card\n            title=\"Règlements généraux\"\n            subtitle=\"Les règles à suivre pour utiliser l'application\"\n            image=\"assets/about/rules.svg\"\n            link=\"/about/rules/general-rules\"\n        ></app-about-card>\n        <app-about-card\n            title=\"Politiques\"\n            subtitle=\"Politique de confidentialité, termes et conditions, politique d'utilisation acceptable\"\n            image=\"assets/about/privacy-policy.svg\"\n            link=\"/about/rules/policies\"\n        ></app-about-card>\n    </section>\n\n    <h3 class=\"section-title\" id=\"ressources\">Ressources</h3>\n\n    <section>\n        <app-about-card\n            title=\"L'inclusivité\"\n            subtitle=\"Être inclusif avec les femmes, la communauté LGBTQ+ et les personnes de couleur\"\n            image=\"assets/about/inclusivity.svg\"\n            link=\"/about/ressources/inclusivity\"\n        ></app-about-card>\n\n        <app-about-card\n            title=\"Organismes d'aides\"\n            subtitle=\"Des ressources d'aides pour vous\"\n            image=\"assets/about/aid-organizations.svg\"\n            link=\"/about/ressources/aid-organizations\"\n        ></app-about-card>\n\n        <app-about-card\n            title=\"Le consentement\"\n            subtitle=\"Un élément nécessaire de toutes connexions\"\n            image=\"assets/about/consent.svg\"\n            link=\"/about/ressources/consent\"\n        ></app-about-card>\n    </section>\n\n    <h3 class=\"section-title\" id=\"how-to\">Comment faire</h3>\n\n    <section>\n        <app-about-card\n            title=\"Signaler un utilisateur\"\n            subtitle=\"Comment signaler un utilisateur\"\n            image=\"assets/about/report.svg\"\n            link=\"/about/security/how-to-report\"\n        ></app-about-card>\n        <app-about-card\n            title=\"Bloquer un utilisateur\"\n            subtitle=\"Comment bloquer un utilisateur\"\n            image=\"assets/about/block.svg\"\n            link=\"/about/security/how-to-block\"\n        ></app-about-card>\n        <app-about-card\n            title=\"Supprimer un match\"\n            subtitle=\"Comment supprimer un match\"\n            image=\"assets/about/unmatch.svg\"\n            link=\"/about/security/how-to-unmatch\"\n        ></app-about-card>\n    </section>\n\n    <h3 class=\"section-title\" id=\"more-info\">Information supplémentaire</h3>\n\n    <app-card title=\"À propos de l'application\" icon=\"fas fa-mobile\" anchor=\"application\">\n        <p>L'application PolyTinder est l'outil idéal pour élargir votre cercle social. Vous pourrez aisément rencontrer de nouvelles personnes au sein de votre campus, que ce soit pour trouver l'amour ou simplement établir de nouvelles amitiés. Notre plateforme facilite les rencontres au sein de votre communauté académique, vous permettant ainsi de créer des connexions significatives avec des personnes partageant vos intérêts et votre parcours universitaire. Rejoignez-nous dès maintenant pour commencer à tisser des liens qui pourraient changer votre vie!</p>\n        <p>L'application a été créé dans un contexte académique et doit être traîté ainsi. Elle n'a pas été développé à des fins commerciales et aucun revenu n'en sera retiré dans son état actuelle.</p>\n    </app-card>\n\n    <app-card title=\"Nous joindre\" icon=\"fas fa-phone\" anchor=\"contact\">\n        <p>Email: <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n    </app-card>\n</app-about-layout>\n"
        },
        {
            "name": "AcceptableUsePolicyComponent",
            "id": "component-AcceptableUsePolicyComponent-70be0e210ef4671cde116985052c5cc0bad53b1769312abc382c7f00a0fe7e5fcc42d08f2041369e8c66c83a3938aa8fc00f1a762aaea3c1b3a719907a6572f0",
            "file": "src/modules/about/pages/application-rules/acceptable-use-policy/acceptable-use-policy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-acceptable-use-policy",
            "styleUrls": [
                "./acceptable-use-policy.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./acceptable-use-policy.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-acceptable-use-policy',\n    templateUrl: './acceptable-use-policy.component.html',\n    styleUrls: ['./acceptable-use-policy.component.scss'],\n})\nexport class AcceptableUsePolicyComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./acceptable-use-policy.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Acceptable use policy\" backLink=\"/about/rules/policies\">\n    <app-card>\n        <p><b>Last updated October 04, 2023</b></p>\n\n        <p>This Acceptable Use Policy (\"Policy\") is part of our Legal Terms and should therefore be read alongside our main Legal Terms. If you do not agree with these Legal Terms, please refrain from using our Services. Your continued use of our Services implies acceptance of these Legal Terms.</p>\n\n        <p>\n            Please carefully review this Policy which applies to any and all:</p>\n\n        <ol>\n            <li>uses of our Services (as defined in \"Legal Terms\")</li>\n            <li>forms, materials, consent tools, comments, post, and all other content available on the Services (\"Content\")</li>\n        </ol>\n    </app-card>\n\n    <app-card title=\"Use of the services\">\n        <p>When you use the Services you warrant that you will comply with this Policy and with all applicable laws.</p>\n\n        <p>You also acknowledge that you may not:</p>\n        \n        <ul>\n            <li>Systematically retrieve data or other content from the Services to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us.</li>\n            <li>Make any unauthorized use of the Services, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses.</li>\n            <li>Circumvent, disable, or otherwise interfere with security-related features of the Services, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Services and/or the Content contained therein.</li>\n            <li>Engage in unauthorized framing of or linking to the Services.</li>\n            <li>Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords.</li>\n            <li>Make improper use of our Services, including our support services or submit false reports of abuse or misconduct.</li>\n            <li>Engage in any automated use of the Services, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools.</li>\n            <li>Interfere with, disrupt, or create an undue burden on the Services or the networks or the Services connected.</li>\n            <li>Attempt to impersonate another user or person or use the username of another user. Use any information obtained from the Services in order to harass, abuse, or harm another person.</li>\n            <li>Use the Services as part of any effort to compete with us or otherwise use the Services and/or the Content for any revenue-generating endeavor or commercial enterprise. Decipher, decompile, disassemble, or reverse engineer any of the software comprising or in any way making up a part of the Services, except as expressly permitted by applicable law.</li>\n            <li>Attempt to bypass any measures of the Services designed to prevent or restrict access to the Services, or any portion of the Services.</li>\n            <li>Harass, annoy, intimidate, or threaten any of our employees or agents engaged in providing any portion of the Services to you.</li>\n            <li>Delete the copyright or other proprietary rights notice from any Content.</li>\n            <li>Copy or adapt the Services’ software, including but not limited to Flash, PHP, HTML, JavaScript, or other code.</li>\n            <li>Upload or transmit (or attempt to upload or to transmit) viruses, Trojan horses, or other material, including excessive use of capital letters and spamming (continuous posting of repetitive text), that interferes with any party’s uninterrupted use and enjoyment of the Services or modifies, impairs, disrupts, alters, or interferes with the use, features, functions, operation, or maintenance of the Services.</li>\n            <li>Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\"gifs\"), 1×1 pixels, web bugs, cookies, or other similar devices (sometimes referred to as \"spyware\" or \"passive collection mechanisms\" or \"pcms\").</li>\n            <li>Except as may be the result of standard search engine or Internet browser usage, use, launch, develop, or distribute any automated system, including without limitation, any spider, robot, cheat utility, scraper, or offline reader that accesses the Services, or using or launching any unauthorized script or other software.</li>\n            <li>Disparage, tarnish, or otherwise harm, in our opinion, us and/or the Services.</li>\n            <li>Use the Services in a manner inconsistent with any applicable laws or regulations.</li>\n        </ul>\n    </app-card>\n\n    <app-card title=\"Consequences of breaching this policy\">\n        <p>The consequences for violating our Policy will vary depending on the severity of the breach and the user's history on the Services, by way of example:</p>\n\n        <p>We may, in some cases, give you a warning, however, if your breach is serious or if you continue to breach our Legal Terms and this Policy, we have the right to suspend or terminate your access to and use of our Services and, if applicable, disable your account. We may also notify law enforcement or issue legal proceedings against you when we believe that there is a genuine risk to an individual or a threat to public safety.\n        </p>\n\n        <p>We exclude our liability for all action we may take in response to any of your breaches of this Policy.</p>\n    </app-card>\n\n    <app-card title=\"How can you contact us about this policy?\">\n        <p>If you have any further questions or comments, you may contact us by: <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n    </app-card>\n</app-about-layout>\n\n<!-- This privacy policy was created using Termly's <a href=\"https://termly.io/products/privacy-policy-generator/\">Privacy Policy Generator</a>. -->"
        },
        {
            "name": "AidOrganizationsPageComponent",
            "id": "component-AidOrganizationsPageComponent-8424208fe1bee23ae50b1249a92f927417ed7ca302acfc7bbb68b08387bdcbd57af452d7ea9744cbe6c725c9235593d49248a09b69d8ca5015ea8b7958d6df17",
            "file": "src/modules/about/pages/ressources/aid-organizations-page/aid-organizations-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aid-organizations-page",
            "styleUrls": [
                "./aid-organizations-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aid-organizations-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-aid-organizations-page',\n    templateUrl: './aid-organizations-page.component.html',\n    styleUrls: ['./aid-organizations-page.component.scss'],\n})\nexport class AidOrganizationsPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./aid-organizations-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Organismes d'aides\" backLink=\"/about\">\n    <app-card title=\"Bureau d’intervention et de prévention des conflits et de la violence (BIPCV)\">\n        <p><b>Aide à la communauté Polytechnique</b></p>\n        <p>Aide offerte à la communauté Polytechnique en matière de violence et de conflits, notamment en matière de violence à caractère sexuel et en harcèlement psychologique, en toute confidentialité et totale indépendance.</p>\n        <p><a href=\"https://www.polymtl.ca/bipcv/\" target=\"_blank\">Site internet</a></p>\n        <p><a href=\"mailto:bipcv@polymtl.ca\">bipcv@polymtl.ca</a></p>\n        <p><b>Téléphone</b> : 514 340-5151</p>\n    </app-card>\n\n    <app-card title=\"Centre de prévention des agressions de Montréal (CPAM)\">\n        <p><b>Violences faites aux femmes</b></p>\n        <p>Consultation, référence, éducation publique et sessions d'autoprotection en vue de prévenir les agressions envers les femmes, les adolescentes et les enfants.</p>\n        <p><a href=\"http://www.cpamapc.org/fr/\" target=\"_blank\">Site internet</a></p>\n        <p><a href=\"mailto:capespace@cpamapc.org\">capespace@cpamapc.org</a></p>\n        <p><b>Téléphone</b> : 514 284-1212</p>\n        <p><b>Adresse</b> : 4617, Saint-Denis, Montréal (Québec), H2J 2L4</p>\n    </app-card>\n\n    <app-card title=\"Collectif des femmes immigrantes du Québec\">\n        <p><b>Immigration</b></p>\n        <p>Regroupement de femmes immigrantes pour la promotion et la défense de leurs droits. Formation interculturelle et service de counselling en emploi adapté aux femmes immigrantes.</p>\n\n        <p><a href=\"http://www.cfiq.ca/\" target=\"_blank\">Site internet</a></p>\n        <p><a href=\"mailto:info@cfiq.ca\">info@cfiq.ca</a></p>\n        <p><b>Téléphone</b> : 514 279-4246</p>\n        <p><b>Adresse</b> : 7124, rue Boyer, Montréal (Québec), H2S 2J8</p>\n    </app-card>\n\n    <app-card title=\"Centre Communautaire LGBTQ+ de Montréal\">\n        <p><b>LGBTQ2S+</b></p>\n        <p>Le Centre Communautaire LGBTQ+ agit pour améliorer la condition de la communauté LGBTQ+ via la concertation et le développement communautaire par les individus/organismes. Information juridique, référence, services aux personnes LGBTQ+, soutien aux personnes réfugiées et migrantes.</p>\n\n        <p><a href=\"https://ccglm.org/\" target=\"_blank\">Site internet</a></p>\n        <p><a href=\"mailto:info@ccglm.org\">info@ccglm.org</a></p>\n    </app-card>\n\n    <app-card>\n        <p>Rendez vous sur la page <a href=\"https://csf.gouv.qc.ca/organismes-ressources/\">Organismes ressources</a> pour plus d'organismes d'aides au Québec.</p>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f8f0fd63ad07f63bf07338ab326b56e188033b15672683b46ed16ac5ca0b472a35eda9699cfadb3873b78f33711589d8377b6c74d0ffc8453b4a73a3a2fa1c4b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'client'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { StateService } from 'src/services/state-service/state.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    title = 'client';\n\n    constructor(\n        private readonly stateService: StateService,\n        private readonly router: Router,\n    ) {}\n\n    get state() {\n        return this.stateService.state;\n    }\n\n    get error() {\n        return this.stateService.error;\n    }\n\n    get shouldHideNav() {\n        return !!this.router.url.match(/\\/matches\\/[a-zA-Z0-9-]+/);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/variables';\n\n.app-container {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: minmax(0, 1fr);\n    height: 100%;\n\n    .app-content {\n        background: linear-gradient(180deg, var(--theme-background-secondary) 0%, rgba(var(--theme-main-rgb), 0.075) 100%);\n        overflow-y: auto;\n    }\n\n    &--no-nav {\n        grid-template-columns: 1fr;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        grid-template-columns: 1fr;\n        grid-template-rows: 1fr auto;\n        \n        .app-content {\n            order: 0;\n        }\n\n        .app-nav {\n            order: 1;\n        }\n    }\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                },
                "shouldHideNav": {
                    "name": "shouldHideNav",
                    "getSignature": {
                        "name": "shouldHideNav",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"(state | async) === 'loading'\">\n  <app-status-page message=\"Chargement...\"></app-status-page>\n</ng-container>\n\n<ng-container *ngIf=\"(state | async) === 'error'\">\n    <app-status-page [message]=\"(error | async) ?? 'Erreur'\" [isLoading]=\"false\" [isError]=\"true\"></app-status-page>\n  </ng-container>\n\n<ng-container *ngIf=\"(state | async) === 'ready'\">\n    <div class=\"app-container\" [ngClass]=\"{ 'app-container--no-nav': shouldHideNav }\">\n        <div class=\"app-nav\" *ngIf=\"!shouldHideNav\">\n            <app-navigation></app-navigation>\n        </div>\n        <div class=\"app-content\">\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n</ng-container>"
        },
        {
            "name": "AuthenticationLayoutComponent",
            "id": "component-AuthenticationLayoutComponent-459f4a1c5cbe662365af4cde090be66d0b08b08d395c159cc2cb3a018e5dd006b75041c4ad17382009160296f83929fffccf89cbe6e1ab603fb34a370b6bf37e",
            "file": "src/modules/authentication/components/authentication-layout/authentication-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authentication-layout",
            "styleUrls": [
                "./authentication-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authentication-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formsErrors",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'app-authentication-layout',\n    templateUrl: './authentication-layout.component.html',\n    styleUrls: ['./authentication-layout.component.scss'],\n})\nexport class AuthenticationLayoutComponent {\n    @Input() name!: string;\n    @Input() description?: string;\n    @Input() formGroup!: FormGroup;\n    @Input() formsErrors: Record<string, string> = {};\n    @Input() loading: boolean | null = false;\n    @Input() disabled: boolean | null = false;\n\n    @Output() formSubmit = new EventEmitter<void>();\n\n    onSubmit(event: Event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n\n        if (!this.formGroup.valid || this.formGroup.status === 'INVALID') {\n            this.formGroup.setErrors({ invalid: true });\n            return;\n        }\n\n        if (this.formGroup.status !== 'VALID') {\n            return;\n        }\n\n        this.formGroup.setErrors(null);\n\n        this.formSubmit.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils';\n@import '../../../../styles/variables';\n\n.auth-layout {\n    @include no-select;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    justify-content: center;\n    gap: 24px;\n    padding: 24px;\n    min-height: 100%;\n    box-sizing: border-box;\n    max-width: 600px;\n    margin: auto;\n\n    &__brand {\n        display: flex;\n        flex-direction: column;\n        gap: 12px;\n        align-items: center;\n        margin-bottom: 24px;\n\n        &__logo {\n            width: 75px;\n            aspect-ratio: 1;\n        }\n\n        &__name {\n            font-size: 1.3em;\n            font-weight: 500;\n        }\n    }\n\n    &__head {\n        display: flex;\n        flex-direction: column;\n        gap: 6px;\n        margin-bottom: 24px;\n\n        &__name,\n        &__description {\n            text-align: center;\n            margin: 0;\n        }\n    \n        &__description {\n            opacity: 0.55;\n            font-style: italic;\n        }\n    }\n\n    &__form {\n        display: flex;\n        flex-direction: column;\n\n        &__messages {\n            display: flex;\n            flex-direction: column;\n            gap: 6px;\n            text-align: center;\n            margin-bottom: 24px;\n\n            &:empty {\n                display: none;\n            }\n        }\n    }\n}",
                    "styleUrl": "./authentication-layout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-layout headerType=\"hidden\">\n    <main class=\"auth-layout\">\n        <div class=\"auth-layout__brand mobile-only\">\n            <img class=\"auth-layout__brand__logo\" src=\"/assets/logo.svg\" alt=\"Logo\">\n            <span class=\"auth-layout__brand__name\">PolyTinder</span>\n        </div>\n\n        <app-card>\n            <div class=\"auth-layout__head\">\n                <h1 class=\"auth-layout__head__name\">{{name}}</h1>\n                <p class=\"auth-layout__head__description\" *ngIf=\"description\">{{description}}</p>\n            </div>\n\n            <form\n                [formGroup]=\"formGroup\"\n                (submit)=\"onSubmit($event)\"\n                class=\"auth-layout__form\"\n            >\n                <ng-content select=\"[auth-form-field]\"></ng-content>\n\n                <div class=\"auth-layout__form__messages\">\n                    <ng-container *ngFor=\"let error of formsErrors | keyvalue\">\n                        <mat-error *ngIf=\"formGroup.errors?.[error.key]\">{{error.value}}</mat-error>\n                    </ng-container>\n                </div>\n                \n                <app-button\n                    type=\"submit\"\n                    color=\"primary\"\n                    [isLoading]=\"loading\"\n                    [forceFocusable]=\"true\"\n                    interactable=\"small\"\n                    [disabled]=\"disabled ?? false\"\n                >{{name}}</app-button>\n            </form>\n        </app-card>\n        \n        <ng-content select=\"[auth-extra]\"></ng-content>\n    </main>\n</app-layout>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-edb75878518593fb55d5b7734410c31385375946a3e7a5985fd7e03b30f14add0cde3b5597e860bc6374ec256cdb03a80175df926222285efcdbff72842d4923",
            "file": "src/modules/ui/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"default\" | \"primary\" | \"transparent\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "forceFocusable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactable",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"default\" | \"large\" | \"small\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "linkTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
                    "decorators": []
                },
                {
                    "name": "shadow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-button',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n    @Input() link?: string;\n    @Input() linkTarget?: '_blank' | '_self' | '_parent' | '_top';\n    @Input() disabled?: boolean;\n    @Input() type?: 'button' | 'submit' | 'reset' = 'button';\n    @Input() color?: 'default' | 'primary' | 'transparent' | 'danger' =\n        'default';\n    @Input() icon?: string;\n    @Input() iconOnly: boolean = false;\n    @Input() isLoading: boolean | null = false;\n    @Input() shadow: boolean = false;\n    @Input() interactable: 'default' | 'large' | 'small' | 'none' = 'default';\n    @Input() forceFocusable: boolean = false;\n    @Output() btnClick: EventEmitter<Event> = new EventEmitter<Event>();\n\n    constructor(private readonly router: Router) {}\n\n    onClick(event: Event) {\n        if (this.disabled) return;\n\n        if (this.link) {\n            if (this.isLinkExternal) {\n                window.open(this.link, this.linkTarget);\n            } else {\n                this.router.navigate([this.link]);\n            }\n        }\n\n        this.btnClick.emit(event);\n    }\n\n    get classes() {\n        return [\n            'btn',\n            `btn--style--${this.color}`,\n            'interactable' +\n                (this.interactable === 'default'\n                    ? ''\n                    : `--${this.interactable}`),\n            this.shadow ? 'btn--shadow' : '',\n            this.isLoading ? 'btn--loading' : '',\n            this.disabled ? 'btn--disabled' : '',\n            this.iconOnly ? 'btn--icon-only' : '',\n        ].join(' ');\n    }\n\n    get isLinkExternal() {\n        return this.link?.startsWith('http');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.btn {\n    appearance: none;\n    background-color: var(--theme-background);\n    color: var(--theme-background-contrast);\n    font: inherit;\n    border: solid 1px rgb(240, 240, 240);\n    border-radius: 6px;\n    padding: 12px 24px;\n    box-sizing: border-box;\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n    display: block;\n    text-decoration: none;\n\n    &:disabled {\n        opacity: 0.55;\n    }\n\n    &__content {\n        display: flex;\n        height: 100%;\n        gap: 12px;\n        align-items: center;\n        justify-content: center;\n        transition: ease-in 0.1s all;\n    }\n\n    &__loading {\n        position: absolute;\n        top: 50%;\n        left: 100%;\n        translate: -50% -50%;\n        opacity: 0;\n        transition: ease-in 0.1s all;\n    }\n\n    &--loading {\n        .btn__content {\n            opacity: 0;\n            translate: -100%;\n            transition: ease-in 0.1s all;\n        }\n\n        .btn__loading {\n            left: 50%;\n            opacity: 1;\n            transition: ease-in 0.1s all;\n        }\n    }\n\n    &--style {\n        &--transparent {\n            border-color: transparent;\n        }\n\n        &--primary {\n            background: linear-gradient(90deg, var(--theme-main), var(--theme-main-light));\n            color: var(--theme-main-contrast);\n            border: none;\n        }\n\n        &--danger {\n            background-color: tomato;\n            color: white;\n            border: none;\n        }\n    }\n\n    &--icon-only {\n        height: 46px;\n        width: 46px;\n        padding: 0;\n        font-size: 1.05em;\n    }\n\n    &--shadow {\n        box-shadow: $default-shadow;\n    }\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "isLinkExternal": {
                    "name": "isLinkExternal",
                    "getSignature": {
                        "name": "isLinkExternal",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            },
            "templateData": "<button\n    (click)=\"onClick($event)\"\n    [disabled]=\"disabled\"\n    [type]=\"type\"\n    [class]=\"classes\"\n    [routerLink]=\"isLinkExternal ? null : link\"\n    [tabIndex]=\"link || btnClick.observed || forceFocusable ? 0 : -1\"\n>\n    <div class=\"btn__content\">\n        <i [class]=\"icon\" *ngIf=\"icon\"></i>\n        <ng-content></ng-content>\n    </div>\n    <div class=\"btn__loading\">\n        <i class=\"fas fa-spinner-third fa-spin\"></i>\n    </div>\n</button>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-c8d0146d0baec04a7ee2681cd89c0a6e84c7ec60cbc5a8774d0ccaab99ecde7a4536754758506d9e699cbb5c7e3d497081f1c6dbefc79a8695e669f044a7218a",
            "file": "src/modules/ui/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "anchor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"default\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "noPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent {\n    @Input() icon: string | undefined;\n    @Input() title: string | undefined;\n    @Input() anchor: string | undefined;\n    @Input() noPadding: boolean = false;\n    @Input() color: 'default' | 'danger' = 'default';\n\n    constructor(private readonly router: Router) {}\n\n    get hasHeader() {\n        return this.icon || this.title;\n    }\n\n    get currentUrl() {\n        return this.router.url;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.card {\n    background-color: var(--theme-background);\n    color: var(--theme-background-contrast);\n    border: solid 1px rgb(240, 240, 240);\n    border-radius: 12px;\n    padding: 24px;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: 12px;\n\n    &__title {\n        @include no-select;\n\n        font-size: 1.1em;\n        font-weight: 600;\n        opacity: 0.65;\n        margin: 0;\n\n        i {\n            margin-right: 12px;\n        }\n\n        a {\n            color: inherit;\n            text-decoration: none;\n        }\n    }\n\n    &--no-padding {\n        padding: 0;\n        gap: 0;\n        \n        .card__title {\n            padding: 24px 0 0 24px;\n        }\n    }\n\n    &--color {\n        &--danger {\n            background-color: lighten(tomato, 30%);\n            border-color: tomato;\n            font-weight: 500;\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 12px;\n        gap: 12px;\n\n        &--no-padding {\n            padding: 0;\n            gap: 0;\n        \n            .card__title {\n                padding: 12px 0 0 12px;\n            }\n        }\n    }\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "hasHeader": {
                    "name": "hasHeader",
                    "getSignature": {
                        "name": "hasHeader",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "currentUrl": {
                    "name": "currentUrl",
                    "getSignature": {
                        "name": "currentUrl",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "templateData": "<ng-template #titleContent>\n    <i [class]=\"icon\" *ngIf=\"icon\"></i><span *ngIf=\"title\">{{title}}</span>\n</ng-template>\n\n<div [class]=\"'card card--color--' + color\" [id]=\"anchor\" [ngClass]=\"{'card--no-padding': noPadding}\">\n    <div class=\"card__header\" *ngIf=\"hasHeader\">\n        <h2 class=\"card__title\">\n            <a [href]=\"this.currentUrl + '#' + anchor\" *ngIf=\"anchor\">\n                <ng-container *ngTemplateOutlet=\"titleContent\"></ng-container>\n            </a>\n            <ng-container *ngIf=\"!anchor\">\n                <ng-container *ngTemplateOutlet=\"titleContent\"></ng-container>\n            </ng-container>\n        </h2>\n    </div>\n    <div class=\"card__body\">\n        <ng-content></ng-content>\n    </div>\n</div>"
        },
        {
            "name": "ConsentPageComponent",
            "id": "component-ConsentPageComponent-6a7c91ada5a5f2dd13d83d837c50c851116d13c0919b5edeb5e3f95f3510eccfb0699d4f66add711bcc1c14b257f5b6b40fad70394026105fb94aae98c5a209f",
            "file": "src/modules/about/pages/ressources/consent-page/consent-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-consent-page",
            "styleUrls": [
                "./consent-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./consent-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-consent-page',\n    templateUrl: './consent-page.component.html',\n    styleUrls: ['./consent-page.component.scss'],\n})\nexport class ConsentPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./consent-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Le consentement\" backLink=\"/about\">\n    <app-card title=\"Violence à caractère sexuelle\">\n        <p>Le harcèlement sexuel est un abus de pouvoir d'un individu (personne qui harcèle) sur un autre (victime).</p>\n\n        <h3>Le harcèlement sexuel est :</h3>\n\n        <ul>\n            <li>\n                un comportement (paroles, actes ou gestes) à connotation sexuelle\n                <ul>\n                    <li>non désiré : provoquant l'inconfort ou la crainte</li>\n                    <li>répété : en général. Un seul acte grave peut aussi être du harcèlement sexuel</li>\n                </ul>\n            </li>\n            <li>qui porte atteinte à la dignité, à l;intégrité physique ou psychologique de la victime</li>\n        </ul>\n\n        <h3>Le harcèlement sexuel peut être :</h3>\n\n        <ul>\n            <li>Non verbal : Regards, sifflements, affichage de matériel pornographique, courriels, textos</li>\n            <li>Verbal : Blagues sexistes, remarques sur le physique, questions sur la vie privée, menaces, propositions, sollicitation de faveurs sexuelles</li>\n            <li>Physique : Frôlements, attouchements, gestes à caractère sexuel</li>\n        </ul>\n\n        <h3>Quelle est la différence entre le harcèlement sexuel et … ?</h3>\n\n        <app-card>\n            <p><b>Le harcèlement sexiste</b></p>\n\n            <p>Comme le harcèlement sexuel, le harcèlement sexiste se fonde sur des préjugés et des stéréotypes sexistes. Cependant, il n'y a pas de connotation sexuelle dans les paroles ou les gestes posés par la personne qui harcèle.</p>\n\n            <p><b>Définition</b> : Le harcèlement sexiste est une conduite se manifestant par des paroles, des gestes ou des comportements répétés à caractère vexatoire ou méprisant à l'égard d'une personne en raison de son sexe, qui mettent en cause des caractéristiques qu'on prétend être proprement féminines (ou masculines), par exemple : l'infériorité intellectuelle des femmes, la forte émotivité des femmes, la froideur des hommes, etc.</p>\n\n            <p><b>Exemples</b> : langage cru, blagues grivoises, injures, graffitis, etc.</p>\n        </app-card>\n\n        <br>\n\n        <app-card>\n            <p><b>L'agression sexuelle</b></p>\n\n            <p>Contrairement à l'agression sexuelle, le harcèlement sexuel n'est pas une infraction criminelle.</p>\n\n            <p><b>Définition</b> : Une agression sexuelle est un geste à caractère sexuel, avec ou sans contact physique, commis par un individu sans le consentement de la personne visée ou, dans certains cas, notamment dans celui des enfants, par une manipulation affective ou par du chantage.</p>\n\n            <p><b>Exemples</b> : Attouchements, inceste, exploitation sexuelle, pornographie juvénile, exhibitionnisme, voyeurisme.</p>\n        </app-card>\n\n        <br>\n\n        <app-card>\n            <p><b>Le harcèlement psychologique</b></p>\n\n            <p>Le harcèlement psychologique prend différentes formes, dont celle du harcèlement sexuel.</p>\n\n            <p><b>Définition</b> : On entend par harcèlement psychologique une conduite vexatoire se manifestant soit par des comportements, des paroles, des actes, ou des gestes répétés qui sont hostiles ou non désirés, laquelle porte atteinte à la dignité ou à l'intégrité psychologique ou physique du salarié et qui entraîne, pour celui-ci, un milieu de travail néfaste.</p>\n\n            <p><b>Exemples</b> : Remarques offensantes, intimidation, rumeurs, humiliation, dénigrement.</p>\n        </app-card>\n\n        <br>\n\n        <p>Source : <a href=\"https://www.cdpdj.qc.ca/fr/vos-droits/qu-est-ce-que/le-harcelement-sexuel\">CDPDJ - Le harcèlement sexuel</a></p>\n    </app-card>\n\n    <app-card title=\"Demander le consentement\">\n        <p>Pour obtenir le consentement d'une personne, il faut lui laisser l'entière liberté de répondre, puis d'accepter cette réponse, qu'elle soit satisfaisante ou non. Dans tous les cas, l'absence de consentement clair signifie un refus. Le consentement doit être clair, libre et enthousiaste. Par exemple, une personne inconsciente, intoxiquée ou endormie ne peut pas donner son consentement.</p>\n\n        <p>Cinq éléments sont importants à retenir lorsqu'il est question de consentement :</p>\n\n        <ol>\n            <li>Le consentement n'est pas valable si la personne qui le demande est en position d'autorité par rapport à l'autre; </li>\n            <li>Le consentement est valable seulement s'il est donné sans contrainte, c'est-à-dire que la personne qui consent n'est pas forcée d'aucune façon (par du chantage, des menaces, en lui faisant consommer de l'alcool ou de la drogue, etc.) à le faire; </li>\n            <li>Le consentement peut être partiel, c'est-à-dire que la personne qui consent peut accepter seulement une partie de ce qu'on lui propose; </li>\n            <li>Le consentement doit être renouvelé, c'est-à-dire que la personne qui a obtenu le consentement de l'autre pour faire une activité hier ou à un autre moment doit s'assurer que l'autre souhaite refaire la même activité aujourd'hui; </li>\n            <li>Le consentement peut être retiré à tout moment; la personne qui consent peut donc changer d'idée en tout temps et retirer son consentement.</li>\n        </ol>\n\n        <br>\n\n        <p>Source : <a href=\"https://www.quebec.ca/famille-et-soutien-aux-personnes/violences/evaluer-relation\">Québec - Évaluer la relation</a></p>\n    </app-card>\n\n    <app-card title=\"Donner son consentement\">\n        <p>Donner son consentement revient à donner sa permission pour faire quelque chose. On peut consentir à vendre une propriété, à se marier, à avoir un rapport sexuel avec quelqu'un, etc. Il est toutefois fondamental que ce soit la personne elle-même qui donne son consentement, sans quoi l'accord ne sera pas valable. </p>\n\n        <br>\n\n        <p>Source : <a href=\"https://www.quebec.ca/famille-et-soutien-aux-personnes/violences/evaluer-relation\">Québec - Évaluer la relation</a></p>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "ConversationListComponent",
            "id": "component-ConversationListComponent-d5c7c6215cbf7d57d8ada24e99b0b68d93cbe79b0530ff029dd6a280ed5212711ad34e2c6e0f70b5cd021bf8456ae622f9fecd98edc0efe7c9ed1ffd8198cb18",
            "file": "src/modules/matching/components/conversation-list/conversation-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-conversation-list",
            "styleUrls": [
                "./conversation-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./conversation-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "conversations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "MatchListItemClass[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "blockUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onActionsClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reportUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unmatchUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "MatchListItemClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatchListItemClass } from '../../models/match-list-item';\nimport { MatchingService } from '../../services/matching-service/matching.service';\nimport { ModalService } from 'src/modules/modals/services/modal.service';\nimport { ModerationService } from 'src/modules/moderation/services/moderation.service';\n\n@Component({\n    selector: 'app-conversation-list',\n    templateUrl: './conversation-list.component.html',\n    styleUrls: ['./conversation-list.component.scss'],\n})\nexport class ConversationListComponent {\n    @Input() conversations: MatchListItemClass[] | null = [];\n\n    constructor(\n        private readonly matchingService: MatchingService,\n        private readonly modalService: ModalService,\n        private readonly moderationService: ModerationService,\n    ) {}\n\n    onActionsClick(event: MouseEvent) {\n        event.stopPropagation();\n    }\n\n    formatDate(date: Date): string {\n        const now = new Date();\n        date = new Date(date);\n        const dateStr = `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`;\n        const timeStr = `${date.getHours()}:${\n            (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()\n        }`;\n\n        return dateStr ===\n            `${now.getDate()}/${now.getMonth()}/${now.getFullYear()}`\n            ? timeStr\n            : dateStr;\n    }\n\n    unmatchUser(user: MatchListItemClass) {\n        this.matchingService.askUnmatchUser(user);\n    }\n\n    reportUser(user: MatchListItemClass) {\n        this.moderationService.openReportUserModal(\n            user.id,\n            user.currentValue.name ?? '',\n        );\n    }\n\n    blockUser(user: MatchListItemClass) {\n        this.moderationService.openBlockUserModal(\n            user.id,\n            user.currentValue.name ?? '',\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.conversation-list {\n    @include no-select;\n\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    &__item {\n        width: 100%;\n        display: grid;\n        grid-template-columns: auto minmax(0, 1fr) auto;\n        align-items: center;\n        gap: 24px;\n\n        &__image {\n            height: 72px;\n            aspect-ratio: 1;\n            border-radius: 6px;\n            object-fit: cover;\n            object-position: center;\n            background-color: rgb(240, 240, 240);\n        }\n\n        &__info {\n            display: flex;\n            flex-direction: column;\n            gap: 6px;\n            overflow: hidden;\n\n            &__name {\n                display: flex;\n                font-size: 1.45em;\n                font-weight: 500;\n                align-items: center;\n                gap: 12px;\n            }\n\n            &__non-read-count {\n                background: linear-gradient(90deg, var(--theme-main), rgba(var(--theme-main-rgb), 0.6));\n                color: var(--theme-main-contrast);\n                font-size: 0.6em;\n                padding: 2px 12px;\n                border-radius: 20px;\n            }\n\n            &__subtitle {\n                display: grid;\n                grid-template-columns: minmax(0, auto) auto auto;\n                justify-content: flex-start;\n                opacity: 0.55;\n                gap: 6px;\n\n                &__message {\n                    white-space: nowrap;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                }\n            }\n        }\n\n        &__right {\n            display: flex;\n            align-items: center;\n            gap: 24px;\n\n            &__date {\n                opacity: 0.55;\n            }\n\n            &__actions {\n                appearance: none;\n                height: 22px;\n                width: 22px;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                padding: 6px;\n                font-size: 1.2em;\n                border-radius: 100px;\n                text-decoration: none;\n                color: rgba(var(--theme-background-contrast-rgb), 0.75);\n                background-color: var(--theme-background);\n                border: none;\n                transition: ease-in 0.05s background-color;\n\n                @media (hover: hover) {\n                    &:hover {\n                        background-color: rgba(var(--theme-background-contrast-rgb), 0.05);\n                    transition: ease-in 0.05s background-color;\n                    }\n                }\n            }\n        }\n\n        &--not-read {\n            .conversation-list__item__info__name {\n                font-weight: 600;\n            }\n        }\n    }\n\n    // @media screen and (max-width: $medium-breakpoint) {\n    //     &__item {\n    //         grid-template-columns: auto minmax(0, 1fr);\n\n    //         &__right {\n    //             display: none;\n    //         }\n    //     }\n    // }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        gap: 12px;\n\n        &__item {\n            gap: 12px;\n\n            &__image {\n                height: 56px;\n            }\n\n            &__info {\n                gap: 2px;\n\n                &__name {\n                    font-size: 1.2em;\n                }\n\n                &__non-read-count {\n                    padding: 0px 6px;\n                }\n\n                &__message {\n                    font-size: 0.9em;\n                }\n            }\n        }\n    }\n}",
                    "styleUrl": "./conversation-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-card title=\"Mes conversations\" icon=\"fas fa-comment\" anchor=\"conversations\">\n    <div class=\"conversation-list\">\n        <ng-container *ngFor=\"let conversation of conversations\">\n            <ng-container *ngIf=\"conversation.value | async; let value\">\n                <a [routerLink]=\"'/matches/' + value.userId\">\n                    <div class=\"conversation-list__item\" [ngClass]=\"{'conversation-list__item--not-read': conversation.queryInfo.unreadMessagesCount}\">\n                        <app-image\n                            *ngIf=\"value.pictures?.[0]\"\n                            class=\"conversation-list__item__image interactable\"\n                            [publicID]=\"value.pictures?.[0]\"\n                            [size]=\"{square: 144}\"\n                            [alt]=\"'Photo de profil de ' + value.name\"\n                            [inferSize]=\"true\"\n                        ></app-image>\n                        <div *ngIf=\"!value.pictures?.[0]\" class=\"conversation-list__item__image conversation-list__item__image--not-loaded interactable\"></div>\n\n                        <div class=\"conversation-list__item__info\">\n                            <span class=\"conversation-list__item__info__name\">{{value.name}} <span *ngIf=\"conversation.queryInfo.unreadMessagesCount\" class=\"conversation-list__item__info__non-read-count\">{{conversation.queryInfo.unreadMessagesCount}}</span></span>\n                            <span class=\"conversation-list__item__info__subtitle\">\n                                <span class=\"conversation-list__item__info__subtitle__message\">\n                                    <b *ngIf=\"conversation.queryInfo.lastMessageAuthorId != value.userId\">Vous :</b>\n                                    {{conversation.queryInfo.lastMessage}}\n                                </span>\n                                <span class=\"conversation-list__item__info__subtitle__separator\">•</span>\n                                <span class=\"conversation-list__item__info__subtitle__date\">\n                                    {{formatDate(conversation.queryInfo.lastMessageTimestamp)}}\n                                </span>\n                            </span>\n                        </div>\n\n                        <div class=\"conversation-list__item__right\">\n                            <a routerLink=\"/matches\" class=\"conversation-list__item__right__actions interactable\" (click)=\"onActionsClick($event)\" [matMenuTriggerFor]=\"actionsMenu\">\n                                <i class=\"fas fa-ellipsis-h\"></i>\n                            </a>\n                            <mat-menu #actionsMenu=\"matMenu\">\n                                <button mat-menu-item (click)=\"unmatchUser(conversation)\"><i class=\"fas fa-trash\"></i> Supprimer</button>\n                                <button mat-menu-item (click)=\"reportUser(conversation)\"><i class=\"fas fa-flag\"></i> Signaler</button>\n                                <button mat-menu-item (click)=\"blockUser(conversation)\"><i class=\"fas fa-times\"></i> Bloquer</button>\n                            </mat-menu>\n                        </div>\n                    </div>\n                </a>\n            </ng-container>\n        </ng-container>\n    </div>\n</app-card>"
        },
        {
            "name": "DefaultModalComponent",
            "id": "component-DefaultModalComponent-dc68f6c25dffc4f2ec8347a38ef3555d8eee580a11a11a33df1123d321a649484f0650c2c066b51439109f98ac0ea0d2a291a71556f21a7ece67aab0981f58c9",
            "file": "src/modules/modals/components/default-modal/default-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-default-modal",
            "styleUrls": [
                "./default-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultModalButtonParameters[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "handleButton",
                    "args": [
                        {
                            "name": "button",
                            "type": "DefaultModalButtonParameters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "DefaultModalButtonParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport {\n    DefaultModalButtonParameters,\n    DefaultModalParameters,\n} from '../../types/default-modal';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-default-modal',\n    templateUrl: './default-modal.component.html',\n    styleUrls: ['./default-modal.component.scss'],\n})\nexport class DefaultModalComponent {\n    title: string;\n    content: string | undefined;\n    buttons: DefaultModalButtonParameters[];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) data: DefaultModalParameters,\n        private readonly router: Router,\n    ) {\n        this.title = data.title;\n        this.content = data.content;\n        this.buttons =\n            data.buttons?.map((button) => ({\n                ...button,\n                closeDialog: button.redirect\n                    ? true\n                    : button.closeDialog ?? false,\n            })) ?? [];\n    }\n\n    handleButton(button: DefaultModalButtonParameters): void {\n        if (button.action) button.action();\n        if (button.redirect) this.router.navigate([button.redirect]);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\nmat-dialog-actions {\n    display: flex;\n    gap: 12px;\n    justify-content: flex-end;\n    padding: 0 24px 20px 24px;\n\n    .modal-button {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        appearance: none;\n        background: none;\n        border: solid 1px rgb(240, 240, 240);\n        font: inherit;\n        padding: 8px 18px;\n        border-radius: 6px;\n        font-size: 1.2em;\n        font-weight: 500;\n        box-sizing: border-box;\n\n        i {\n            font-size: 0.9em;\n        }\n\n        &--color {\n            background: linear-gradient(90deg, var(--theme-main), rgba(var(--theme-main-rgb), 0.6));\n            color: var(--theme-main-contrast);\n            border: none;\n        }\n    }\n}",
                    "styleUrl": "./default-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DefaultModalParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DefaultModalParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{ title }}</h2>\n<mat-dialog-content *ngIf=\"content\">{{ content }}</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"buttons.length\">\n    <button \n        *ngFor=\"let button of buttons\"\n        class=\"modal-button interactable--large\"\n        [ngClass]=\"{ 'modal-button--color': button.color}\"\n        [mat-dialog-close]=\"button.closeDialog\"\n        (click)=\"handleButton(button)\"\n    >\n        <i [class]=\"button.icon\" *ngIf=\"button.icon\"></i>\n        {{ button.content }}\n    </button>\n</mat-dialog-actions>"
        },
        {
            "name": "DeleteUserModalComponent",
            "id": "component-DeleteUserModalComponent-6fbae323be2b56ad74ec124f80476e9e8426fa3cb1ce07ba33c2dde22faaba1c378662f3e5fde36055f4ade1d36bd17b7711a5c248a3578487a143c7a11c95a2",
            "file": "src/modules/user/components/delete-user-modal/delete-user-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-user-modal",
            "styleUrls": [
                "./delete-user-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-user-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deleteUserForm",
                    "defaultValue": "new FormGroup({\n        password: new FormControl('', []),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(\n        false,\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { UserService } from '../../services/user.service';\n\n@Component({\n    selector: 'app-delete-user-modal',\n    templateUrl: './delete-user-modal.component.html',\n    styleUrls: ['./delete-user-modal.component.scss'],\n})\nexport class DeleteUserModalComponent {\n    private loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n        false,\n    );\n    deleteUserForm = new FormGroup({\n        password: new FormControl('', []),\n    });\n\n    constructor(\n        private readonly ref: MatDialogRef<DeleteUserModalComponent>,\n        private readonly userService: UserService,\n    ) {}\n\n    get loading() {\n        return this.loading$.asObservable();\n    }\n\n    onSubmit() {\n        if (this.deleteUserForm.invalid) {\n            throw new Error('Invalid form');\n        }\n\n        this.loading$.next(true);\n        this.userService\n            .deleteUser(this.deleteUserForm.value.password ?? '')\n            .pipe(\n                tap({\n                    next: () => this.ref.close(),\n                    error: () => {\n                        this.loading$.next(false);\n                    },\n                }),\n            )\n            .subscribe();\n    }\n\n    onCancel(event: Event) {\n        event.preventDefault();\n        this.ref.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils';\n\n.container {\n    @include no-select;\n    max-width: 500px\n}\n\n.subtitle {\n    margin-bottom: 24px;\n}\n\nform {\n    width: 100%;\n\n    mat-form-field {\n        width: 100%;\n    }\n\n    input {\n        width: 100%;\n    }\n\n    .form-actions {\n        display: flex;\n        gap: 12px;\n        justify-content: flex-end;\n    }\n}\n",
                    "styleUrl": "./delete-user-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<DeleteUserModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<DeleteUserModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "loading": {
                    "name": "loading",
                    "getSignature": {
                        "name": "loading",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<div class=\"container\">\n    <h2 mat-dialog-title>Supprimer mon compte</h2>\n\n    <mat-dialog-content>\n        <p class=\"subtitle\">Supprimer votre compte supprimera votre compte, vos matchs et vos messages. Cet opération est irréversible.</p>\n        \n        <p class=\"subtitle\">Veuillez confirmer votre mot de passe pour continuer.</p>\n        \n        <form [formGroup]=\"deleteUserForm\" (submit)=\"onSubmit()\">\n            <mat-form-field>\n                <mat-label><i class=\"fas fa-key\"></i> Mot de passe</mat-label>\n                <input type=\"password\" formControlName=\"password\" matInput>\n            </mat-form-field>\n        \n            <div class=\"form-actions\">\n                <app-button (btnClick)=\"onCancel($event)\">Annuler</app-button>\n                <app-button\n                    icon=\"fas fa-trash\"\n                    type=\"submit\"\n                    color=\"danger\"\n                    [isLoading]=\"loading | async\"\n                >Supprimer mon compte</app-button>\n            </div>\n        </form>\n    </mat-dialog-content>\n</div>"
        },
        {
            "name": "GeneralRulesPageComponent",
            "id": "component-GeneralRulesPageComponent-a9ac128eaca5f87ed00ae4066a326a6399ced1f6ef11813a17bb7a496d5756701f41cda68c3d61f16010171dc6bb6f33b3cda5ae74c979f3a0cd8924687d0def",
            "file": "src/modules/about/pages/application-rules/general-rules-page/general-rules-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-general-rules-page",
            "styleUrls": [
                "./general-rules-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./general-rules-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-general-rules-page',\n    templateUrl: './general-rules-page.component.html',\n    styleUrls: ['./general-rules-page.component.scss'],\n})\nexport class GeneralRulesPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./general-rules-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Règlements géneraux\" backLink=\"/about\">\n    <app-card title=\"Règlements\" icon=\"fas fa-gavel\" anchor=\"rules\">\n        <ol>\n            <li>Respectez la vie privée: Ne partagez pas d'informations personnelles sensibles, telles que votre adresse, votre numéro de téléphone ou vos données bancaires. Protégez votre vie privée et celle des autres.</li>\n            <li>Soyez respectueux: Traitez tous les utilisateurs avec gentillesse et respect, quel que soit leur genre, leur orientation sexuelle, leur origine ethnique, ou leur apparence. Les commentaires offensants ou discriminatoires ne sont pas tolérés.</li>\n            <li>Pas de harcèlement: N'envoyez pas de messages non sollicités ou insistants. Si quelqu'un vous demande de cesser de communiquer avec lui, respectez sa demande.</li>\n            <li>Utilisez des photos appropriées: Choisissez des photos de profil appropriées et respectez nos directives en matière d'image. Les contenus offensants, vulgaires ou explicites ne sont pas autorisés.</li>\n            <li>Soyez honnête: Utilisez des informations précises dans votre profil. La confiance est essentielle dans les relations en ligne.</li>\n            <li>Signalez les comportements inappropriés: Si vous êtes témoin de comportements contraires à nos règles, signalez-les immédiatement à notre équipe de modération. Nous prenons la sécurité de notre communauté très au sérieux.</li>\n            <li>Respectez les lois locales: Assurez-vous de respecter les lois locales en matière de rencontres en ligne et de comportement sur Internet.</li>\n            <li>En respectant ces règles, vous contribuerez à créer une expérience positive et respectueuse pour tous les utilisateurs de notre application.</li>\n        </ol>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "HowToBlockPageComponent",
            "id": "component-HowToBlockPageComponent-698a530f2e0ca46bc6886fb48751327a250744055d9ca730acfcc238aa8ed55a0b3a267750e7f3cdd3ad2377fca4419121865c0af9b8b163f305b0613dcfd4d1",
            "file": "src/modules/about/pages/security/how-to-block-page/how-to-block-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-how-to-block-page",
            "styleUrls": [
                "./how-to-block-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./how-to-block-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-how-to-block-page',\n    templateUrl: './how-to-block-page.component.html',\n    styleUrls: ['./how-to-block-page.component.scss'],\n})\nexport class HowToBlockPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./how-to-block-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Comment bloquer un utilisateur\" backLink=\"/about\">\n    <app-card title=\"Pourquoi bloquer ?\">\n        <p>Bloquer un utilisateur en ligne est essentiel pour votre sécurité et votre confort, vous permettant d'éviter le harcèlement ou les interactions indésirables. Cependant, si un utilisateur enfreint les règles ou a un comportement nuisible, n'oubliez pas de signaler la situation. Le signalement permet de protéger l'ensemble de la communauté. Utilisez le blocage pour vous protéger, mais le signalement pour protéger tous les utilisateurs.</p>\n    </app-card>\n\n    <app-card title='Sur la page \"Découvrir\"'>\n        <ol>\n            <li>Faites défiler la carte de l'utilisateur jusqu'à la fin.</li>\n            <li>Cliquez sur le bouton \"Bloquer\".</li>\n            <li>Confirmer en cliquant sur le bouton \"Signaler\" de la modale.</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page \"Mes matchs\"'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) de l'utilisateur à bloquer.</li>\n            <li>Cliquez sur le bouton \"Bloquer\".</li>\n            <li>Confirmer en cliquant sur le bouton \"Signaler\" de la modale.</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page de conversation avec un utilisateur'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) dans le coins supérieur droit.</li>\n            <li>Cliquez sur le bouton \"Bloquer\".</li>\n            <li>Confirmer en cliquant sur le bouton \"Signaler\" de la modale.</li>\n        </ol>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "HowToReportPageComponent",
            "id": "component-HowToReportPageComponent-07b966fb56d10fd17ed07a5ea654780fa1cf52aed7a0a445f420cec3a7a73508687e178b73d277930e51f4b418b4770d7c7cf8c6ff3b18c4aa19178779526769",
            "file": "src/modules/about/pages/security/how-to-report-page/how-to-report-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-how-to-report-page",
            "styleUrls": [
                "./how-to-report-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./how-to-report-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-how-to-report-page',\n    templateUrl: './how-to-report-page.component.html',\n    styleUrls: ['./how-to-report-page.component.scss'],\n})\nexport class HowToReportPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./how-to-report-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Comment signaler un utilisateur\" backLink=\"/about\">\n    <app-card title=\"Pourquoi signaler ?\">\n        <p>Il est crucial de signaler les comportements inappropriés ou préoccupants pour plusieurs raisons essentielles :</p>\n\n        <ol>\n            <li>Sécurité des utilisateurs : Il garantit un environnement sûr en signalant le harcèlement et les comportements nuisibles.</li>\n            <li>Prévention du harcèlement : Il contribue à empêcher le harcèlement en ligne en prenant des mesures contre les utilisateurs perturbateurs.</li>\n            <li>Amélioration de l'expérience : Il renforce la réputation de l'application en tant que plateforme respectueuse, améliorant l'expérience de tous.</li>\n            <li>Responsabilisation : Il dissuade les utilisateurs de s'engager dans des comportements nuisibles.</li>\n            <li>Protection des mineurs : Il protège les mineurs en signalant les comptes non autorisés.</li>\n            <li>Amélioration continue : Il aide les développeurs à identifier les problèmes et à renforcer la sécurité de l'application.</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page \"Découvrir\"'>\n        <ol>\n            <li>Faites défiler la carte de l'utilisateur jusqu'à la fin.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n            <li>Choisissez la raison du signalement. Si la raison n'est pas présente dans la liste, sélectionnez \"Autre\".</li>\n            <li>Entrez une description du signalement. N'hésitez pas à fournir tous les détails qui pourront nous être utiles.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page \"Mes matchs\"'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) de l'utilisateur à signaler.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n            <li>Choisissez la raison du signalement. Si la raison n'est pas présente dans la liste, sélectionnez \"Autre\".</li>\n            <li>Entrez une description du signalement. N'hésitez pas à fournir tous les détails qui pourront nous être utiles.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page de conversation avec un utilisateur'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) dans le coins supérieur droit.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n            <li>Choisissez la raison du signalement. Si la raison n'est pas présente dans la liste, sélectionnez \"Autre\".</li>\n            <li>Entrez une description du signalement. N'hésitez pas à fournir tous les détails qui pourront nous être utiles.</li>\n            <li>Cliquez sur le bouton \"Signaler\".</li>\n        </ol>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "HowToUnmatchComponent",
            "id": "component-HowToUnmatchComponent-217e53f51516e05e4238ae5d24375353edfe361ec35c043e505325a1a19d9ad1270fa685dd8caf4f6bdfcf4b031e02b16d6470a12a834d5960790dd3b62f2cfd",
            "file": "src/modules/about/pages/security/how-to-unmatch/how-to-unmatch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-how-to-unmatch",
            "styleUrls": [
                "./how-to-unmatch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./how-to-unmatch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-how-to-unmatch',\n    templateUrl: './how-to-unmatch.component.html',\n    styleUrls: ['./how-to-unmatch.component.scss'],\n})\nexport class HowToUnmatchComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./how-to-unmatch.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Comment supprimer un match\" backLink=\"/about\">\n    <app-card title='Sur la page \"Mes matchs\"'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) de l'utilisateur à supprimer.</li>\n            <li>Cliquez sur le bouton \"Supprimer\".</li>\n            <li>Confirmer en cliquant sur le bouton \"Supprimer\" de la modale.</li>\n        </ol>\n    </app-card>\n\n    <app-card title='Sur la page de conversation avec un utilisateur'>\n        <ol>\n            <li>Cliquez sur le menu option (le bouton <i class=\"fas fa-ellipsis-h\"></i>) dans le coins supérieur droit.</li>\n            <li>Cliquez sur le bouton \"Supprimer\".</li>\n            <li>Confirmer en cliquant sur le bouton \"Supprimer\" de la modale.</li>\n        </ol>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-9bcc9c150ed1500790771bc4e02987cfe11b16c3fbd497765357cf94846caa129daf0767a782f15709232c96627af77e19fdc332e3782f33336dcf830cd0139c",
            "file": "src/modules/ui/components/image/image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inferSize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "publicID",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string | undefined | null",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ImageSize | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getImage",
                    "args": [],
                    "optional": false,
                    "returnType": "CloudinaryImage | null",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSrc",
                    "args": [
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSrcset",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "CloudinaryImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "CloudinaryImage",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "CloudinaryImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Cloudinary, CloudinaryImage } from '@cloudinary/url-gen';\nimport { thumbnail } from '@cloudinary/url-gen/actions/resize';\n\ninterface ImageSizeFixed {\n    height: number;\n    width: number;\n}\n\ninterface ImageSizeWidth {\n    width: number;\n    ratio: number;\n}\n\ninterface ImageSizeHeight {\n    height: number;\n    ratio: number;\n}\n\ninterface ImageSizeSquare {\n    square: number;\n}\n\ntype ImageSize =\n    | ImageSizeFixed\n    | ImageSizeWidth\n    | ImageSizeHeight\n    | ImageSizeSquare;\n\n@Component({\n    selector: 'app-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n})\nexport class ImageComponent {\n    @Input() publicID: string | undefined | null = null;\n    @Input() alt!: string;\n    @Input() size: ImageSize | null = null;\n    @Input() inferSize: boolean = false;\n\n    getSrc(scale: number = 1): string | null {\n        let image = this.getImage();\n\n        if (!image) return null;\n\n        image = this.resizeImage(image, scale);\n\n        return image.toURL();\n    }\n\n    getSrcset(): string | null {\n        return `${this.getSrc(0.5)} 0.5x, ${this.getSrc(1)} 1x, ${this.getSrc(\n            2,\n        )} 2x`;\n    }\n\n    private resizeImage(\n        image: CloudinaryImage,\n        scale: number = 1,\n    ): CloudinaryImage {\n        let resize = thumbnail();\n\n        if (this.height) resize = resize.height(this.height * scale);\n        if (this.width) resize = resize.width(this.width * scale);\n\n        return image.resize(resize);\n    }\n\n    private getImage(): CloudinaryImage | null {\n        if (!this.publicID) return null;\n\n        return new Cloudinary({ cloud: { cloudName: 'dofjtcdow' } }).image(\n            this.publicID,\n        );\n    }\n\n    get width(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('width' in this.size) {\n            return this.size.width;\n        }\n\n        if ('height' in this.size) {\n            return Math.floor(this.size.height * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n\n    get height(): number | null {\n        if (!this.size) {\n            return null;\n        }\n\n        if ('height' in this.size) {\n            return this.size.height;\n        }\n\n        if ('width' in this.size) {\n            return Math.floor(this.size.width * this.size.ratio);\n        }\n\n        if ('square' in this.size) {\n            return this.size.square;\n        }\n\n        return null;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\nimg {\n    object-fit: cover;\n    object-position: center;\n    border-radius: inherit;\n}\n\ndiv {\n    background: linear-gradient(180deg, var(--theme-background-secondary) 0%, rgba(var(--theme-main-rgb), 0.075) 100%);\n}\n\n.infer-size {\n    height: 100%;\n    width: 100%;\n}",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "number | null",
                        "line": 77
                    }
                },
                "height": {
                    "name": "height",
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "number | null",
                        "line": 97
                    }
                }
            },
            "templateData": "<img\n    *ngIf=\"getSrc()\"\n    [src]=\"getSrc()\"\n    [srcset]=\"getSrcset()\"\n    [alt]=\"alt\"\n    [style.height]=\"!inferSize && height\"\n    [style.width]=\"!inferSize && width\"\n    [ngClass]=\"{'infer-size': inferSize}\"\n/>\n\n<div\n    *ngIf=\"!getSrc()\"\n    [style.height]=\"!inferSize && height\"\n    [style.width]=\"!inferSize && width\"\n    [ngClass]=\"{'infer-size': inferSize}\"\n></div>"
        },
        {
            "name": "ImageControlComponent",
            "id": "component-ImageControlComponent-2ca3cbfa3932c9698fe7bb9fab0f3f8377bd7eb627c8c32718ee2196762cd0fa60845bfb1c1d30529d45e79af74a3efbf6db249078944e902559923a4cbafa72",
            "file": "src/modules/image/components/image-control/image-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-control",
            "styleUrls": [
                "./image-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-control.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sources",
                    "defaultValue": "[\n        'local',\n        'camera',\n        'dropbox',\n        'google_drive',\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "CloudinaryWidgetSourceType[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "new BehaviorSubject<\n        string | undefined\n    >(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "BehaviorSubject<string | undefined>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "uploadWidget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CloudinaryWidget | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleImageUploadComplete",
                    "args": [
                        {
                            "name": "event",
                            "type": "CloudinaryWidgetEventSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CloudinaryWidgetEventSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleImageUploadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageUpdate",
                    "args": [
                        {
                            "name": "error",
                            "type": "object | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "result",
                            "type": "CloudinaryWidgetEvent | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "object | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "CloudinaryWidgetEvent | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openWidget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport {\n    CloudinaryWidget,\n    CloudinaryWidgetEvent,\n    CloudinaryWidgetEventSuccess,\n    CloudinaryWidgetSourceType,\n} from 'src/types/cloudinary';\n\n@Component({\n    selector: 'app-image-control',\n    templateUrl: './image-control.component.html',\n    styleUrls: ['./image-control.component.scss'],\n})\nexport class ImageControlComponent implements OnInit {\n    @Input() value: BehaviorSubject<string | undefined> = new BehaviorSubject<\n        string | undefined\n    >(undefined);\n    @Input() canDelete: boolean = true;\n    @Input() sources: CloudinaryWidgetSourceType[] = [\n        'local',\n        'camera',\n        'dropbox',\n        'google_drive',\n    ];\n    @Output() change = new EventEmitter<string | undefined>();\n\n    uploadWidget: CloudinaryWidget | undefined;\n    loading$ = new BehaviorSubject<boolean>(false);\n\n    ngOnInit(): void {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.uploadWidget = (window as any).cloudinary.createUploadWidget(\n            {\n                cloudName: 'dofjtcdow',\n                uploadPreset: 'profile_picture',\n                sources: this.sources,\n                multiple: false,\n            },\n            this.onImageUpdate.bind(this),\n        );\n    }\n\n    openWidget() {\n        if (!this.uploadWidget) return;\n\n        this.uploadWidget.open();\n    }\n\n    deleteImage() {\n        this.value.next(undefined);\n        this.change.next(undefined);\n    }\n\n    private onImageUpdate(\n        error: object | undefined,\n        result: CloudinaryWidgetEvent | undefined,\n    ) {\n        if (error) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n            return;\n        }\n\n        if (result) {\n            switch (result.event) {\n                case 'upload-added':\n                    this.handleImageUploadStart();\n                    break;\n                case 'success':\n                    this.handleImageUploadComplete(\n                        result as CloudinaryWidgetEventSuccess,\n                    );\n                    break;\n            }\n        }\n    }\n\n    private handleImageUploadStart() {\n        this.value.next(undefined);\n        this.loading$.next(true);\n    }\n\n    private handleImageUploadComplete(event: CloudinaryWidgetEventSuccess) {\n        this.value.next(event.info.public_id);\n        this.change.next(event.info.public_id);\n        this.loading$.next(false);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-widget {\n    position: absolute;\n    top: -1000px;\n    left: -1000px;\n    display: none;\n    visibility: hidden;\n    opacity: 0;\n}\n\n.control-view {\n    display: flex;\n    border-radius: 6px;\n    box-sizing: border-box;\n    height: 100%;\n    width: 100%;\n    cursor: pointer;\n    position: relative;\n    \n    &--no-image {\n        border: dashed 2px var(--theme-main);\n        color: var(--theme-main);\n        justify-content: center;\n        align-items: center;\n        font-size: 2em;\n        transition: ease-in 0.1s background-color;\n\n        @media (hover: hover) {\n            &:hover {\n                background-color: rgba(var(--theme-main-rgb), 0.1);\n                transition: ease-in 0.05s background-color;\n            }\n        }\n    }\n\n    &--image {\n        background-color: rgba(var(--theme-main-rgb), 0.25);\n    }\n\n    &__image {\n        border-radius: 6px;\n        height: 100%;\n        width: 100%;\n    }\n\n    &__delete-btn {\n        position: absolute;\n        top: 0;\n        right: 0;\n        translate: 50% -50%;\n        height: 36px;\n        width: 36px;\n        appearance: none;\n        background-color: var(--theme-main-contrast);\n        color: var(--theme-main);\n        border: solid 1px rgb(240, 240, 240);\n        border-radius: 36px;\n        font-size: 1.1em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n}",
                    "styleUrl": "./image-control.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"value | async\">\n    <div class=\"control-view\">\n        <app-image\n            [publicID]=\"value | async\"\n            [size]=\"{ width: 400, ratio: 4/3 }\"\n            class=\"control-view__image control-view--image\"\n            (click)=\"openWidget()\"\n            [inferSize]=\"true\"\n        ></app-image>\n        <button *ngIf=\"canDelete\" class=\"control-view__delete-btn interactable\" (click)=\"deleteImage()\"><i class=\"fas fa-trash\"></i></button>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"!(value | async)\">\n    <div (click)=\"openWidget()\" class=\"control-view control-view--no-image\">\n        <i class=\"far fa-plus\" *ngIf=\"!(loading$ | async)\"></i>\n        <i class=\"far fa-spinner-third fa-spin\" *ngIf=\"loading$ | async\"></i>\n    </div>\n</ng-container>\n"
        },
        {
            "name": "InclusivityPageComponent",
            "id": "component-InclusivityPageComponent-0f4f0de3782e24fa92b4ed884e4a688875d762d548f7591d2b405070e020e3e4b876c7b76dddd560d8f4b905e34b89fd7ddf7dcd2de5406fb6c0f18cbf8734e7",
            "file": "src/modules/about/pages/ressources/inclusivity-page/inclusivity-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inclusivity-page",
            "styleUrls": [
                "./inclusivity-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inclusivity-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-inclusivity-page',\n    templateUrl: './inclusivity-page.component.html',\n    styleUrls: ['./inclusivity-page.component.scss'],\n})\nexport class InclusivityPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inclusivity-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Inclusivité\" backLink=\"/about\">\n    <app-card title=\"L'identité de genre et la sexualité\" icon=\"fas fa-transgender\" anchor=\"genre-and-sexuality\">\n        <p>Notre objectif est de favoriser des rencontres respectueuses et enrichissantes qui célèbrent la diversité de l'amour et de l'amitié.. Nous célébrons la diversité des identités de genre et des orientations sexuelles.</p>\n        <p>Nous vous offrons la possibilité d'exprimer votre identité de genre de manière authentique et de spécifier vos préférences de genre et votre sexualité, tout en préservant votre confidentialité. Voici comment ces éléments sont gérés dans notre application.</p>\n\n        <h3>Identité de Genre</h3>\n        <p>Dans les paramètres de votre compte, vous avez la liberté de choisir parmi trois options pour votre identité de genre : Homme, Femme ou Autre.</p>\n        <p>Si vous choisissez \"Autre\", votre profile sera visible par tous les utilisateurs de la plateforme. Ce genre n'est pas visible sur votre profile.</p>\n        <p>Toutefois, vous avez la possibilité de spécifier une identité de genre qui sera rendue publique, reflétant ainsi votre authenticité. Cette approche vous permet de vous définir comme vous le souhaitez, sans contraintes.</p>\n\n        <h3>Préférences de Genre</h3>\n        <p>Nous valorisons la diversité des orientations amoureuses, c'est pourquoi vous pouvez spécifier vos préférences de genre dans vos paramètres. Vous avez le choix entre Homme, Femme ou Tous. Cette fonctionnalité vous permet de personnaliser vos critères de recherche pour trouver des personnes qui correspondent à vos préférences, respectant ainsi votre liberté de choix.</p>\n\n        <h3>Sexualité</h3>\n        <p>L'application propose également un champ où vous pouvez indiquer votre sexualité, bien que cette information n'impacte pas la visibilité de votre compte. Elle est destinée uniquement à titre indicatif pour faciliter des connexions significatives. Nous encourageons les utilisateurs à être ouverts et respectueux envers toutes les orientations sexuelles.</p>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "LayoutActionComponent",
            "id": "component-LayoutActionComponent-457892a0dd996a0eb63d2935669f0da57ae726c629694ca1976f8c21a59396fa31867e326265bcb708cca6b39073676df33998f815f8a34d93a1efe63f94f85a",
            "file": "src/modules/ui/components/layout-action/layout-action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-action",
            "styleUrls": [
                "./layout-action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-action.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAdjustH",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "iconAdjustV",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-layout-action',\n    templateUrl: './layout-action.component.html',\n    styleUrls: ['./layout-action.component.scss'],\n})\nexport class LayoutActionComponent {\n    @Input() content?: string;\n    @Input() icon?: string;\n    @Input() link?: string;\n    @Input() action?: () => void;\n    @Input() disabled?: boolean;\n    @Input() iconAdjustH: number = 0;\n    @Input() iconAdjustV: number = 0;\n\n    constructor(private readonly router: Router) {}\n\n    handleClick(): void {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.action) {\n            this.action();\n        }\n\n        if (this.link) {\n            this.router.navigate([this.link]);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.layout-action {\n    $size: 42px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: var(--theme-background);\n    border-radius: $size;\n    height: $size;\n    text-decoration: none;\n    color: var(--theme-background--contrast);\n    border: solid 1px rgb(240, 240, 240);\n    font-size: 1.3em;\n    box-sizing: border-box;\n    gap: 12px;\n\n    &__content {\n        white-space: nowrap;\n    }\n\n    &--icon-only {\n        width: $size;\n    }\n\n    &--not-icon-only {\n        padding: 0 24px;\n\n        .layout-action__icon {\n            font-size: 0.9em;\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        $size: 36px;\n\n        border-radius: $size;\n        height: $size;\n        font-size: 1.2em;\n\n        &--icon-only {\n            width: $size;\n        }\n\n        &--not-icon-only {\n            padding: 0 12px;\n        }\n    }\n}",
                    "styleUrl": "./layout-action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button\n    class=\"layout-action\"\n    [ngClass]=\"{ 'interactable': !disabled, 'layout-action--icon-only': !content, 'layout-action--not-icon-only': !!content }\"\n    (click)=\"disabled ? undefined : handleClick()\"\n    tabindex=\"0\"\n>\n    <div class=\"layout-action__icon\" *ngIf=\"icon\">\n        <i\n            [class]=\"icon\"\n            [style.margin-top.px]=\"iconAdjustV\"\n            [style.margin-left.px]=\"iconAdjustH\"\n        ></i>\n    </div>\n    <div class=\"layout-action__content\" *ngIf=\"content\">{{content}}</div>\n</button>"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-7afc5d0019eca0d8dfd5b4b2dc39c0895e5e732c050935d145f4ebee25f6227ba75f458aff6f39c43e2d3a07cf793ce83886003d5befc8335235f507283689a6",
            "file": "src/modules/ui/components/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "headerType",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"default\" | \"transparent\" | \"hidden\"",
                    "decorators": []
                },
                {
                    "name": "noGap",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent {\n    @Input() headerType: 'default' | 'transparent' | 'hidden' = 'default';\n    @Input() noGap: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.layout {\n    display: grid;\n    grid-template-rows: auto minmax(0, 1fr);\n    width: 100%;\n    height: 100%;\n    gap: 24px;\n\n    &__head {\n        @include no-select;\n\n        display: grid;\n        grid-template-columns: auto minmax(0, 1fr) auto;\n        align-items: center;\n        gap: 24px;\n\n        &__left,\n        &__right {\n            display: flex;\n            gap: 12px;\n        }\n\n        &__right {\n            justify-content: flex-end;\n        }\n\n        &__center {\n            text-align: center;\n            font-size: 1.4rem;\n            font-weight: 500;\n            color: var(--theme-background--contrast);\n        }\n    }\n\n    &--type {\n        &--default {\n            .layout__head {\n                background-color: var(--theme-background);\n                border-bottom: solid 1px rgb(240, 240, 240);\n                padding: 24px;\n            }\n        }\n\n        &--transparent {\n            .layout__head {\n                padding: 24px 24px 0 24px;\n            }\n        }\n\n        &--hidden {\n            grid-template-rows: minmax(0, 1fr);\n        }\n    }\n\n    &--no-gap {\n        gap: 0px !important;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        gap: 12px;\n        \n        &__head {\n            gap: 12px;\n\n            &__center {\n                text-align: left;\n                font-size: 1.2rem;\n            }\n        }\n\n        &--type {\n            &--default {\n                .layout__head {\n                    padding: 12px;\n                }\n            }\n    \n            &--transparent {\n                .layout__head {\n                    padding: 24px 12px 0 12px;\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [class]=\"'layout layout--type--' + headerType\" [ngClass]=\"{ 'layout--no-gap': noGap }\">\n    <div class=\"layout__head\" *ngIf=\"headerType != 'hidden'\">\n        <div class=\"layout__head__left\">\n            <ng-content select=\"[layout-action-left]\"></ng-content>\n        </div>\n        <div class=\"layout__head__center\">\n            <ng-content select=\"[layout-title]\"></ng-content>\n        </div>\n        <div class=\"layout__head__right\">\n            <ng-content select=\"[layout-action-right]\"></ng-content>\n        </div>\n    </div>\n\n    <div class=\"layout__content\">\n        <ng-content></ng-content>\n    </div>\n</div>"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-78811a4fb2f6ba67c8322039132091cec6125199e98764254746cfa3ab8193badf969b60ee0ac19b5042494efd876b6dd6fca55c33f938828807fab5e40325d2",
            "file": "src/modules/authentication/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            Validators.minLength(1),\n        ]),\n        password: new FormControl('', []),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../../services/authentication-service/authentication.service';\nimport { AuthenticationUser } from 'common/models/authentication';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\n\n@Component({\n    selector: 'app-login-page',\n    templateUrl: './login-page.component.html',\n    styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent {\n    loginForm = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            Validators.minLength(1),\n        ]),\n        password: new FormControl('', []),\n    });\n    loading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n    ) {}\n\n    onSubmit() {\n        this.loading.next(true);\n\n        this.authenticationService\n            .login(this.loginForm.value as AuthenticationUser)\n            .subscribe({\n                next: () => {\n                    this.loading.next(false);\n                },\n                error: (error: HttpErrorResponse) => {\n                    if (error.status === 406) {\n                        this.loginForm.setErrors({ invalidCredentials: true });\n                    } else if (error.status === HttpStatusCode.Locked) {\n                        this.loginForm.setErrors({ accountLocked: true });\n                    } else {\n                        this.loginForm.setErrors({ unknownError: true });\n                    }\n                    this.loading.next(false);\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-text {\n    margin: 0;\n    opacity: 0.75;\n    text-align: center;\n\n    a {\n        color: inherit;\n    }\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-authentication-layout\n    name=\"Se connecter\"\n    description=\"Connectez-vous pour découvrir des rencontres authentiques au sein de Polytechnique.\"\n    [formGroup]=\"loginForm\"\n    [formsErrors]=\"{\n        invalidCredentials: 'Le email ou le mot de passe est invalide',\n        accountLocked: 'Le compte a été bloqué ou suspendu. Veuillez contacter poly.tinder.2023@gmail.com si vous pensez que c\\'est un erreur.',\n        unknownError: 'Un erreur est survenu',\n    }\"\n    [loading]=\"loading | async\"\n    (formSubmit)=\"onSubmit()\"\n>\n    <ng-container auth-form-field>\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-envelope\"></i> Email</mat-label>\n            <input formControlName=\"email\" matInput>\n            <mat-error *ngIf=\"loginForm.controls.email.errors?.['required']\">Le email est requis</mat-error>\n        </mat-form-field>\n    \n        <mat-form-field>\n            <mat-label><i class=\"fas fa-key\"></i> Mot de passe</mat-label>\n            <input formControlName=\"password\" type=\"password\" matInput>\n            <mat-error *ngIf=\"loginForm.controls.password.errors?.['required']\">Le mot de passe est requis</mat-error>\n        </mat-form-field>\n    </ng-container>\n\n    <ng-container auth-extra>\n        <app-card>\n            <p class=\"link-text\">Oublié votre mot de passe ? <a routerLink=\"/request-password-reset\">Réinitialiser le mot de passe</a>.</p>\n        </app-card>\n    \n        <app-card>\n            <p class=\"link-text\">Vous n'avez pas de compte ? <a routerLink=\"/signup\">Créez en un</a> !</p>\n        </app-card>\n    </ng-container>\n</app-authentication-layout>"
        },
        {
            "name": "MatchedModalComponent",
            "id": "component-MatchedModalComponent-c63a015da3f8a320ba28ab5e2efd3cf7a0834ba4fc26b762737c9d6258d5ebbc9170b9f995676649cfbbe2cd8b63ab4067ba82beb8a2a132de63bc36d81c4b6a",
            "file": "src/modules/matching/components/matched-modal/matched-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-matched-modal",
            "styleUrls": [
                "./matched-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./matched-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<MatchedModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PublicUserResult",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PublicUserResult } from 'common/models/user';\n\n@Component({\n    selector: 'app-matched-modal',\n    templateUrl: './matched-modal.component.html',\n    styleUrls: ['./matched-modal.component.scss'],\n})\nexport class MatchedModalComponent {\n    constructor(\n        public dialogRef: MatDialogRef<MatchedModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public userProfile: PublicUserResult,\n    ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./matched-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MatchedModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userProfile",
                        "type": "PublicUserResult",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MatchedModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userProfile",
                        "type": "PublicUserResult",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>You matched with {{userProfile.name}}!</p>"
        },
        {
            "name": "MatchedUserPageComponent",
            "id": "component-MatchedUserPageComponent-0af1922c4ffb31e90b0e6fa246e3e8638750d168b56b06eb6b8edc855016c5f883cfcd38f41642d9e5d7311441251fc0c569d81d7d1f25cfcf977d47166f0e17",
            "file": "src/modules/matching/pages/matched-user-page/matched-user-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-matched-user-page",
            "styleUrls": [
                "./matched-user-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./matched-user-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n        message: new FormControl('', [\n            Validators.minLength(1),\n            Validators.maxLength(255),\n        ]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "messages",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DisplayMessageGroup[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "question",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "userProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PublicUserResultClass | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "blockUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "groupMessages",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matchedUser",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchedUser",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reportUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unmatchUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    Observable,\n    Subject,\n    combineLatest,\n    first,\n    map,\n    of,\n    switchMap,\n} from 'rxjs';\nimport { PublicProfileService } from '../../services/public-profile-service/public-profile.service';\nimport { PublicUserResultClass } from '../../models/public-user-result';\nimport { UserProfile } from 'common/models/user';\nimport { DisplayMessageGroup, Message } from 'common/models/message';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { groupMessages } from '../../utils/messages';\nimport { UserProfileService } from 'src/modules/user-profile/services/user-profile-service/user-profile.service';\nimport { QUESTIONS } from '../../constants/questions';\nimport { MessagesService } from '../../services/messages-service/messages.service';\nimport { onlyHasEmoji } from '../../utils/utils';\nimport { ModerationService } from 'src/modules/moderation/services/moderation.service';\nimport { MatchingService } from '../../services/matching-service/matching.service';\n\n@Component({\n    selector: 'app-matched-user-page',\n    templateUrl: './matched-user-page.component.html',\n    styleUrls: ['./matched-user-page.component.scss'],\n})\nexport class MatchedUserPageComponent {\n    userProfile: Observable<PublicUserResultClass | undefined>;\n    messages: Observable<DisplayMessageGroup[]> = new Subject();\n    form = new FormGroup({\n        message: new FormControl('', [\n            Validators.minLength(1),\n            Validators.maxLength(255),\n        ]),\n    });\n    question: string;\n\n    constructor(\n        private readonly route: ActivatedRoute,\n        private readonly publicProfileService: PublicProfileService,\n        private readonly userProfileService: UserProfileService,\n        private readonly messagesService: MessagesService,\n        private readonly moderationService: ModerationService,\n        private readonly matchingService: MatchingService,\n        private readonly router: Router,\n    ) {\n        this.userProfile = this.route.params.pipe(\n            map((params) => {\n                if (!params['id']) {\n                    throw new Error('No id provided');\n                }\n\n                return Number(params['id']);\n            }),\n            switchMap((userId) => this.publicProfileService.getMatch(userId)),\n        );\n        this.messages = combineLatest([\n            this.userProfileService.getUserProfile(),\n            this.userProfile,\n        ]).pipe(\n            switchMap(([userProfile, matchedUser]) => {\n                if (!userProfile || !matchedUser) return of([]);\n\n                return this.messagesService\n                    .getMessages(matchedUser.id)\n                    .pipe(\n                        map((messages) =>\n                            this.groupMessages(\n                                messages,\n                                userProfile,\n                                matchedUser,\n                            ),\n                        ),\n                    );\n            }),\n        );\n\n        combineLatest([this.messages, this.userProfile]).subscribe(\n            ([, userProfile]) => {\n                if (!userProfile) return;\n\n                this.messagesService.markAsRead(userProfile.id).subscribe();\n            },\n        );\n\n        this.publicProfileService.fetchMatchesIfNotLoaded().subscribe();\n        this.question = this.getQuestion();\n    }\n\n    get userProfileValue(): Observable<UserProfile | undefined> {\n        return this.userProfile.pipe(\n            switchMap((user) => (user ? user.value : of(undefined))),\n        );\n    }\n\n    onSubmit() {\n        if (this.form.valid) {\n            this.sendMessage(this.form.value.message ?? '').subscribe();\n            this.form.reset();\n        }\n    }\n\n    sendMessage(message: string) {\n        if (message.length == 0 || message.length > 255) {\n            throw new Error('Invalid message length');\n        }\n\n        return this.userProfile.pipe(first()).pipe(\n            switchMap((user) => {\n                if (!user) throw new Error('No user found');\n                return this.messagesService.sendMessage(user.id, message);\n            }),\n        );\n    }\n\n    updateQuestion() {\n        this.question = this.getQuestion();\n    }\n\n    unmatchUser() {\n        this.userProfile.pipe(first()).subscribe((user) => {\n            if (!user) throw new Error('User profile is undefined');\n            this.matchingService.askUnmatchUser(user);\n            this.router.navigate(['/matches']);\n        });\n    }\n\n    reportUser() {\n        this.userProfile.pipe(first()).subscribe((user) => {\n            if (!user) throw new Error('User profile is undefined');\n            this.moderationService.openReportUserModal(\n                user.id,\n                user.currentValue.name ?? '',\n            );\n        });\n    }\n\n    blockUser() {\n        if (!this.userProfile) throw new Error('User profile is undefined');\n\n        this.userProfile.pipe(first()).subscribe((user) => {\n            if (!user) throw new Error('User profile is undefined');\n            this.moderationService\n                .openBlockUserModal(user.id, user.currentValue.name ?? '')\n                .subscribe(() => {\n                    this.router.navigate(['/matches']);\n                });\n        });\n    }\n\n    private groupMessages(\n        messages: Message[],\n        userProfile: UserProfile,\n        matchedUser: PublicUserResultClass,\n    ) {\n        return groupMessages(messages).map((messageGroup) => {\n            const sender: UserProfile =\n                messageGroup.senderId === matchedUser.id\n                    ? matchedUser.currentValue\n                    : userProfile;\n            return {\n                timestamp: messageGroup.timestamp,\n                sender: {\n                    name: sender.name ?? '',\n                    picture: sender.pictures?.[0] ?? '',\n                },\n                isSelf: sender === userProfile,\n                messages: messageGroup.messages.map((message) => {\n                    return {\n                        content: message.content,\n                        timestamp: message.timestamp,\n                        sender: {\n                            name: sender.name ?? '',\n                            picture: sender.pictures?.[0] ?? '',\n                        },\n                        onlyEmoji: onlyHasEmoji(message.content),\n                        read: message.read,\n                    };\n                }),\n            };\n        });\n    }\n\n    private getQuestion(): string {\n        return QUESTIONS[Math.floor(Math.random() * QUESTIONS.length)];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.matched-user-page {\n    display: grid;\n    grid-template-rows: minmax(0, 1fr);\n    height: 100%;\n\n    // &__header,\n    &__footer {\n        background-color: var(--theme-background);\n        padding: 24px;\n        display: grid;\n        align-items: center;\n        gap: 24px;\n    }\n\n    &__header {\n        &__title {\n            font-size: 1.5em;\n            font-weight: 500;\n            color: var(--theme-background-contrast);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 12px;\n\n            &__avatar {\n                height: 36px;\n                width: 36px;\n                background-color: rgb(240, 240, 240);\n                border-radius: 6px;\n                object-fit: cover;\n                object-position: center;\n            }\n        }\n    }\n\n    &__container {\n        display: grid;\n        grid-template-rows: minmax(0, 1fr) auto;\n        height: 100%;\n    }\n\n    &__content {\n        display: flex;\n        flex-direction: column-reverse;\n        overflow-y: auto;\n\n        &__messages {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n            padding: 24px;\n\n            &__system-message {\n                @include no-select;\n\n                width: 100%;\n                background-color: rgb(240, 240, 240);\n                max-width: 600px;\n                align-self: center;\n                padding: 24px;\n                border-radius: 6px;\n                text-align: center;\n                color: rgba(0, 0, 0, 0.55);\n                box-sizing: border-box;\n                margin-bottom: 12px;\n            }\n\n            &__question {\n                max-width: 600px;\n                align-self: center;\n                margin-bottom: 12px;\n                text-align: center;\n\n                &__description {\n                    @include no-select;\n                    opacity: 0.55;\n                    font-style: italic;\n                }\n\n                &__question {\n                    font-size: 1.65em;\n                    font-weight: 500;\n                    margin: 24px 0;\n                    line-height: 1.2em;\n                }\n\n                &__actions {\n                    @include no-select;\n                    display: flex;\n                    gap: 24px;\n                    justify-content: center;\n\n                    &__action {\n                        border: solid 1px rgb(240, 240, 240);\n                        padding: 6px 12px;\n                        border-radius: 6px;\n\n                        i {\n                            margin-right: 6px;\n                        }\n                    }\n                }\n            }\n\n            &__group {\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                gap: 6px;\n\n                &__time {\n                    @include no-select;\n\n                    opacity: 0.55;\n                    font-weight: 500;\n                    align-self: center;\n                    font-size: 0.85em;\n                }\n\n                &__content {\n                    display: flex;\n                    align-items: flex-end;\n                    gap: 6px;\n\n                    &__sender {\n                        &__avatar {\n                            height: 10px;\n                            width: 10px;\n                            background-color: rgb(220, 220, 220);\n                            border-radius: 10px;\n                            background-position: center;\n                            background-size: cover;\n                        }\n                    }\n\n                    &__messages {\n                        display: flex;\n                        gap: 3px;\n                        flex-direction: column;\n\n                        &__message {\n                            background-color: rgb(220, 220, 220);\n                            padding: 6px 12px;\n                            border-radius: 3px;\n                            max-width: 80%;\n                            word-wrap: break-word;\n\n                            &--only-emoji {\n                                background: none;\n                                font-size: 2em;\n                                padding: 6px 0;\n                                line-height: 1em;\n                            }\n                        }\n                    }\n                }\n\n                &--self {\n                    .matched-user-page__content__messages__group__content {\n                        flex-direction: row-reverse;\n\n                        &__messages {\n                            align-items: flex-end;\n\n                            &__message {\n                                background-color: var(--theme-main);\n                                color: var(--theme-main-contrast);\n                                border-top-left-radius: 12px;\n                                border-bottom-left-radius: 12px;\n\n                                &:first-child {\n                                    border-top-right-radius: 12px;\n                                }\n                                &:last-child {\n                                    border-bottom-right-radius: 12px;\n                                }\n\n                                &--only-emoji {\n                                    background: none;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                &--other {\n                    .matched-user-page__content__messages__group__content {\n                        &__messages {\n                            align-items: flex-start;\n\n                            &__message {\n                                border-top-right-radius: 12px;\n                                border-bottom-right-radius: 12px;\n\n                                &:first-child {\n                                    border-top-left-radius: 12px;\n                                }\n                                &:last-child {\n                                    border-bottom-left-radius: 12px;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    &__footer {\n        $item-size: 40px;\n\n        border-top: solid 1px rgb(240, 240, 240);\n        grid-template-columns: 1fr auto;\n\n        &__control {\n            height: $item-size;\n            appearance: none;\n            background-color: rgb(250, 250, 250);\n            border: solid 1px rgb(240, 240, 240);\n            font: inherit;\n            outline: none;\n            border-radius: $item-size;\n            padding: 0 24px;\n            box-sizing: border-box;\n        }\n\n        &__button {\n            @include no-select;\n\n            height: $item-size;\n            width: $item-size;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 1.1em;\n            border: solid 1px rgb(240, 240, 240);\n            border-radius: $item-size;\n            background-color: var(--theme-background);\n            color: var(--theme-background-contrast);\n            flex-grow: 0;\n            flex-shrink: 0;\n            box-sizing: border-box;\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        &__header,\n        &__footer {\n            padding: 12px;\n            gap: 12px;\n        }\n\n        &__header {\n            &__back {\n                height: 32px;\n                width: 32px;\n                font-size: 1.1em;\n\n                i {\n                    margin-left: -1px;\n                }\n            }\n\n            &__title {\n                font-size: 1.2em;\n    \n                &__avatar {\n                    height: 32px;\n                    width: 32px;\n                }\n            }\n        }\n\n        &__footer {\n            $item-size: 32px;\n\n            &__control {\n                padding: 0 12px;\n                height: $item-size;\n            }\n\n            &__button {\n                height: $item-size;\n                width: $item-size;\n                font-size: 1em;\n            }\n\n            @media all and (display-mode: standalone) {\n                padding: 12px 12px 40px 12px;\n            }\n        }\n    }\n}",
                    "styleUrl": "./matched-user-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messagesService",
                        "type": "MessagesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messagesService",
                        "type": "MessagesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userProfileValue": {
                    "name": "userProfileValue",
                    "getSignature": {
                        "name": "userProfileValue",
                        "type": "",
                        "returnType": "Observable<UserProfile | undefined>",
                        "line": 93
                    }
                }
            },
            "templateData": "<app-layout class=\"matched-user-page\" [noGap]=\"true\">\n    <app-layout-action layout-action-left icon=\"fas fa-chevron-left\" link=\"/matches\"></app-layout-action>\n\n    <div layout-title class=\"matched-user-page__header__title\">\n        <ng-container *ngIf=\"userProfileValue | async; let userProfile\">\n            <app-image\n                [publicID]=\"userProfile.pictures?.[0]\"\n                [size]=\"{square: 72}\"\n                [alt]=\"'Photo de profil de ' + userProfile.name\"\n                [inferSize]=\"true\"\n                class=\"matched-user-page__header__title__avatar\"\n            ></app-image>\n            <span class=\"matched-user-page__header__title__content\">{{userProfile.name}}</span>\n        </ng-container>\n    </div>\n\n    <app-layout-action layout-action-right class=\"desktop-only\" icon=\"fas fa-user\" content=\"Voir le profil\" [link]=\"'matches/profile/' + (userProfile | async)?.id\"></app-layout-action>\n    <app-layout-action layout-action-right class=\"mobile-only\" icon=\"fas fa-user\" [link]=\"'matches/profile/' + (userProfile | async)?.id\"></app-layout-action>\n    <app-layout-action layout-action-right icon=\"fas fa-ellipsis-v\" [matMenuTriggerFor]=\"actionsMenu\"></app-layout-action>\n\n    <mat-menu #actionsMenu=\"matMenu\">\n        <button mat-menu-item (click)=\"unmatchUser()\"><i class=\"fas fa-trash\"></i> Supprimer</button>\n        <button mat-menu-item (click)=\"reportUser()\"><i class=\"fas fa-flag\"></i> Signaler</button>\n        <button mat-menu-item (click)=\"blockUser()\"><i class=\"fas fa-times\"></i> Bloquer</button>\n    </mat-menu>\n    \n    <div class=\"matched-user-page__container\">\n        <div class=\"matched-user-page__content\">\n            <div class=\"matched-user-page__content__messages\">\n                <div class=\"matched-user-page__content__messages__system-message\">Pour garantir votre sécurité, veillez à ne pas partager d'informations personnelles ou confidentielles dans les messages, car ceux-ci ne sont pas encryptés. Restons prudents et respectons la confidentialité.</div>\n    \n                <app-card class=\"matched-user-page__content__messages__question\" *ngIf=\"((messages | async)?.length ?? 0) == 0\">\n                    <span class=\"matched-user-page__content__messages__question__description\">Voici un idée de question pour débuter la conversation :</span>\n                    <div class=\"matched-user-page__content__messages__question__question\">{{question}}</div>\n                    <div class=\"matched-user-page__content__messages__question__actions\">\n                        <a class=\"matched-user-page__content__messages__question__actions__action interactable\" (click)=\"updateQuestion()\"><i class=\"fas fa-sync\"></i> Nouvelle question</a>\n                        <a class=\"matched-user-page__content__messages__question__actions__action interactable\" (click)=\"sendMessage(question).subscribe()\"><i class=\"fas fa-paper-plane\"></i> Envoyer</a>\n                    </div>\n                </app-card>\n    \n                <div class=\"matched-user-page__content__messages__group\" [ngClass]=\"{'matched-user-page__content__messages__group--self': messageGroup.isSelf, 'matched-user-page__content__messages__group--other': !messageGroup.isSelf}\" *ngFor=\"let messageGroup of messages | async\">\n                    <span class=\"matched-user-page__content__messages__group__time\">{{messageGroup.timestamp | date: 'MMM d, h:mm'}}</span>\n                    <div class=\"matched-user-page__content__messages__group__content\">\n                        <div class=\"matched-user-page__content__messages__group__content__sender\" *ngIf=\"!messageGroup.isSelf\">\n                            <div class=\"matched-user-page__content__messages__group__content__sender__avatar\" [style.backgroundImage]=\"'url(' + (userProfileValue | async)?.pictures?.[0] + '-/scale_crop/20x20/smart/' + ')'\"></div>\n                        </div>\n                        <div class=\"matched-user-page__content__messages__group__content__messages\">\n                            <div class=\"matched-user-page__content__messages__group__content__messages__message\" [ngClass]=\"{ 'matched-user-page__content__messages__group__content__messages__message--only-emoji': message.onlyEmoji}\" *ngFor=\"let message of messageGroup.messages\">\n                                {{message.content}}\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <form class=\"matched-user-page__footer\" (submit)=\"onSubmit()\" [formGroup]=\"form\">\n            <input class=\"matched-user-page__footer__control\" placeholder=\"Aa\" type=\"text\" formControlName=\"message\">\n            <button class=\"matched-user-page__footer__button interactable\" type=\"submit\" *ngIf=\"(form.value.message?.length ?? 0) > 0\"><i class=\"fas fa-paper-plane\"></i></button>\n            <a class=\"matched-user-page__footer__button interactable\" (click)=\"sendMessage('👍').subscribe()\" *ngIf=\"(form.value.message?.length ?? 0) === 0\"><span class=\"emoji\">👍</span></a>\n        </form>\n    </div>\n</app-layout>\n"
        },
        {
            "name": "MatchedUserProfilePageComponent",
            "id": "component-MatchedUserProfilePageComponent-674ab321c65b8ade94c1e8748f76eacb2dc18bf782f3ea2c86e95bd51a0f6d140ef282f34cf0a74b5d3491be26a032cf0d1fd921450a0b430c1e15d1e1718b51",
            "file": "src/modules/matching/pages/matched-user-profile-page/matched-user-profile-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-matched-user-profile-page",
            "styleUrls": [
                "./matched-user-profile-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./matched-user-profile-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PublicUserResultClass | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Observable, map, switchMap } from 'rxjs';\nimport { PublicUserResultClass } from '../../models/public-user-result';\nimport { ActivatedRoute } from '@angular/router';\nimport { PublicProfileService } from '../../services/public-profile-service/public-profile.service';\n\n@Component({\n    selector: 'app-matched-user-profile-page',\n    templateUrl: './matched-user-profile-page.component.html',\n    styleUrls: ['./matched-user-profile-page.component.scss'],\n})\nexport class MatchedUserProfilePageComponent {\n    userProfile: Observable<PublicUserResultClass | undefined>;\n\n    constructor(\n        private readonly route: ActivatedRoute,\n        private readonly publicProfileService: PublicProfileService,\n    ) {\n        this.userProfile = this.route.params.pipe(\n            map((params) => {\n                if (!params['id']) {\n                    throw new Error('No id provided');\n                }\n\n                return Number(params['id']);\n            }),\n            switchMap((userId) => this.publicProfileService.getMatch(userId)),\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.container {\n    display: grid;\n    grid-template-rows: minmax(0, 1fr);\n    grid-template-columns: minmax(0, 1fr);\n    height: 100%;\n    width: 100%;\n    max-width: 400px;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    padding: 24px;\n    box-sizing: border-box;\n\n    app-user-profile-card {\n        flex-grow: 1;\n        width: 100%;\n        max-height: 600px;\n        height: 100%;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 12px;\n    }\n}",
                    "styleUrl": "./matched-user-profile-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-layout class=\"matched-user-profile-page\" [noGap]=\"true\" *ngIf=\"userProfile | async; let userProfile\">\n    <app-layout-action layout-action-left icon=\"fas fa-chevron-left\" [link]=\"'/matches/' + userProfile.id\"></app-layout-action>\n\n    <div class=\"container\">\n        <app-user-profile-card [userProfile]=\"userProfile.value | async\" [disableModeration]=\"true\" [disableInteractions]=\"true\"></app-user-profile-card>\n    </div>\n</app-layout>"
        },
        {
            "name": "MatchesPageComponent",
            "id": "component-MatchesPageComponent-40e51d5d177cf4c0eec42690c8482ffd870facc8fff9c102a10690aacd2be8e89103d653bf7a41100e6824b56b66fa6c66cb79872fc5c8763e05a13b0901881e",
            "file": "src/modules/matching/pages/matches-page/matches-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-matches-page",
            "styleUrls": [
                "./matches-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./matches-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "conversations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MatchListItemClass[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hasConversations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hasMatches",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "matches",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MatchListItemClass[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { PublicProfileService } from 'src/modules/matching/services/public-profile-service/public-profile.service';\nimport { MatchListItemClass } from '../../models/match-list-item';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\n\n@Component({\n    selector: 'app-matches-page',\n    templateUrl: './matches-page.component.html',\n    styleUrls: ['./matches-page.component.scss'],\n})\nexport class MatchesPageComponent {\n    matches: Observable<MatchListItemClass[]>;\n    conversations: Observable<MatchListItemClass[]>;\n    hasMatches: Observable<boolean>;\n    hasConversations: Observable<boolean>;\n\n    constructor(\n        private readonly publicProfileService: PublicProfileService,\n        private readonly validationService: ValidationService,\n    ) {\n        this.matches = this.publicProfileService.matches.pipe(\n            map((matches) =>\n                matches.filter((match) => match.queryInfo.messagesCount === 0),\n            ),\n        );\n        this.conversations = this.publicProfileService.matches.pipe(\n            map((matches) =>\n                matches\n                    .filter((match) => match.queryInfo.messagesCount > 0)\n                    .sort((a, b) =>\n                        new Date(a.queryInfo.lastMessageTimestamp) >\n                        new Date(b.queryInfo.lastMessageTimestamp)\n                            ? -1\n                            : 1,\n                    ),\n            ),\n        );\n        this.hasMatches = this.matches.pipe(\n            map((matches) => matches.length > 0),\n        );\n        this.hasConversations = this.conversations.pipe(\n            map((conversations) => conversations.length > 0),\n        );\n\n        this.validationService.userValid.subscribe((userValid) => {\n            if (userValid) {\n                this.publicProfileService.fetchMatches().subscribe();\n            }\n        });\n    }\n\n    get userValid() {\n        return this.validationService.userValid;\n    }\n\n    get userValidMessage() {\n        return this.validationService.userValidMessage;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\nmain {\n    padding: 0 24px 24px 24px;\n    display: grid;\n    grid-template-columns: minmax(0, 1fr);\n    gap: 24px;\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 0 12px 12px 12px;\n        gap: 12px;\n    }\n\n    .error-message {\n        @include no-select;\n    \n        padding: 24px;\n        box-sizing: border-box;\n        text-align: center;\n        font-style: italic;\n        font-size: 1.15em;\n        font-weight: 500;\n        opacity: 0.55;\n    }\n}",
                    "styleUrl": "./matches-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValid": {
                    "name": "userValid",
                    "getSignature": {
                        "name": "userValid",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                },
                "userValidMessage": {
                    "name": "userValidMessage",
                    "getSignature": {
                        "name": "userValidMessage",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            },
            "templateData": "<app-layout headerType=\"transparent\">\n    <span layout-title>Mes matchs</span>\n    \n    <main>\n        <p class=\"error-message\" *ngIf=\"(userValid | async) === false\">{{ userValidMessage | async }}</p>\n\n        <app-match-list *ngIf=\"hasMatches | async\" [matches]=\"matches | async\"></app-match-list>\n        <app-conversation-list *ngIf=\"hasConversations | async\" [conversations]=\"conversations | async\"></app-conversation-list>\n    </main>\n</app-layout>"
        },
        {
            "name": "MatchListComponent",
            "id": "component-MatchListComponent-74be523b140bf3c4f98f0c6d4760f741b13fef8835dbe1f2a1fb3564fc23669121702432265674fc888b116d3a448f8a674fce5d3a95a0e70e097643cf40a6c7",
            "file": "src/modules/matching/components/match-list/match-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-match-list",
            "styleUrls": [
                "./match-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./match-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "matches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MatchListItemClass[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatchListItemClass } from '../../models/match-list-item';\n\n@Component({\n    selector: 'app-match-list',\n    templateUrl: './match-list.component.html',\n    styleUrls: ['./match-list.component.scss'],\n})\nexport class MatchListComponent {\n    @Input() matches: MatchListItemClass[] | null = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils';\n@import '../../../../styles/variables';\n\n.match-list {\n    @include no-scrollbar;\n    @include no-select;\n\n    display: flex;\n    gap: 24px;\n    padding: 24px;\n    overflow-x: auto;\n\n    a {\n        color: inherit;\n        text-decoration: none;\n    }\n\n    &__item {\n        width: 125px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 12px;\n        flex-shrink: 0;\n\n        &__image {\n            width: 100%;\n            aspect-ratio: 3/4;\n            border-radius: 6px;\n            object-fit: cover;\n            object-position: center;\n        }\n\n        &__name {\n            font-size: 1.1em;\n            font-weight: 500;\n            width: 100%;\n            white-space: nowrap;\n            word-break: keep-all;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            text-align: center;\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        gap: 12px;\n        padding: 12px;\n\n        &__item {\n            width: 100px;\n            gap: 6px;\n\n            &__name {\n                font-size: 1em;\n            }\n        }\n    }\n}",
                    "styleUrl": "./match-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-card [noPadding]=\"true\" title=\"Mes matchs\" icon=\"fas fa-user-friends\" anchor=\"matches\">\n    <div class=\"match-list\">\n        <ng-container *ngFor=\"let match of matches\">\n            <ng-container *ngIf=\"match.value | async; let value\">\n                <a [routerLink]=\"'/matches/' + value.userId\">\n                    <div class=\"match-list__item interactable\">\n                        <app-image\n                            class=\"match-list__item__image\"\n                            [publicID]=\"value.pictures?.[0]\"\n                            [alt]=\"'Photo de profil de ' + value.name\"\n                            [size]=\"{width: 250, height: 334}\"\n                            [inferSize]=\"true\"\n                        ></app-image>\n\n                        <span class=\"match-list__item__name\">{{value.name}}</span>\n                    </div>\n                </a>\n            </ng-container>\n        </ng-container>\n    </div>\n</app-card>"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-bd340d0e9ac967cbd91091f6fda38897f5a139691f38816f06dc9ea5aa503f2ce8896b3292232e47fb49640b0e4f91d868a860b6e9f8496e08c35beb3bf37966",
            "file": "src/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isActiveLink",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { combineLatest, map } from 'rxjs';\nimport { NAVIGATION, NAVIGATION_NOT_LOGGED_IN } from 'src/constants/navigation';\nimport { AuthenticationService } from 'src/modules/authentication/services/authentication-service/authentication.service';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\nimport { PublicProfileService } from 'src/modules/matching/services/public-profile-service/public-profile.service';\nimport { UserProfileService } from 'src/modules/user-profile/services/user-profile-service/user-profile.service';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\n\n@Component({\n    selector: 'app-navigation',\n    templateUrl: './navigation.component.html',\n    styleUrls: ['./navigation.component.scss'],\n})\nexport class NavigationComponent {\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n        private readonly sessionService: SessionService,\n        private readonly userProfileService: UserProfileService,\n        private readonly router: Router,\n        private readonly publicProfileService: PublicProfileService,\n        private readonly validationService: ValidationService,\n    ) {}\n\n    get navigation() {\n        return this.isLoggedIn.pipe(\n            map((isLoggedIn) =>\n                isLoggedIn ? NAVIGATION : NAVIGATION_NOT_LOGGED_IN,\n            ),\n        );\n    }\n\n    get isLoggedIn() {\n        return this.sessionService.isLoggedIn();\n    }\n\n    get user() {\n        return this.sessionService.session.pipe(\n            map((session) => session?.user),\n        );\n    }\n\n    get userProfile() {\n        return this.userProfileService.getUserProfile();\n    }\n\n    get name() {\n        return combineLatest([this.user, this.userProfile]).pipe(\n            map(([user, userProfile]) => {\n                return userProfile?.name ?? user?.email ?? '';\n            }),\n        );\n    }\n\n    get avatar() {\n        return this.userProfile.pipe(\n            map((userProfile) => {\n                const avatar = userProfile?.pictures?.[0] ?? undefined;\n\n                return avatar\n                    ? `${avatar}-/scale_crop/100x100/smart/`\n                    : undefined;\n            }),\n        );\n    }\n\n    get unreadConversationCount() {\n        return this.publicProfileService.unreadConversationCount;\n    }\n\n    get userValidActionsCount() {\n        return this.validationService.userValidActionsCount.pipe(\n            map((count) => count ?? 0),\n        );\n    }\n\n    logout() {\n        this.authenticationService.logout().subscribe();\n    }\n\n    isActiveLink(href: string) {\n        return this.router.url === href;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utils';\n@import '../../styles/variables';\n\n.navigation {\n    @include no-select;\n\n    border-right: solid 1px rgb(240, 240, 240);\n    height: 100%;\n    overflow-y: auto;\n    padding: 24px 16px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    max-width: 350px;\n    min-width: 250px;\n    width: 33vw;\n    gap: 24px;\n\n    &__top {\n        display: flex;\n        flex-direction: column;\n        gap: 36px;\n\n        &__brand {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 12px;\n            \n            &__logo {\n                width: 100%;\n                max-width: 90px;\n            }\n\n            &__name {\n                font-size: 1.4em;\n                font-weight: 600;\n            }\n        }\n\n        &__menu {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n\n            &__item {\n                list-style: none;\n\n                &__content {\n                    display: grid;\n                    grid-template-columns: minmax(0, 1fr) auto;\n                    align-items: center;\n                    gap: 12px;\n                    font-weight: 500;\n                    font-size: 1.1em;\n                    width: 100%;\n\n                    &__text {\n                        white-space: nowrap;\n                        text-overflow: ellipsis;\n                        overflow: hidden;\n                        text-align: left;\n                    }\n\n                    &__pill {\n                        background: linear-gradient(90deg, var(--theme-main), rgba(var(--theme-main-rgb), 0.6));\n                        color: var(--theme-main-contrast);\n                        font-size: 0.9em;\n                        padding: 2px 12px;\n                        border-radius: 20px;\n\n                        &--error {\n                            background: tomato !important;\n                        }\n                    }\n\n                    &--active {\n                        .navigation__top__menu__item__content {\n                            &__pill {\n                                background: var(--theme-main-contrast);\n                                color: var(--theme-main);\n\n                                &--error {\n                                    color: white !important;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    &__bottom {\n        display: flex;\n        gap: 12px;\n        justify-content: space-between;\n\n        &__left,\n        &__right {\n            display: flex;\n            gap: 12px;\n            padding: 0;\n            margin: 0;\n\n            &__item {\n                list-style: none;\n            }\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        height: auto;\n        width: 100%;\n        max-width: none;\n        min-width: none;\n        border: none;\n        padding: 8px;\n        border-top: solid 1px rgb(240, 240, 240);\n\n        &__top {\n            &__menu {\n                flex-direction: row;\n                justify-content: space-around;\n\n                &__item {\n                    &__content {\n                        // padding: 8px 16px;\n                        gap: 2px;\n                        position: relative;\n                        display: flex;\n                        justify-content: center;\n\n                        &__icon {\n                            font-size: 1.2em;\n                        }\n\n                        &__pill {\n                            position: absolute;\n                            top: -12px;\n                            right: -24px;\n                            font-size: 0.65em;\n                            padding: 0 8px;\n                            box-shadow: $default-shadow;\n                        }\n\n                        &--active {\n                            .navigation__top__menu__item__content {\n                                &__icon {\n                                    color: var(--theme-main);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        @media all and (display-mode: standalone) {\n            padding: 8px 8px 36px 8px;\n        }\n    }\n}\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "navigation": {
                    "name": "navigation",
                    "getSignature": {
                        "name": "navigation",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "userProfile": {
                    "name": "userProfile",
                    "getSignature": {
                        "name": "userProfile",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "avatar": {
                    "name": "avatar",
                    "getSignature": {
                        "name": "avatar",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "unreadConversationCount": {
                    "name": "unreadConversationCount",
                    "getSignature": {
                        "name": "unreadConversationCount",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "userValidActionsCount": {
                    "name": "userValidActionsCount",
                    "getSignature": {
                        "name": "userValidActionsCount",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            },
            "templateData": "<nav class=\"navigation\">\n    <div class=\"navigation__top\">\n        <br class=\"desktop-only\">\n\n        <div class=\"navigation__top__brand desktop-only\">\n            <img\n                src=\"/assets/logo.svg\"\n                alt=\"INSA Meet logo\"\n                class=\"navigation__top__brand__logo\"\n            >\n            <span class=\"navigation__top__brand__name\">INSA Meet</span>\n        </div>\n\n        <div class=\"navigation__top__menu\">\n            <li *ngFor=\"let item of (navigation | async)\" class=\"navigation__top__menu__item\">\n                <app-button\n                    [link]=\"isActiveLink(item.href) ? undefined : item.href\"\n                    [color]=\"isActiveLink(item.href) ? 'primary' : 'transparent'\"\n                    [interactable]=\"isActiveLink(item.href) ? 'none' : 'small'\"\n                    [icon]=\"'fas fa-' + item.icon\"\n                    class=\"desktop-only\"\n                >\n                    <div\n                        class=\"navigation__top__menu__item__content\"\n                        [ngClass]=\"{'navigation__top__menu__item__content--active': isActiveLink(item.href)}\"\n                    >\n                        <span class=\"navigation__top__menu__item__content__text\">{{item.text}}</span>\n                        <span class=\"navigation__top__menu__item__content__pill\" *ngIf=\"item.href === '/matches' && (unreadConversationCount | async) != '0'\">{{ unreadConversationCount | async }}</span>\n                        <span class=\"navigation__top__menu__item__content__pill navigation__top__menu__item__content__pill--error\" *ngIf=\"item.href === '/profile' && ((userValidActionsCount | async) ?? 0) > 0\">{{userValidActionsCount | async}}</span>\n                    </div>\n                </app-button>\n\n\n                <app-button\n                    [link]=\"isActiveLink(item.href) ? undefined : item.href\"\n                    color=\"transparent\"\n                    [interactable]=\"isActiveLink(item.href) ? 'none' : 'small'\"\n                    class=\"mobile-only\"\n                >\n                    <div\n                        class=\"navigation__top__menu__item__content\"\n                        [ngClass]=\"{'navigation__top__menu__item__content--active': isActiveLink(item.href)}\"\n                    >\n                        <i [class]=\"'fa-' + item.icon + ' fas navigation__top__menu__item__content__icon'\"></i>\n                        <span class=\"navigation__top__menu__item__content__pill\" *ngIf=\"item.href === '/matches' && (unreadConversationCount | async) != '0'\">{{ unreadConversationCount | async }}</span>\n                        <span class=\"navigation__top__menu__item__content__pill navigation__top__menu__item__content__pill--error\" *ngIf=\"item.href === '/profile' && ((userValidActionsCount | async) ?? 0) > 0\">{{userValidActionsCount | async}}</span>\n                    </div>\n                </app-button>\n            </li>\n        </div>\n    </div>\n\n    <div class=\"navigation__bottom desktop-only\">\n        <ul class=\"navigation__bottom__left\">\n            <li\n                class=\"navigation__bottom__left__item\"\n                matTooltip=\"À propos\"\n                *ngIf=\"isLoggedIn | async\"\n            >\n                <app-button link=\"/about\" icon=\"fas fa-info-circle\" [iconOnly]=\"true\"></app-button>\n            </li>\n            <li class=\"navigation__bottom__left__item\" matTooltip=\"Github\">\n                <app-button link=\"https://github.com/PolyTinder/poly-tinder\" icon=\"fab fa-github\" [iconOnly]=\"true\"></app-button>\n            </li>\n        </ul>\n\n        <ul class=\"navigation__bottom__right\">\n            <li\n                class=\"navigation__bottom__left__item\"\n                matTooltip=\"À propos\"\n                *ngIf=\"isLoggedIn | async\"\n            >\n                <app-button [matMenuTriggerFor]=\"logoutMenu\" icon=\"fas fa-sign-out\" [iconOnly]=\"true\" [forceFocusable]=\"true\"></app-button>\n\n                <mat-menu #logoutMenu=\"matMenu\">\n                    <button (click)=\"logout()\" mat-menu-item><i class=\"fas fa-sign-out\"></i> Se déconnecter</button>\n                </mat-menu>\n            </li>\n        </ul>\n    </div>\n</nav>\n"
        },
        {
            "name": "PasswordResetPageComponent",
            "id": "component-PasswordResetPageComponent-17145a1c0ad3c2ed06187ce1730eb2d0e00c55e80ef41e62271e1beb6c7a0c1e01621515bf074a7dc5821812d9d25fa671af0d6d4c8afcfe9ad4d3d6cab891f7",
            "file": "src/modules/authentication/pages/password-reset-page/password-reset-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-password-reset-page",
            "styleUrls": [
                "./password-reset-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-reset-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "resetPasswordForm",
                    "defaultValue": "new FormGroup({\n        password: new FormControl('', [\n            Validators.required,\n            Validators.pattern(/.+[a-z]+.+/), // letters,\n            Validators.pattern(/.+[0-9]+.+/), // numbers,\n            Validators.pattern(/.+[!@#$%?&*()-_=+/\\\\|,.;:^¨~<>[\\]{}]+.+/), // symbols,\n            Validators.minLength(8),\n        ]),\n        confirmPassword: new FormControl('', [\n            Validators.required,\n            confirmPasswordValidator(),\n        ]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sent",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "token",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { AuthenticationService } from '../../services/authentication-service/authentication.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { confirmPasswordValidator } from '../../validators/confirm-password-validator';\n\n@Component({\n    selector: 'app-password-reset-page',\n    templateUrl: './password-reset-page.component.html',\n    styleUrls: ['./password-reset-page.component.scss'],\n})\nexport class PasswordResetPageComponent {\n    resetPasswordForm = new FormGroup({\n        password: new FormControl('', [\n            Validators.required,\n            Validators.pattern(/.+[a-z]+.+/), // letters,\n            Validators.pattern(/.+[0-9]+.+/), // numbers,\n            Validators.pattern(/.+[!@#$%?&*()-_=+/\\\\|,.;:^¨~<>[\\]{}]+.+/), // symbols,\n            Validators.minLength(8),\n        ]),\n        confirmPassword: new FormControl('', [\n            Validators.required,\n            confirmPasswordValidator(),\n        ]),\n    });\n    loading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    sent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    token: string | undefined = undefined;\n\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n        private readonly activatedRoute: ActivatedRoute,\n    ) {\n        this.activatedRoute.queryParams.subscribe((params) => {\n            this.token = params['token'];\n        });\n    }\n\n    onSubmit() {\n        if (!this.token) {\n            return;\n        }\n\n        this.loading.next(true);\n        this.authenticationService\n            .resetPassword(this.token, this.resetPasswordForm.value.password!)\n            .subscribe({\n                next: () => {\n                    this.loading.next(false);\n                    this.resetPasswordForm.reset();\n                    this.sent.next(true);\n                },\n                error: () => {\n                    this.resetPasswordForm.setErrors({\n                        unknownError: true,\n                    });\n                    this.loading.next(false);\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./password-reset-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-authentication-layout\n    name=\"Réinitialiser le mot de passe\"\n    [formGroup]=\"resetPasswordForm\"\n    [formsErrors]=\"{\n        unknownError: 'Un erreur est survenu',\n    }\"\n    [loading]=\"loading | async\"\n    (formSubmit)=\"onSubmit()\"\n    [disabled]=\"!token || (sent | async)\"\n>\n    <ng-container auth-form-field>\n        <ng-container *ngIf=\"!(sent | async); else sentMessage\">\n            <mat-form-field>\n                <mat-label><i class=\"fas fa-key\"></i> Nouveau mot de passe</mat-label>\n                <input formControlName=\"password\" type=\"password\" matInput>\n                <mat-error *ngIf=\"resetPasswordForm.controls.password.errors?.['required']\">Le mot de passe est requis</mat-error>\n                <mat-error *ngIf=\"resetPasswordForm.controls.password.errors?.['minlength']\">Doit contenir minimum 8 caractères</mat-error>\n                <mat-error *ngIf=\"resetPasswordForm.controls.password.errors?.['pattern']\">Doit contenir une lettre, un nombre et un caractère spécial</mat-error>\n            </mat-form-field>\n            <mat-form-field>\n                <mat-label><i class=\"fas fa-key\"></i> Confirmer le mot de passe</mat-label>\n                <input formControlName=\"confirmPassword\" type=\"password\" matInput>\n                <mat-error *ngIf=\"resetPasswordForm.controls.confirmPassword.errors?.['passwordMismatch']\">Le mot de passe ne correspond pas</mat-error>\n            </mat-form-field>\n\n            <mat-error *ngIf=\"!token\">Le token est invalide. Veuillez vérifier l'URL.</mat-error>\n        </ng-container>\n\n        <ng-template #sentMessage>\n            <p>Votre mot de passe a été réinitialisé avec succès. <a routerLink=\"/login\">Connectez-vous</a> avec votre nouveau mot de passe.</p>\n        </ng-template>\n    </ng-container>\n</app-authentication-layout>\n"
        },
        {
            "name": "PoliciesPageComponent",
            "id": "component-PoliciesPageComponent-47c9a1bd37bc4f0188c28b17d6bf444238231ba297ffc0c888f07703cc0d4d43252d18ba2b602e224e6034596d5cb4429d37597752d55d10bb4570d8cb0aa0ca",
            "file": "src/modules/about/pages/application-rules/policies-page/policies-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-policies-page",
            "styleUrls": [
                "./policies-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policies-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-policies-page',\n    templateUrl: './policies-page.component.html',\n    styleUrls: ['./policies-page.component.scss'],\n})\nexport class PoliciesPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./policies-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Politiques\" backLink=\"/about\">\n    <app-card title=\"Politiques\" anchor=\"privacy-policy\">\n        <p>Pour garantir la meilleure expérience utilisateur et assurer la transparence, veuillez prendre un moment pour consulter nos Politiques de confidentialité, nos Termes et conditions, ainsi que notre Politique d'utilisation acceptable ci-dessous.</p>\n        <br>\n        <app-button link=\"/about/rules/policies/privacy-policy\" interactable=\"small\">Politique de confidentialité</app-button>\n        <br>\n        <app-button link=\"/about/rules/policies/terms-and-conditions\" interactable=\"small\">Termes et conditions</app-button>\n        <br>\n        <app-button link=\"/about/rules/policies/acceptable-use-policy\" interactable=\"small\">Politique d'utilisation acceptable</app-button>\n    </app-card>\n</app-about-layout>"
        },
        {
            "name": "PrivacyPolicyComponent",
            "id": "component-PrivacyPolicyComponent-bbba359261454c510bea17f3794b46df3691b4950a6d52a89cdd8043b7de42bcaefcf17e71ba679a475c6e0f03024e44e7158822ab9d5401ae9818871bd267bb",
            "file": "src/modules/about/pages/application-rules/privacy-policy/privacy-policy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-privacy-policy",
            "styleUrls": [
                "./privacy-policy.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./privacy-policy.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-privacy-policy',\n    templateUrl: './privacy-policy.component.html',\n    styleUrls: ['./privacy-policy.component.scss'],\n})\nexport class PrivacyPolicyComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./privacy-policy.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Privacy Policy\" backLink=\"/about/rules/policies\">\n    <app-card>\n        <p><b>Last updated October 04, 2023</b></p>\n\n        <p>\n            This privacy notice for PolyTinder, describes how and why we might collect, store, use,\n            and/or share (\"process\") your information when you use our services (\"Services\"), such as when you:\n        </p>\n        <ul>\n            <li>Visit our website at https://polytinder.com, or any website of ours that links to this privacy notice</li>\n            <li>Engage with us in other related ways, including any sales, marketing, or events</li>\n        </ul>\n        <p>Questions or concerns? Reading this privacy notice will help you understand your privacy rights and choices. If\n            you do not agree with our policies and practices, please do not use our Services. If you still have any questions or\n            concerns, please contact us at <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a>.</p>\n    </app-card>\n\n    <app-card title=\"Summary of key points\">\n        <p>This summary provides key points from our privacy notice, but you can find out more details about any of\n            these topics by clicking the link following each key point or by using our <a href=\"/privacy-policy#table-of-content\">table of contents</a> below to find the\n            section you are looking for.</p>\n\n        <p><b>What personal information do we process?</b> When you visit, use, or navigate our Services, we may process\n            personal information depending on how you interact with us and the Services, the choices you make, and the\n            products and features you use. Learn more about <a href=\"/privacy-policy#personalinfo\">personal information you disclose to us</a>.</p>\n\n        <p><b>Do we process any sensitive personal information?</b> We may process sensitive personal information when\n            necessary with your consent or as otherwise permitted by applicable law. Learn more about <a href=\"#sensitiveinfo\">sensitive information\n                we process</a>.</p>\n        \n        <p><b>Do we receive any information from third parties?</b> We do not receive any information from third parties.</p>\n\n        <p><b>How do we process your information?</b> We process your information to provide, improve, and administer our\n            Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process\n            your information for other purposes with your consent. We process your information only when we have a valid legal\n            reason to do so. Learn more about <a href=\"/privacy-policy#process-info\">how we process your information</a>.</p>\n        \n        <p><b>In what situations and with which parties do we share personal information?</b> We may share information in\n            specific situations and with specific third parties. Learn more about <a href=\"/privacy-policy#when-and-whom\">when and with whom we share your personal\n                information</a>.</p>\n\n        <p><b>How do we keep your information safe?</b> We have organizational and technical processes and procedures in\n            place to protect your personal information. However, no electronic transmission over the internet or information\n            storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers,\n            cybercriminals, or other unauthorized third parties will not be able to defeat our security and improperly collect,\n            access, steal, or modify your information. Learn more about <a href=\"/privacy-policy#info-safe\">how we keep your information safe</a>.</p>\n\n        <p><b>What are your rights?</b> Depending on where you are located geographically, the applicable privacy law may mean\n            you have certain rights regarding your personal information. Learn more about <a href=\"/privacy-policy#privacy-rights\">your privacy rights</a>.</p>\n\n        <p><b>How do you exercise your rights?</b> The easiest way to exercise your rights is by visiting https://polytinder.com, or\n            by contacting us. We will consider and act upon any request in accordance with applicable data protection laws.</p>\n    </app-card>\n\n    <app-card title=\"Table of content\" anchor=\"table-of-content\">\n        <ol>\n            <li><a href=\"/privacy-policy#info-collect\">What information do we collect?</a></li>\n            <li><a href=\"/privacy-policy#process-info\">How do we process your information?</a></li>\n            <li><a href=\"/privacy-policy#legal-bases\">What legal bases do we rely on to process your personal information?</a></li>\n            <li><a href=\"/privacy-policy#when-and-whom\">When and with whom do we share your personal information?</a></li>\n            <li><a href=\"/privacy-policy#how-long\">How long do we keep your information?</a></li>\n            <li><a href=\"/privacy-policy#info-safe\">How do we keep your information safe?</a></li>\n            <li><a href=\"/privacy-policy#minors\">Do we collect information from minors?</a></li>\n            <li><a href=\"/privacy-policy#privacy-rights\">What are your privacy rights?</a></li>\n            <li><a href=\"/privacy-policy#dnt\">Controls for Do-Not-Track features</a></li>\n            <li><a href=\"/privacy-policy#updates\">Do we make updates to this notice?</a></li>\n            <li><a href=\"/privacy-policy#contact\">How can you contact us about this notice?</a></li>\n            <li><a href=\"/privacy-policy#review-data\">How can you review, update, or delete the data we collect from you?</a></li>\n        </ol>            \n    </app-card>\n\n    <app-card title=\"1. What information do we collect?\" anchor=\"info-collect\">\n        <h3 id=\"personalinfo\">Personal information you disclose to us</h3>\n\n        <p>In Short: We collect personal information that you provide to us.</p>\n\n        <p>We collect personal information that you voluntarily provide to us when you register on the Services, express an\n            interest in obtaining information about us or our products and Services, when you participate in activities on the\n            Services, or otherwise when you contact us.</p>\n\n        <p>Personal Information Provided by You. The personal information that we collect depends on the context of your\n            interactions with us and the Services, the choices you make, and the products and features you use. The personal\n            information we collect may include the following:</p>\n\n        <ul>\n            <li>Names</li>\n            <li>Email Addresses</li>\n            <li>Job Titles</li>\n            <li>Passwords</li>\n            <li>Contact or Authentication Data</li>\n            <li>Pictures</li>\n        </ul>\n\n        <p id=\"sensitiveinfo\">Sensitive Information. When necessary, with your consent or as otherwise permitted by applicable law, we\n            process the following categories of sensitive information:</p>\n\n        <ul>\n            <li>data about a person's sex life or sexual orientation</li>\n        </ul>\n\n        <p>All personal information that you provide to us must be true, complete, and accurate, and you must notify us of any\n            changes to such personal information.</p>\n    </app-card>\n\n    <app-card title=\"2. How do we process your information?\" anchor=\"process-info\">\n        <p>In Short: We process your information to provide, improve, and administer our Services, communicate with you, for\n            security and fraud prevention, and to comply with law. We may also process your information for other purposes\n            with your consent.</p>\n\n        <p>We process your personal information for a variety of reasons, depending on how you interact with our\n            Services, including:</p>\n\n        <ul>\n            <li>To facilitate account creation and authentication and otherwise manage user accounts. We may process your information so you can create and log in to your account, as well as keep your account in working order.</li>\n            <li>To deliver and facilitate delivery of services to the user. We may process your information to provide you with the requested service.</li>\n            <li>To enable user-to-user communications. We may process your information if you choose to use any of our offerings that allow for communication with another user.</li>\n            <li>To identify usage trends. We may process information about how you use our Services to better understand how they are being used so we can improve them.</li>\n            <li>To comply with our legal obligations. We may process your information to comply with our legal obligations, respond to legal requests, and exercise, establish, or defend our legal rights.</li>\n        </ul>\n    </app-card>\n\n    <app-card title=\"What legal bases do we rely on to process your personal information?\" anchor=\"legal-bases\">\n        <p>In Short: We only process your personal information when we believe it is necessary and we have a valid legal\n            reason (i.e., legal basis) to do so under applicable law, like with your consent, to comply with laws, to provide you\n            with services to enter into or fulfill our contractual obligations, to protect your rights, or to fulfill our legitimate\n            business interests.</p>\n        \n        <p>We may process your information if you have given us specific permission (i.e., express consent) to use your\n            personal information for a specific purpose, or in situations where your permission can be inferred (i.e., implied\n            consent). You can withdraw your consent at any time.</p>\n\n        <p>In some exceptional cases, we may be legally permitted under applicable law to process your information without\n            your consent, including, for example:</p>\n\n        <ul>\n            <li>If collection is clearly in the interests of an individual and consent cannot be obtained in a timely way</li>\n            <li>For investigations and fraud detection and prevention</li>\n            <li>For business transactions provided certain conditions are met</li>\n            <li>If it is contained in a witness statement and the collection is necessary to assess, process, or settle an insurance claim</li>\n            <li>For identifying injured, ill, or deceased persons and communicating with next of kin</li>\n            <li>If we have reasonable grounds to believe an individual has been, is, or may be victim of financial abuse</li>\n            <li>If it is reasonable to expect collection and use with consent would compromise the availability or the accuracy of the information and the collection is reasonable for purposes related to investigating a breach of an agreement or a contravention of the laws of Canada or a province</li>\n            <li>If disclosure is required to comply with a subpoena, warrant, court order, or rules of the court relating to the production of records</li>\n            <li>If it was produced by an individual in the course of their employment, business, or profession and the collection is consistent with the purposes for which the information was produced</li>\n            <li>If the collection is solely for journalistic, artistic, or literary purposes</li>\n            <li>If the information is publicly available and is specified by the regulations</li>\n        </ul>\n    </app-card>\n\n    <app-card title=\"4. When and with whom do we share your personal information?\" anchor=\"when-and-whom\">\n        <p>In Short: We may share information in specific situations described in this section and/or with the following third\n            parties.</p>\n\n        <p>We may need to share your personal information in the following situations:</p>\n\n        <ul>\n            <li><strong>Business Transfers.</strong> We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.</li>\n            <li><strong>Other Users.</strong> When you share personal information (for example, by posting comments, contributions, or other content to the Services) or otherwise interact with public areas of the Services, such personal information may be viewed by all users and may be publicly made available outside the Services in perpetuity. Similarly, other users will be able to view descriptions of your activity, communicate with you within our Services, and view your profile.</li>\n        </ul>\n    </app-card>\n\n    <app-card title=\"5. How long do we keep your information?\" anchor=\"how-long\">\n        <p>\n            In Short: We keep your information for as long as necessary to fulfill the purposes outlined in this privacy notice unless otherwise required by law.</p>\n        \n        <p>We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements). No purpose in this notice will require us keeping your personal information for longer than the period of time in which users have an account with us.</p>\n\n        <p>When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymize such information, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.</p>\n    </app-card>\n\n    <app-card title=\"6. How do we keep your information safe?\" anchor=\"info-safe\">\n        <p>In Short: We aim to protect your personal information through a system of organizational and technical security measures.</p>\n\n        <p>We have implemented appropriate and reasonable technical and organizational security measures designed to protect the security of any personal information we process. However, despite our safeguards and efforts to secure your information, no electronic transmission over the Internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorized third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Although we will do our best to protect your personal information, transmission of personal information to and from our Services is at your own risk. You should only access the Services within a secure environment.</p>\n    </app-card>\n\n    <app-card title=\"7. Do we collect information from minors?\" anchor=\"minors\">\n        <p>In Short: We do not knowingly collect data from or market to children under 18 years of age.\n        </p>\n\n        <p>We do not knowingly solicit data from or market to children under 18 years of age. By using the Services, you represent that you are at least 18 or that you are the parent or guardian of such a minor and consent to such minor dependent’s use of the Services. If we learn that personal information from users less than 18 years of age has been collected, we will deactivate the account and take reasonable measures to promptly delete such data from our records. If you become aware of any data we may have collected from children under age 18, please contact us at <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a>.</p>\n    </app-card>\n\n    <app-card title=\"8. What are your privacy rights?\" anchor=\"privacy-rights\">\n        <p>In Short: In some regions, such as Canada, you have rights that allow you greater access to and control over your personal information. You may review, change, or terminate your account at any time.</p>\n\n        <p>In some regions (like Canada), you have certain rights under applicable data protection laws. These may include the right (i) to request access and obtain a copy of your personal information, (ii) to request rectification or erasure; (iii) to restrict the processing of your personal information; (vi) if applicable, to data portability; and (vii) not to be subject to automated decision-making. In certain circumstances, you may also have the right to object to the processing of your personal information. You can make such a request by contacting us by using the contact details provided in the section \"<a href=\"TODO\">How can you contact us about this notice?</a>\" below.</p>\n\n        <p>We will consider and act upon any request in accordance with applicable data protection laws.</p>\n\n        <p>Withdrawing your consent: If we are relying on your consent to process your personal information, which may be express and/or implied consent depending on the applicable law, you have the right to withdraw your consent at any time. You can withdraw your consent at any time by contacting us by using the contact details provided in the section \"<a href=\"TODO\">How can you contact us about this notice?</a>\" below.</p>\n\n        <p>\n            However, please note that this will not affect the lawfulness of the processing before its withdrawal nor, when applicable law allows, will it affect the processing of your personal information conducted in reliance on lawful processing grounds other than consent.</p>\n\n        <h3>Account Information</h3>\n\n        <p>If you would at any time like to review or change the information in your account or terminate your account, you can: Log in to your account settings and update your user account.</p>\n\n        <p>Upon your request to terminate your account, we will deactivate or delete your account and information from our active databases. However, we may retain some information in our files to prevent fraud, troubleshoot problems, assist with any investigations, enforce our legal terms and/or comply with applicable legal requirements.</p>\n    </app-card>\n\n    <app-card title=\"9. Controls for Do-Not-Track features\" anchor=\"dnt\">\n        <p>Most web browsers and some mobile operating systems and mobile applications include a Do-Not-Track (\"DNT\") feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. At this stage no uniform technology standard for recognizing and implementing DNT signals has been finalized. As such, we do not currently respond to DNT browser signals or any other mechanism that automatically communicates your choice not to be tracked online. If a standard for online tracking is adopted that we must follow in the future, we will inform you about that practice in a revised version of this privacy notice.</p>\n    </app-card>\n\n    <app-card title=\"10. Do we make updates to this notice?\" anchor=\"updates\">\n        <p>In Short: Yes, we will update this notice as necessary to stay compliant with relevant laws.</p>\n        <p>We may update this privacy notice from time to time. The updated version will be indicated by an updated \"Revised\" date and the updated version will be effective as soon as it is accessible. If we make material changes to this privacy notice, we may notify you either by prominently posting a notice of such changes or by directly sending you a notification. We encourage you to review this privacy notice frequently to be informed of how we are protecting your information.</p>\n    </app-card>\n\n    <app-card title=\"11. How can you contact us about this notice?\" anchor=\"contact\">\n        <p>If you have questions or comments about this notice, you may email us at <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n    </app-card>\n\n    <app-card title=\"12. How can you review, update, or delete the data we collect from you?\" anchor=\"review-data\">\n        <p>Based on the applicable laws of your country, you may have the right to request access to the personal information we collect from you, change that information, or delete it. To request to review, update, or delete your personal information, please contact us at <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n    </app-card>\n</app-about-layout>\n\n<!-- This privacy policy was created using Termly's <a href=\"https://termly.io/products/privacy-policy-generator/\">Privacy Policy Generator</a>. -->"
        },
        {
            "name": "ReportUserModalComponent",
            "id": "component-ReportUserModalComponent-e48576cac021a8891620844cdded5bb288184c6eb601821690f234770374c065073a7b7ef19155cb406b6ceb6339710912c79a32ecbf99c736da5047fb0c223a",
            "file": "src/modules/moderation/components/report-user-modal/report-user-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-report-user-modal",
            "styleUrls": [
                "./report-user-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./report-user-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123,
                        146
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n        reason: new FormControl('', [\n            Validators.required,\n            Validators.minLength(1),\n        ]),\n        description: new FormControl('', []),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "reasons",
                    "defaultValue": "REPORT_REASONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { REPORT_REASONS } from '../../../modals/constants/reports';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ModerationService } from '../../services/moderation.service';\n\n@Component({\n    selector: 'app-report-user-modal',\n    templateUrl: './report-user-modal.component.html',\n    styleUrls: ['./report-user-modal.component.scss'],\n})\nexport class ReportUserModalComponent {\n    form: FormGroup = new FormGroup({\n        reason: new FormControl('', [\n            Validators.required,\n            Validators.minLength(1),\n        ]),\n        description: new FormControl('', []),\n    });\n    reasons = REPORT_REASONS;\n\n    constructor(\n        private readonly dialogRef: DialogRef<ReportUserModalComponent>,\n        @Inject(MAT_DIALOG_DATA)\n        public readonly data: { userId: number; userName: string },\n        private readonly moderationService: ModerationService,\n    ) {}\n\n    onSubmit() {\n        if (this.form.valid) {\n            this.moderationService\n                .sendReport(\n                    this.data.userId,\n                    this.form.value.reason,\n                    this.form.value.description,\n                )\n                .subscribe(() => {\n                    this.dialogRef.close();\n                });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.description {\n    padding-bottom: 24px;\n    opacity: 0.55;\n    font-style: italic;\n    display: block;\n}\n\nmat-dialog-content {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n}\n\nmat-dialog-actions {\n    display: flex;\n    gap: 12px;\n    justify-content: flex-end;\n    padding: 0 24px 20px 24px;\n\n    .modal-button {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        appearance: none;\n        background: none;\n        border: solid 1px rgb(240, 240, 240);\n        font: inherit;\n        padding: 8px 18px;\n        border-radius: 6px;\n        font-size: 1.2em;\n        font-weight: 500;\n        box-sizing: border-box;\n\n        i {\n            font-size: 0.9em;\n        }\n\n        &--color {\n            background: linear-gradient(90deg, var(--theme-main), rgba(var(--theme-main-rgb), 0.6));\n            color: var(--theme-main-contrast);\n            border: none;\n        }\n    }\n}",
                    "styleUrl": "./report-user-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<ReportUserModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<ReportUserModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Signaler un utilisateur</h2>\n<form [formGroup]=\"form\" (submit)=\"onSubmit()\">\n    <mat-dialog-content>\n        <p class=\"description\">Signaler {{ data.userName }} ? Notre équipe de modération se chargera de réviser la situation.</p>\n        \n        <mat-form-field>\n            <mat-label><i class=\"fas fa-flag\"></i> Raison du signalement</mat-label>\n            <mat-select formControlName=\"reason\">\n                <mat-option value=\"\" disabled>Choisir une raison</mat-option>\n                <mat-option *ngFor=\"let reason of reasons\" [value]=\"reason\">{{ reason }}</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-flag\"></i> Description du signalement</mat-label>\n            <textarea formControlName=\"description\" rows=\"5\" formControlName=\"description\" matInput></textarea>\n        </mat-form-field>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n        <a \n            mat-dialog-close\n            class=\"modal-button interactable--large\"\n        >Annuler</a>\n        <button \n            type=\"submit\"\n            class=\"modal-button modal-button--color interactable--large\"\n        >Signaler</button>\n    </mat-dialog-actions>\n</form>"
        },
        {
            "name": "RequestPasswordResetPageComponent",
            "id": "component-RequestPasswordResetPageComponent-104a4b94024e89dfb118314d67d2317348c3a8c87d0e77588da83c266630a40d374cef729d7131460752283cc6beed3084d1099e71e3064a8d7da50de3a4464b",
            "file": "src/modules/authentication/pages/request-password-reset-page/request-password-reset-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-request-password-reset-page",
            "styleUrls": [
                "./request-password-reset-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./request-password-reset-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "requestResetPasswordForm",
                    "defaultValue": "new FormGroup({\n        email: new FormControl('', [Validators.required, Validators.email]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sent",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { AuthenticationService } from '../../services/authentication-service/authentication.service';\n\n@Component({\n    selector: 'app-request-password-reset-page',\n    templateUrl: './request-password-reset-page.component.html',\n    styleUrls: ['./request-password-reset-page.component.scss'],\n})\nexport class RequestPasswordResetPageComponent {\n    requestResetPasswordForm = new FormGroup({\n        email: new FormControl('', [Validators.required, Validators.email]),\n    });\n    loading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    sent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n    ) {}\n\n    onSubmit() {\n        this.loading.next(true);\n        this.authenticationService\n            .requestPasswordReset(\n                this.requestResetPasswordForm.value.email ?? '',\n            )\n            .subscribe({\n                next: () => {\n                    this.loading.next(false);\n                    this.requestResetPasswordForm.reset();\n                    this.sent.next(true);\n                },\n                error: () => {\n                    this.requestResetPasswordForm.setErrors({\n                        unknownError: true,\n                    });\n                    this.loading.next(false);\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./request-password-reset-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-authentication-layout\n    name=\"Réinitialiser le mot de passe\"\n    [formGroup]=\"requestResetPasswordForm\"\n    [formsErrors]=\"{\n        unknownError: 'Un erreur est survenu',\n    }\"\n    [loading]=\"loading | async\"\n    (formSubmit)=\"onSubmit()\"\n    [disabled]=\"sent | async\"\n>\n    <ng-container auth-form-field>\n        <ng-container *ngIf=\"!(sent | async); else sentMessage\">\n            <mat-form-field>\n                <mat-label><i class=\"fas fa-envelope\"></i> Email</mat-label>\n                <input formControlName=\"email\" matInput>\n                <mat-error *ngIf=\"requestResetPasswordForm.controls.email.errors?.['required']\">Le email est requis</mat-error>\n                <mat-error *ngIf=\"requestResetPasswordForm.controls.email.errors?.['email']\">Doit être un email valide</mat-error>\n            </mat-form-field>\n        </ng-container>\n\n        <ng-template #sentMessage>\n            <p>Un email vous a été envoyé avec le lien pour réinitialiser le mot de passe.</p>\n        </ng-template>\n    </ng-container>\n</app-authentication-layout>"
        },
        {
            "name": "SignupPageComponent",
            "id": "component-SignupPageComponent-834e440ca041bcfebf7b7b8afdd3d13f84434ab5d208beba614469f1cf0ace7c9be136909206a0702f3bfa4c6d518653b8e42b2d2fde7750f26a9bc443394c92",
            "file": "src/modules/authentication/pages/signup-page/signup-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup-page",
            "styleUrls": [
                "./signup-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "signupForm",
                    "defaultValue": "new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            Validators.email,\n            this.disposableEmailValidator,\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.pattern(/.+[a-z]+.+/), // letters,\n            Validators.pattern(/.+[0-9]+.+/), // numbers,\n            Validators.pattern(/.+[!@#$%?&*()-_=+/\\\\|,.;:^¨~<>[\\]{}]+.+/), // symbols,\n            Validators.minLength(8),\n        ]),\n        confirmPassword: new FormControl('', [\n            Validators.required,\n            confirmPasswordValidator(),\n        ]),\n        privacyPolicy: new FormControl(false, [Validators.requiredTrue]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "disposableEmailValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ disposableEmail: boolean; }",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n    AbstractControl,\n    FormControl,\n    FormGroup,\n    Validators,\n} from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { AuthenticationService } from '../../services/authentication-service/authentication.service';\nimport { AuthenticationUser } from 'common/models/authentication';\nimport { HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\nimport { confirmPasswordValidator } from '../../validators/confirm-password-validator';\nimport disposableEmailDomains from 'disposable-email-domains';\n\n@Component({\n    selector: 'app-signup-page',\n    templateUrl: './signup-page.component.html',\n    styleUrls: ['./signup-page.component.scss'],\n})\nexport class SignupPageComponent {\n    signupForm = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            Validators.email,\n            this.disposableEmailValidator,\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.pattern(/.+[a-z]+.+/), // letters,\n            Validators.pattern(/.+[0-9]+.+/), // numbers,\n            Validators.pattern(/.+[!@#$%?&*()-_=+/\\\\|,.;:^¨~<>[\\]{}]+.+/), // symbols,\n            Validators.minLength(8),\n        ]),\n        confirmPassword: new FormControl('', [\n            Validators.required,\n            confirmPasswordValidator(),\n        ]),\n        privacyPolicy: new FormControl(false, [Validators.requiredTrue]),\n    });\n    loading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n    ) {}\n\n    onSubmit() {\n        this.loading.next(true);\n\n        this.authenticationService\n            .signup(this.signupForm.value as AuthenticationUser)\n            .subscribe({\n                next: () => {\n                    this.loading.next(false);\n                },\n                error: (e: HttpErrorResponse) => {\n                    if (e.status === HttpStatusCode.Conflict) {\n                        this.signupForm.setErrors({ conflict: true });\n                    } else if (e.status === HttpStatusCode.Locked) {\n                        this.signupForm.setErrors({ accountLocked: true });\n                    } else {\n                        this.signupForm.setErrors({ unknownError: true });\n                    }\n                    this.loading.next(false);\n                },\n            });\n    }\n\n    private disposableEmailValidator(control: AbstractControl) {\n        if (\n            control.value &&\n            disposableEmailDomains.find((d) =>\n                control.value.trim().toLowerCase().endsWith(d),\n            )\n        ) {\n            return { disposableEmail: true };\n        }\n\n        return null;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils';\n@import '../../../../styles/variables';\n\n.link-text {\n    margin: 0;\n    opacity: 0.75;\n    text-align: center;\n\n    a {\n        color: inherit;\n    }\n}",
                    "styleUrl": "./signup-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-authentication-layout\n    name=\"S'inscrire\"\n    description=\"Rejoignez-nous pour élargir votre cercle social ou trouver l'amour sur le campus.\"\n    [formGroup]=\"signupForm\"\n    [formsErrors]=\"{\n        conflict: 'Ce email est déjà utilisé',\n        accountLocked: 'Le compte a été bloqué ou suspendu. Veuillez contacter',\n        unknownError: 'Un erreur est survenu',\n    }\"\n    [loading]=\"loading | async\"\n    (formSubmit)=\"onSubmit()\"\n>\n    <ng-container auth-form-field>\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-envelope\"></i> Email</mat-label>\n            <input formControlName=\"email\" matInput>\n            <mat-error *ngIf=\"signupForm.controls.email.errors?.['required']\">Le email est requis</mat-error>\n            <mat-error *ngIf=\"signupForm.controls.email.errors?.['email']\">Doit être un email valide</mat-error>\n            <mat-error *ngIf=\"signupForm.controls.email.errors?.['disposableEmail']\">Doit être unn email authentique</mat-error>\n        </mat-form-field>\n    \n        <mat-form-field>\n            <mat-label><i class=\"fas fa-key\"></i> Mot de passe</mat-label>\n            <input formControlName=\"password\" type=\"password\" matInput>\n            <mat-error *ngIf=\"signupForm.controls.password.errors?.['required']\">Le mot de passe est requis</mat-error>\n            <mat-error *ngIf=\"signupForm.controls.password.errors?.['minlength']\">Doit contenir minimum 8 caractères</mat-error>\n            <mat-error *ngIf=\"signupForm.controls.password.errors?.['pattern']\">Doit contenir une lettre, un nombre et un caractère spécial</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-key\"></i> Confirmer le mot de passe</mat-label>\n            <input formControlName=\"confirmPassword\" type=\"password\" matInput>\n            <mat-error *ngIf=\"signupForm.controls.confirmPassword.errors?.['passwordMismatch']\">Le mot de passe ne correspond pas</mat-error>\n        </mat-form-field>\n\n        <mat-checkbox formControlName=\"privacyPolicy\">\n            En cliquant sur le bouton 'Créer mon compte', vous confirmez avoir lu et accepté nos <a href=\"/about/rules/policies/privacy-policy\" target=\"_blank\">Politiques de confidentialité</a>, nos <a href=\"/about/rules/policies/terms-and-conditions\" target=\"_blank\">Termes et conditions</a>, ainsi que notre <a href=\"/about/rules/policies/acceptable-use-policy\" target=\"_blank\">Politique d'utilisation acceptable</a>.\n        </mat-checkbox>\n        <br>\n        <mat-error *ngIf=\"signupForm.dirty && signupForm.controls.privacyPolicy.errors?.['required']\">Vous devez lire et accepter les politiques avant de continuer.</mat-error>\n    </ng-container>\n\n    <ng-container auth-extra>\n        <app-card>\n            <p class=\"link-text\">Vous avez déjà un compte ? <a routerLink=\"/login\">Connectez vous</a> !</p>\n        </app-card>\n    </ng-container>\n</app-authentication-layout>"
        },
        {
            "name": "StatusPageComponent",
            "id": "component-StatusPageComponent-25f84891df8e976f958ba40af219f432fc9906d19c0408602501941f02fbfdae2d344817eb172010407342f1ed6ad706bf4baf6c891cdd0689867a58614c549a",
            "file": "src/components/status-page/status-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-page",
            "styleUrls": [
                "./status-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-status-page',\n    templateUrl: './status-page.component.html',\n    styleUrls: ['./status-page.component.scss'],\n})\nexport class StatusPageComponent {\n    @Input() message: string = '';\n    @Input() isLoading: boolean = true;\n    @Input() isError: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utils';\n\n.status-page {\n    @include no-select;\n    \n    height: 100%;\n    width: 100%;\n    padding: 24px;\n    box-sizing: border-box;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    &__content {\n        display: flex;\n        flex-direction: column;\n        gap: 24px;\n        align-items: center;\n\n        &__logo {\n            position: relative;\n            width: 100%;\n            max-width: 100px;\n            display: block;\n        }\n\n        &__message {\n            font-size: 1.2rem;\n            font-weight: 500;\n            text-align: center;\n            font-style: italic;\n            opacity: 0.55;\n        }\n    }\n\n    &--loading {\n        .status-page__content {\n            &__logo {\n                @keyframes pulse {\n                    0% {\n                        transform: scale(1);\n                    }\n                    50% {\n                        transform: scale(1.1);\n                    }\n                    100% {\n                        transform: scale(1);\n                    }\n                }\n    \n                animation: pulse 2s ease-in-out infinite;\n            }\n        }\n    }\n\n    &--error {\n        .status-page__content {\n            &__message {\n                color: tomato;\n                opacity: 1;\n            }\n        }\n    }\n}",
                    "styleUrl": "./status-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"status-page\" [ngClass]=\"{ 'status-page--loading': isLoading, 'status-page--error': isError }\">\n    <div class=\"status-page__content\">\n        <img class=\"status-page__content__logo\" src=\"assets/logo.svg\" alt=\"Logo\">\n        <div class=\"status-page__content__message\">\n            <p>{{message}}</p>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "SwipingPageComponent",
            "id": "component-SwipingPageComponent-caef4e225288bacf7608a5caa475ebab948245efee24d2a20859d927db42dfed6d85ea52cf09f6f05375bc1dc45654d27921280108c553f6f641726e8c146a34",
            "file": "src/modules/matching/pages/swiping-page/swiping-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-swiping-page",
            "styleUrls": [
                "./swiping-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./swiping-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableUsers",
                    "defaultValue": "new BehaviorSubject<PublicUserResultClass[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PublicUserResultClass[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "dislikeUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "likeUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onExcludeUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "PublicUserResultClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest, timeout } from 'rxjs';\nimport { PublicUserResultClass } from '../../models/public-user-result';\nimport { PublicProfileService } from '../../services/public-profile-service/public-profile.service';\nimport { MatchingService } from '../../services/matching-service/matching.service';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\nimport { SessionService } from 'src/modules/authentication/services/session-service/session.service';\n\n@Component({\n    selector: 'app-swiping-page',\n    templateUrl: './swiping-page.component.html',\n    styleUrls: ['./swiping-page.component.scss'],\n})\nexport class SwipingPageComponent {\n    availableUsers: BehaviorSubject<PublicUserResultClass[]> =\n        new BehaviorSubject<PublicUserResultClass[]>([]);\n    loading = new BehaviorSubject<boolean>(true);\n\n    constructor(\n        private readonly publicProfileService: PublicProfileService,\n        private readonly matchingService: MatchingService,\n        private readonly sessionService: SessionService,\n        private readonly validationService: ValidationService,\n    ) {\n        combineLatest([\n            this.sessionService.isLoggedIn(),\n            this.validationService.userValid,\n        ]).subscribe(([isLoggedIn, userValid]) => {\n            if (isLoggedIn && userValid) {\n                this.fetchNext();\n            } else {\n                this.availableUsers.next([]);\n            }\n        });\n    }\n\n    get userValid() {\n        return this.validationService.userValid;\n    }\n\n    get userValidMessage() {\n        return this.validationService.userValidMessage;\n    }\n\n    get availableUsersDelayed() {\n        return this.availableUsers.pipe(timeout(100));\n    }\n\n    fetchNext() {\n        this.publicProfileService.getAvailableUsers().subscribe((users) => {\n            this.availableUsers.next([...this.availableUsers.value, ...users]);\n            this.loading.next(false);\n        });\n    }\n\n    likeUser(user: PublicUserResultClass) {\n        this.removeUser(user);\n        this.matchingService.likeUser(user.currentValue.userId).subscribe();\n    }\n\n    dislikeUser(user: PublicUserResultClass) {\n        this.removeUser(user);\n        this.matchingService.dislikeUser(user.currentValue.userId).subscribe();\n    }\n\n    onExcludeUser(user: PublicUserResultClass) {\n        this.removeUser(user);\n    }\n\n    private removeUser(user: PublicUserResultClass) {\n        this.availableUsers.next(\n            this.availableUsers.value.filter((u) => u !== user),\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n@import '../../../../styles/utils';\n\n.profiles-container {\n    height: 100%;\n    width: 100%;\n    position: relative;\n}\n\n.profile-container {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 24px;\n    box-sizing: border-box;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n\n    &:first-child {\n        z-index: 2;\n    }\n\n    .profile-content {\n        display: grid;\n        grid-template-rows: minmax(0, 1fr) auto;\n        grid-template-columns: minmax(0, 1fr);\n        gap: 24px;\n        height: 100%;\n        width: 100%;\n        max-width: 400px;\n        align-items: center;\n        justify-content: center;\n\n        app-user-profile-card {\n            flex-grow: 1;\n            width: 100%;\n            max-height: 600px;\n            height: 100%;\n        }\n    }\n\n    &__swipe-btn-container {\n        display: flex;\n        justify-content: space-around;\n        gap: 24px;\n        width: 100%;\n    }\n    \n    &__swipe-btn {\n        appearance: none;\n        background: var(--theme-background);\n        border: solid 1px rgb(240, 240, 240);\n        font-size: 2em;\n        height: 56px;\n        width: 56px;\n        border-radius: 48px;\n        cursor: pointer;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        box-shadow: $default-shadow;\n\n        &--like {\n            color: var(--theme-main);\n            i {\n                padding-top: 5px;\n            }\n        }\n\n        &--dislike {\n            color: tomato;\n        }\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 12px;\n\n        .profile-content {\n            gap: 12px;\n        }\n    }\n}\n\n.no-profiles {\n    @include no-select;\n\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 24px;\n    box-sizing: border-box;\n\n    p {\n        text-align: center;\n        font-style: italic;\n        font-size: 1.15em;\n        font-weight: 500;\n        opacity: 0.55;\n    }\n}",
                    "styleUrl": "./swiping-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "publicProfileService",
                        "type": "PublicProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matchingService",
                        "type": "MatchingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValid": {
                    "name": "userValid",
                    "getSignature": {
                        "name": "userValid",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "userValidMessage": {
                    "name": "userValidMessage",
                    "getSignature": {
                        "name": "userValidMessage",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                },
                "availableUsersDelayed": {
                    "name": "availableUsersDelayed",
                    "getSignature": {
                        "name": "availableUsersDelayed",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"availableUsers | async; let availableUsers\">\n    <ng-container *ngIf=\"(userValid | async) === false\">\n        <div class=\"no-profiles\">\n            <p>{{ userValidMessage | async }}</p>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"availableUsers.length == 0 && !(loading | async) && (userValid | async)\">\n        <div class=\"no-profiles\">\n            <p>Aucun profil disponible pour le moment. Revenez bientôt !</p>\n        </div>\n    </ng-container>\n\n    <div class=\"profiles-container\">\n        <ng-container *ngFor=\"let user of availableUsers; let index = index\">\n            <div class=\"profile-container\" *ngIf=\"index <= 1\">\n                <div class=\"profile-content\">\n                    <ng-container *ngIf=\"user.value| async; let userValue\">\n                        <app-user-profile-card\n                            [userProfile]=\"userValue\"\n                            (excludeUser)=\"onExcludeUser(user)\"\n                            (likeUser)=\"likeUser(user)\"\n                            (dislikeUser)=\"dislikeUser(user)\"\n                        ></app-user-profile-card>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    </div>\n</ng-container>"
        },
        {
            "name": "TermsAndConditionsComponent",
            "id": "component-TermsAndConditionsComponent-1dd00da07e50acd1fe9cb9b103e247f3814b333b8bda5ded3d0e583d09078ba938f05a386a315eb48c3444759b28c7bfd68072b4140608d9776529e399cd4a45",
            "file": "src/modules/about/pages/application-rules/terms-and-conditions/terms-and-conditions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-terms-and-conditions",
            "styleUrls": [
                "./terms-and-conditions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./terms-and-conditions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-terms-and-conditions',\n    templateUrl: './terms-and-conditions.component.html',\n    styleUrls: ['./terms-and-conditions.component.scss'],\n})\nexport class TermsAndConditionsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./terms-and-conditions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-about-layout title=\"Terms and conditions\" backLink=\"/about/rules/policies\">\n    <app-card>\n        <p><b>Last updated October 04, 2023</b></p>\n    </app-card>\n\n    <app-card title=\"Agreement to our legal terms\">\n        <p>We are PolyTinder.</p>\n\n        <p>We operate , as well as any other related products and services that refer or link to these legal\n            terms (the \"Legal Terms\") (collectively, the \"Services\").</p>\n\n        <p>You can contact us by email at <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n\n        <p>These Legal Terms constitute a legally binding agreement made between you, whether\n            personally or on behalf of an entity (\"you\"), and PolyTinder, concerning your access to and use of the Services. You agree that by accessing the Services, you have read, understood, and agreed to be bound by all of these Legal Terms. IF YOU DO NOT AGREE WITH ALL OF THESE LEGAL TERMS, THEN YOU ARE EXPRESSLY PROHIBITED FROM USING THE SERVICES AND YOU MUST DISCONTINUE USE IMMEDIATELY.</p>\n\n        <p>Supplemental terms and conditions or documents that may be posted on the Services from time to time are hereby expressly incorporated herein by reference. We reserve the right, in our sole discretion, to make changes or modifications to these Legal Terms at any time and for any reason. We will alert you about any changes by updating the \"Last updated\" date of these Legal Terms, and you waive any right to receive specific notice of each such change. It is your responsibility to periodically review these Legal Terms to stay informed of updates. You will be subject to, and will be deemed to have been made aware of and to have accepted, the changes in any revised Legal Terms by your continued use of the Services after the date such revised Legal Terms are posted.</p>\n\n        <p>We recommend that you print a copy of these Legal Terms for your records.</p>\n    </app-card>\n\n    <app-card title=\"Table of content\" anchor=\"table-of-content\">\n        <ol>\n            <li><a href=\"/terms-and-conditions#our-services\">Our Services</a></li>\n            <li><a href=\"/terms-and-conditions#intellectual-property-rights\">Intellectual Property Rights</a></li>\n            <li><a href=\"/terms-and-conditions#user-rep\">User Representations</a></li>\n            <li><a href=\"/terms-and-conditions#prohibited\">Prohibited Activities</a></li>\n            <li><a href=\"/terms-and-conditions#user-generated-contributions\">User Generated Contributions</a></li>\n            <li><a href=\"/terms-and-conditions#contribution-license\">Contribution License</a></li>\n            <li><a href=\"/terms-and-conditions#services-management\">Services Management</a></li>\n            <li><a href=\"/terms-and-conditions#terms-and-termination\">Term and Termination</a></li>\n            <li><a href=\"/terms-and-conditions#modif-and-interruptions\">Modifications and Interruptions</a></li>\n            <li><a href=\"/terms-and-conditions#governing-law\">Governing Law</a></li>\n            <li><a href=\"/terms-and-conditions#dispute-resolution\">Dispute Resolution</a></li>\n            <li><a href=\"/terms-and-conditions#corrections\">Corrections</a></li>\n            <li><a href=\"/terms-and-conditions#disclaimer\">Disclaimer</a></li>\n            <li><a href=\"/terms-and-conditions#limitations-of-liability\">Limitations of Liability</a></li>\n            <li><a href=\"/terms-and-conditions#indemnification\">Indemnification</a></li>\n            <li><a href=\"/terms-and-conditions#user-data\">User Data</a></li>\n            <li><a href=\"/terms-and-conditions#elec-comm\">Electronic Communications, Transactions, and Signatures</a></li>\n            <li><a href=\"/terms-and-conditions#miscellaneous\">Miscellaneous</a></li>\n            <li><a href=\"/terms-and-conditions#contact-us\">Contact Us</a></li>\n        </ol>\n    </app-card>\n\n    <app-card title=\"1. Our Services\" anchor=\"our-services\">\n        <p>\n            The information provided when using the Services is not intended for distribution to or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to law or regulation or which would subject us to any registration requirement within such jurisdiction or country. Accordingly, those persons who choose to access the Services from other locations do so on their own initiative and are solely responsible for compliance with local laws, if and to the extent local laws are applicable.\n            </p>\n    </app-card>\n\n    <app-card title=\"2. Intellectual Property Rights\" anchor=\"intellectual-property-rights\">\n        <h3>Our intellectual property</h3>\n\n        <p>We are the owner or the licensee of all intellectual property rights in our Services, including all source code, databases, functionality, software, website designs, audio, video, text, photographs, and graphics in the Services (collectively, the \"Content\"), as well as the trademarks, service marks, and logos contained therein (the \"Marks\").\n        </p>\n\n        <p>Our Content and Marks are protected by copyright and trademark laws (and various other intellectual property rights and unfair competition laws) and treaties in the United States and around the world.</p>\n\n        <p>The Content and Marks are provided in or through the Services \"AS IS\" for your personal, non- commercial use or internal business purpose only.</p>\n\n        <h3>Your use of our Services</h3>\n\n        <p>Subject to your compliance with these Legal Terms, including the \"PROHIBITED ACTIVITIES\" section below, we grant you a non-exclusive, non-transferable, revocable license to:</p>\n\n        <ul>\n            <li>access the Services; and</li>\n            <li>download or print a copy of any portion of the Content to which you have properly gained access.</li>\n        </ul>\n\n        <p>solely for your personal, non-commercial use or internal business purpose.</p>\n\n        <p>Except as set out in this section or elsewhere in our Legal Terms, no part of the Services and no Content or Marks may be copied, reproduced, aggregated, republished, uploaded, posted, publicly displayed, encoded, translated, transmitted, distributed, sold, licensed, or otherwise exploited for any commercial purpose whatsoever, without our express prior written permission.</p>\n\n        <p>If you wish to make any use of the Services, Content, or Marks other than as set out in this section or elsewhere in our Legal Terms, please address your request to: <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a>. If we ever grant you the permission to post, reproduce, or publicly display any part of our Services or Content, you must identify us as the owners or licensors of the Services, Content, or Marks and ensure that any copyright or proprietary notice appears or is visible on posting, reproducing, or displaying our Content.</p>\n\n        <p>We reserve all rights not expressly granted to you in and to the Services, Content, and Marks.</p>\n\n        <p>Any breach of these Intellectual Property Rights will constitute a material breach of our Legal Terms and your right to use our Services will terminate immediately.</p>\n\n        <h3>Your submissions</h3>\n\n        <p>Please review this section and the \"PROHIBITED ACTIVITIES\" section carefully prior to using our Services to understand the (a) rights you give us and (b) obligations you have when you post or upload any content through the Services.\n        </p>\n\n        <p>Submissions: By directly sending us any question, comment, suggestion, idea, feedback, or other information about the Services (\"Submissions\"), you agree to assign to us all intellectual property rights in such Submission. You agree that we shall own this Submission and be entitled to its unrestricted use and dissemination for any lawful purpose, commercial or otherwise, without acknowledgment or compensation to you.</p>\n\n        <p>You are responsible for what you post or upload: By sending us Submissions through any part of the Services you:</p>\n\n        <ul>\n            <li>Confirm that you have read and agree with our \"PROHIBITED ACTIVITIES\" and will not post, send, publish, upload, or transmit through the Services any Submission that is illegal, harassing, hateful, harmful, defamatory, obscene, bullying, abusive, discriminatory, threatening to any person or group, sexually explicit, false, inaccurate, deceitful, or misleading;</li>\n            <li>To the extent permissible by applicable law, waive any and all moral rights to any such Submission;</li>\n            <li>Warrant that any such Submission are original to you or that you have the necessary rights and licenses to submit such Submissions and that you have full authority to grant us the above-mentioned rights in relation to your Submissions; and</li>\n            <li>Warrant and represent that your Submissions do not constitute confidential information.</li>\n        </ul>\n\n        <p>You are solely responsible for your Submissions and you expressly agree to reimburse us for any and all losses that we may suffer because of your breach of (a) this section, (b) any third party’s intellectual property rights, or (c) applicable law.\n        </p>\n    </app-card>\n\n    <app-card title=\"3. User Representations\" anchor=\"user-rep\">\n        <p>By using the Services, you represent and warrant that: (1) you have the legal capacity and you agree to comply with these Legal Terms; (2) you are not a minor in the jurisdiction in which you reside; (3) you will not access the Services through automated or non-human means, whether through a bot, script or otherwise; (4) you will not use the Services for any illegal or unauthorized purpose; and (5) your use of the Services will not violate any applicable law or regulation.</p>\n\n        <p>If you provide any information that is untrue, inaccurate, not current, or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Services (or any portion thereof).</p>\n    </app-card>\n\n    <app-card title=\"4. Prohibited Activities\" anchor=\"prohibited\">\n        <p>You may not access or use the Services for any purpose other than that for which we make the Services available. The Services may not be used in connection with any commercial endeavors except those that are specifically endorsed or approved by us.</p>\n\n        <p>As a user of the Services, you agree not to:</p>\n\n        <ul>\n            <li>Systematically retrieve data or other content from the Services to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us.</li>\n            <li>Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords.</li>\n            <li>Circumvent, disable, or otherwise interfere with security-related features of the Services, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Services and/or the Content contained therein.</li>\n            <li>Disparage, tarnish, or otherwise harm, in our opinion, us and/or the Services.</li>\n            <li>Use any information obtained from the Services in order to harass, abuse, or harm another person.</li>\n            <li>Make improper use of our support services or submit false reports of abuse or misconduct.</li>\n            <li>Use the Services in a manner inconsistent with any applicable laws or regulations. Engage in unauthorized framing of or linking to the Services.</li>\n            <li>Upload or transmit (or attempt to upload or to transmit) viruses, Trojan horses, or other material, including excessive use of capital letters and spamming (continuous posting of repetitive text), that interferes with any party’s uninterrupted use and enjoyment of the Services or modifies, impairs, disrupts, alters, or interferes with the use, features, functions, operation, or maintenance of the Services.</li>\n            <li>Engage in any automated use of the system, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools.</li>\n            <li>Delete the copyright or other proprietary rights notice from any Content.</li>\n            <li>Attempt to impersonate another user or person or use the username of another user. Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\"gifs\"), 1×1 pixels, web bugs, cookies, or other similar devices (sometimes referred to as \"spyware\" or \"passive collection mechanisms\" or \"pcms\").</li>\n            <li>Interfere with, disrupt, or create an undue burden on the Services or the networks or services connected to the Services.</li>\n            <li>Harass, annoy, intimidate, or threaten any of our employees or agents engaged in providing any portion of the Services to you.</li>\n            <li>Attempt to bypass any measures of the Services designed to prevent or restrict access to the Services, or any portion of the Services.</li>\n            <li>Copy or adapt the Services' software, including but not limited to Flash, PHP, HTML, JavaScript, or other code.</li>\n            <li>Except as permitted by applicable law, decipher, decompile, disassemble, or reverse engineer any of the software comprising or in any way making up a part of the Services. Except as may be the result of standard search engine or Internet browser usage, use, launch, develop, or distribute any automated system, including without limitation, any spider, robot, cheat utility, scraper, or offline reader that accesses the Services, or use or launch any unauthorized script or other software.</li>\n            <li>Use a buying agent or purchasing agent to make purchases on the Services.</li>\n            <li>Make any unauthorized use of the Services, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses.</li>\n            <li>Use the Services as part of any effort to compete with us or otherwise use the Services and/or the Content for any revenue-generating endeavor or commercial enterprise.</li>\n        </ul>\n    </app-card>\n\n    <app-card title=\"5. User Generated Contributions\" anchor=\"user-generated-contributions\">\n        <p>\n            The Services does not offer users to submit or post content. We may provide you with the opportunity to create, submit, post, display, transmit, perform, publish, distribute, or broadcast content and materials to us or on the Services, including but not limited to text, writings, video, audio, photographs, graphics, comments, suggestions, or personal information or other material (collectively, \"Contributions\"). Contributions may be viewable by other users of the Services and through third-party websites.</p>\n    </app-card>\n\n    <app-card title=\"6. Contribution License\" anchor=\"contribution-license\">\n        <p>You and Services agree that we may access, store, process, and use any information and personal data that you provide and your choices (including settings).</p>\n\n        <p>By submitting suggestions or other feedback regarding the Services, you agree that we can use and share such feedback for any purpose without compensation to you.</p>\n\n        <p>We do not assert any ownership over your Contributions. You retain full ownership of all of your Contributions and any intellectual property rights or other proprietary rights associated with your Contributions. We are not liable for any statements or representations in your Contributions provided by you in any area on the Services. You are solely responsible for your Contributions to the Services and you expressly agree to exonerate us from any and all responsibility and to refrain from any legal action against us regarding your Contributions.</p>\n    </app-card>\n\n    <app-card title=\"7. Services management\" anchor=\"services-management\">\n        <p>We reserve the right, but not the obligation, to: (1) monitor the Services for violations of these Legal Terms; (2) take appropriate legal action against anyone who, in our sole discretion, violates the law or these Legal Terms, including without limitation, reporting such user to law enforcement authorities; (3) in our sole discretion and without limitation, refuse, restrict access to, limit the availability of, or disable (to the extent technologically feasible) any of your Contributions or any portion thereof; (4) in our sole discretion and without limitation, notice, or liability, to remove from the Services or otherwise disable all files and content that are excessive in size or are in any way burdensome to our systems; and (5) otherwise manage the Services in a manner designed to protect our rights and property and to facilitate the proper functioning of the Services.</p>\n    </app-card>\n\n    <app-card title=\"8. Term and termination\" anchor=\"terms-and-termination\">\n        <p>These Legal Terms shall remain in full force and effect while you use the Services. WITHOUT LIMITING ANY OTHER PROVISION OF THESE LEGAL TERMS, WE RESERVE THE RIGHT TO, IN OUR SOLE DISCRETION AND WITHOUT NOTICE OR LIABILITY, DENY ACCESS TO AND USE OF THE SERVICES (INCLUDING BLOCKING CERTAIN IP ADDRESSES), TO ANY PERSON FOR ANY REASON OR FOR NO REASON, INCLUDING WITHOUT LIMITATION FOR BREACH OF ANY REPRESENTATION, WARRANTY, OR COVENANT CONTAINED IN THESE LEGAL TERMS OR OF ANY APPLICABLE LAW OR REGULATION. WE MAY TERMINATE YOUR USE OR PARTICIPATION IN THE SERVICES OR DELETE ANY CONTENT OR INFORMATION THAT YOU POSTED AT ANY TIME, WITHOUT WARNING, IN OUR SOLE DISCRETION.</p>\n\n        <p>If we terminate or suspend your account for any reason, you are prohibited from registering and creating a new account under your name, a fake or borrowed name, or the name of any third party, even if you may be acting on behalf of the third party. In addition to terminating or suspending your account, we reserve the right to take appropriate legal action, including without limitation pursuing civil, criminal, and injunctive redress.</p>\n    </app-card>\n\n    <app-card title=\"9. Modifications and interruptions\" anchor=\"modif-and-interruptions\">\n        <p>We reserve the right to change, modify, or remove the contents of the Services at any time or for any reason at our sole discretion without notice. However, we have no obligation to update any information on our Services. We will not be liable to you or any third party for any modification, price change, suspension, or discontinuance of the Services.</p>\n\n        <p>We cannot guarantee the Services will be available at all times. We may experience hardware, software, or other problems or need to perform maintenance related to the Services, resulting in interruptions, delays, or errors. We reserve the right to change, revise, update, suspend, discontinue, or otherwise modify the Services at any time or for any reason without notice to you. You agree that we have no liability whatsoever for any loss, damage, or inconvenience caused by your inability to access or use the Services during any downtime or discontinuance of the Services. Nothing in these Legal Terms will be construed to obligate us to maintain and support the Services or to supply any corrections, updates, or releases in connection therewith.\n        </p>\n    </app-card>\n\n    <app-card title=\"10. Governing law\" anchor=\"governing-law\">\n        <p>These Legal Terms shall be governed by and defined following the laws of Canada. PolyTinder and yourself irrevocably consent that the courts of Canada shall have exclusive jurisdiction to resolve any dispute which may arise in connection with these Legal Terms.</p>\n    </app-card>\n\n    <app-card title=\"11. Dispute resolution\" anchor=\"dispute-resolution\">\n        <h3>Informal Negotiations</h3>\n\n        <p>these Legal Terms (each a \"Dispute\" and collectively, the \"Disputes\") brought by either you or us (individually, a \"Party\" and collectively, the \"Parties\"), the Parties agree to first attempt to negotiate any Dispute (except those Disputes expressly provided below) informally for at least 30 days before initiating arbitration. Such informal negotiations commence upon written notice from one Party to the other Party.\n        </p>\n\n        <h3>Binding Arbitration</h3>\n\n        <p>Any dispute arising out of or in connection with these Legal Terms, including any question regarding its existence, validity, or termination, shall be referred to and finally resolved by the International Commercial Arbitration Court under the European Arbitration Chamber (Belgium, Brussels, Avenue Louise, 146) according to the Rules of this ICAC, which, as a result of referring to it, is considered as the part of this clause. The seat, or legal place, or arbitration shall be Canada. The language of the proceedings shall be french. The governing law of these Legal Terms shall be substantive law of Canada.</p>\n\n        <h3>Restrictions</h3>\n\n        <p>The Parties agree that any arbitration shall be limited to the Dispute between the Parties individually. To the full extent permitted by law, (a) no arbitration shall be joined with any other proceeding; (b) there is no right or authority for any Dispute to be arbitrated on a class-action basis or to utilize class action procedures; and (c) there is no right or authority for any Dispute to be brought in a purported representative capacity on behalf of the general public or any other persons.\n        </p>\n\n        <h3>Exceptions to Informal Negotiations and Arbitration</h3>\n\n        <p>The Parties agree that the following Disputes are not subject to the above provisions concerning informal negotiations binding arbitration: (a) any Disputes seeking to enforce or protect, or concerning the validity of, any of the intellectual property rights of a Party; (b) any Dispute related to, or arising from, allegations of theft, piracy, invasion of privacy, or unauthorized use; and (c) any claim for injunctive relief. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court.</p>\n    </app-card>\n\n    <app-card title=\"12. Corrections\" anchor=\"corrections\">\n        <p>There may be information on the Services that contains typographical errors, inaccuracies, or omissions, including descriptions, pricing, availability, and various other information. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update the information on the Services at any time, without prior notice.</p>\n    </app-card>\n\n    <app-card title=\"13. Disclaimer\" anchor=\"disclaimer\">\n        <p>THE SERVICES ARE PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE SERVICES WILL BE AT YOUR SOLE RISK. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION WITH THE SERVICES AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE SERVICES' CONTENT OR THE CONTENT OF ANY WEBSITES OR MOBILE APPLICATIONS LINKED TO THE SERVICES AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE OF THE SERVICES, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO OR FROM THE SERVICES, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE SERVICES BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SERVICES. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE SERVICES, ANY HYPERLINKED WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.</p>\n    </app-card>\n\n    <app-card title=\"14. Limitations of liability\" anchor=\"limitations-of-liability\">\n        <p>IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE, LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE SERVICES, EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, OUR LIABILITY TO YOU FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION, WILL AT ALL TIMES BE LIMITED TO THE LESSER OF THE AMOUNT PAID, IF ANY, BY YOU TO US OR . CERTAIN US STATE LAWS AND INTERNATIONAL LAWS DO NOT ALLOW LIMITATIONS ON IMPLIED WARRANTIES OR THE EXCLUSION OR LIMITATION OF CERTAIN DAMAGES. IF THESE LAWS APPLY TO YOU, SOME OR ALL OF THE ABOVE DISCLAIMERS OR LIMITATIONS MAY NOT APPLY TO YOU, AND YOU MAY HAVE ADDITIONAL RIGHTS.</p>\n    </app-card>\n\n    <app-card title=\"15. Indemnification\" anchor=\"endemnification\">\n        <p>You agree to defend, indemnify, and hold us harmless, including our subsidiaries, affiliates, and all of our respective officers, agents, partners, and employees, from and against any loss, damage, liability, claim, or demand, including reasonable attorneys’ fees and expenses, made by any third party due to or arising out of: (1) use of the Services; (2) breach of these Legal Terms; (3) any breach of your representations and warranties set forth in these Legal Terms; (4) your violation of the rights of a third party, including but not limited to intellectual property rights; or (5) any overt harmful act toward any other user of the Services with whom you connected via the Services. Notwithstanding the foregoing, we reserve the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate, at your expense, with our defense of such claims. We will use reasonable efforts to notify you of any such claim, action, or proceeding which is subject to this indemnification upon becoming aware of it.</p>\n    </app-card>\n\n    <app-card title=\"16. User data\" anchor=\"user-data\">\n        <p>\n            We will maintain certain data that you transmit to the Services for the purpose of managing the performance of the Services, as well as data relating to your use of the Services. Although we perform regular routine backups of data, you are solely responsible for all data that you transmit or that relates to any activity you have undertaken using the Services. You agree that we shall have no liability to you for any loss or corruption of any such data, and you hereby waive any right of action against us arising from any such loss or corruption of such data.\n            </p>\n    </app-card>\n\n    <app-card title=\"17. Electronic communications, transactions, and signatures\" anchor=\"elec-comm\">\n        <p>Visiting the Services, sending us emails, and completing online forms constitute electronic communications. You consent to receive electronic communications, and you agree that all agreements, notices, disclosures, and other communications we provide to you electronically, via email and on the Services, satisfy any legal requirement that such communication be in writing. YOU HEREBY AGREE TO THE USE OF ELECTRONIC SIGNATURES, CONTRACTS, ORDERS, AND OTHER RECORDS, AND TO ELECTRONIC DELIVERY OF NOTICES, POLICIES, AND RECORDS OF TRANSACTIONS INITIATED OR COMPLETED BY US OR VIA THE SERVICES. You hereby waive any rights or requirements under any statutes, regulations, rules, ordinances, or other laws in any jurisdiction which require an original signature or delivery or retention of non-electronic records, or to payments or the granting of credits by any means other than electronic means.</p>\n    </app-card>\n\n    <app-card title=\"18. Miscellaneous\" anchor=\"miscellaneous\">\n        <p>These Legal Terms and any policies or operating rules posted by us on the Services or in respect to the Services constitute the entire agreement and understanding between you and us. Our failure to exercise or enforce any right or provision of these Legal Terms shall not operate as a waiver of such right or provision. These Legal Terms operate to the fullest extent permissible by law. We may assign any or all of our rights and obligations to others at any time. We shall not be responsible or liable for any loss, damage, delay, or failure to act caused by any cause beyond our reasonable control. If any provision or part of a provision of these Legal Terms is determined to be unlawful, void, or unenforceable, that provision or part of the provision is deemed severable from these Legal Terms and does not affect the validity and enforceability of any remaining provisions. There is no joint venture, partnership, employment or agency relationship created between you and us as a result of these Legal Terms or use of the Services. You agree that these Legal Terms will not be construed against us by virtue of having drafted them. You hereby waive any and all defenses you may have based on the electronic form of these Legal Terms and the lack of signing by the parties hereto to execute these Legal Terms.</p>\n    </app-card>\n\n    <app-card title=\"19. Contact us\" anchor=\"contact-us\">\n        <p>In order to resolve a complaint regarding the Services or to receive further information regarding use of the Services, please contact us at: <a href=\"mailto:poly.tinder.2023@gmail.com\">poly.tinder.2023@gmail.com</a></p>\n    </app-card>\n</app-about-layout>\n\n<!-- This privacy policy was created using Termly's <a href=\"https://termly.io/products/privacy-policy-generator/\">Privacy Policy Generator</a>. -->"
        },
        {
            "name": "UserProfileCardComponent",
            "id": "component-UserProfileCardComponent-9593e36573476c69d9ccf36f6bfa2e78a95cb3525cd847342ff142de9a2c3c944705d3c7219458bf274c2560b2ef51042cc2ddce8f11ae9cd92b187b36c3261d",
            "file": "src/modules/user-profile/components/user-profile-card/user-profile-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-card",
            "styleUrls": [
                "./user-profile-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disableInteractions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disableModeration",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "userProfile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "UserProfile | PublicUserResult | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dislikeUser",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "excludeUser",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "likeUser",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionsVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<Element>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "currentSwipeOutput",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"right\" | \"left\" | null",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "currentSwipeX",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "disableSwipe",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "infoVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "initialSwipeX",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isSwiping",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "swipingCompleted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "blockUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSwipeEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:mouseup', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:touchend', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        167
                    ]
                },
                {
                    "name": "onSwipeMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:mousemove', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:touchmove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSwipeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reportUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "swipe",
                    "args": [
                        {
                            "name": "like",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "like",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:mousemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89
                },
                {
                    "name": "window:mouseup",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "window:touchend",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "window:touchmove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { PublicUserResult, UserProfile } from 'common/models/user';\nimport {\n    LOOKING_FOR,\n    RELATIONSHIP_TYPES,\n    ZODIAC_SIGNS,\n    SEXUAL_ORIENTATIONS,\n    PROGRAMS,\n    WORKOUT_HABITS,\n    DRINKING_HABITS,\n    SMOKING_HABITS,\n} from '../../constants';\nimport { ModerationService } from 'src/modules/moderation/services/moderation.service';\n\n@Component({\n    selector: 'app-user-profile-card',\n    templateUrl: './user-profile-card.component.html',\n    styleUrls: ['./user-profile-card.component.scss'],\n})\nexport class UserProfileCardComponent {\n    @ViewChild('container') container!: ElementRef<Element>;\n    @Input() userProfile: UserProfile | PublicUserResult | undefined | null =\n        null;\n    @Input() disableInteractions: boolean = false;\n    @Input() disableModeration: boolean = false;\n    @Output() excludeUser: EventEmitter<void> = new EventEmitter();\n    @Output() likeUser: EventEmitter<void> = new EventEmitter();\n    @Output() dislikeUser: EventEmitter<void> = new EventEmitter();\n\n    actionsVisible: boolean = false;\n    infoVisible: boolean = false;\n    isSwiping: boolean = false;\n    initialSwipeX: number | null = null;\n    currentSwipeX: number | null = null;\n    currentSwipeOutput: 'right' | 'left' | null = null;\n    disableSwipe: boolean = false;\n    swipingCompleted: boolean = false;\n\n    constructor(private readonly moderationService: ModerationService) {}\n\n    showInfo() {\n        this.infoVisible = true;\n        this.container.nativeElement.scrollTop =\n            this.container.nativeElement.clientHeight * 0.8;\n    }\n\n    onScroll(event: Event) {\n        const target = event.target as Element | null;\n\n        if (!target) return;\n\n        if (target.scrollTop <= 0) {\n            target.scrollTop = 0;\n            this.infoVisible = false;\n        }\n\n        this.actionsVisible = target.scrollTop >= 90;\n    }\n\n    onSwipeStart(event: Event) {\n        if (this.disableSwipe) return;\n        this.isSwiping = true;\n        this.initialSwipeX = (event as MouseEvent).pageX;\n    }\n\n    @HostListener('window:mouseup', ['$event'])\n    @HostListener('window:touchend', ['$event'])\n    onSwipeEnd() {\n        if (this.isSwiping) {\n            if (this.currentSwipeOutput) {\n                this.swipe(this.currentSwipeOutput === 'right');\n            }\n\n            this.isSwiping = false;\n            this.currentSwipeX = null;\n        }\n    }\n\n    @HostListener('window:mousemove', ['$event'])\n    @HostListener('window:touchmove', ['$event'])\n    onSwipeMove(event: MouseEvent) {\n        if (!this.isSwiping || this.initialSwipeX === null) return;\n        this.currentSwipeX = event.pageX - this.initialSwipeX;\n\n        if (\n            this.currentSwipeX >\n            this.container.nativeElement.clientWidth * 0.3\n        ) {\n            this.currentSwipeOutput = 'right';\n        } else if (\n            this.currentSwipeX <\n            -this.container.nativeElement.clientWidth * 0.3\n        ) {\n            this.currentSwipeOutput = 'left';\n        } else {\n            this.currentSwipeOutput = null;\n        }\n    }\n\n    swipe(like: boolean) {\n        this.disableSwipe = true;\n        this.swipingCompleted = true;\n        setTimeout(() => {\n            if (like) {\n                this.likeUser.emit();\n            }\n            if (!like) {\n                this.dislikeUser.emit();\n            }\n        }, 250);\n    }\n\n    get likeScale() {\n        return this.currentSwipeX\n            ? Math.min(1.5, Math.max(1, 1 + this.currentSwipeX * 0.002))\n            : 1;\n    }\n\n    get dislikeScale() {\n        return this.currentSwipeX\n            ? Math.min(1.5, Math.max(1, 1 + this.currentSwipeX * -0.002))\n            : 1;\n    }\n\n    get program() {\n        return this.userProfile?.program\n            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              (PROGRAMS as any)[this.userProfile?.program]\n            : undefined;\n    }\n\n    get interests(): string[] | undefined {\n        const interests = this.userProfile?.interests?.filter(\n            (interest) => interest.length > 0,\n        );\n\n        return (interests?.length ?? 0) > 0 ? interests : undefined;\n    }\n\n    get associations(): string[] | undefined {\n        const associations = this.userProfile?.associations?.filter(\n            (association) => association.length > 0,\n        );\n\n        return (associations?.length ?? 0) > 0 ? associations : undefined;\n    }\n\n    get zodiacSign() {\n        return ZODIAC_SIGNS.find(\n            (zodiac) => zodiac.id === this.userProfile?.zodiacSign,\n        );\n    }\n\n    get sexualOrientation() {\n        return SEXUAL_ORIENTATIONS.find(\n            (orientation) =>\n                orientation.id === this.userProfile?.sexualOrientation,\n        );\n    }\n\n    get relationshipType() {\n        return RELATIONSHIP_TYPES.find(\n            (status) => status.id === this.userProfile?.relationshipType,\n        );\n    }\n\n    get lookingFor() {\n        return LOOKING_FOR.find(\n            (lookingFor) => lookingFor.id === this.userProfile?.lookingFor,\n        );\n    }\n\n    get workout() {\n        return WORKOUT_HABITS.find(\n            (workout) => workout.id === this.userProfile?.workout,\n        );\n    }\n\n    get drinking() {\n        return DRINKING_HABITS.find(\n            (drinking) => drinking.id === this.userProfile?.drinking,\n        );\n    }\n\n    get smoking() {\n        return SMOKING_HABITS.find(\n            (smoking) => smoking.id === this.userProfile?.smoking,\n        );\n    }\n\n    get drugs() {\n        return DRINKING_HABITS.find(\n            (drugs) => drugs.id === this.userProfile?.drugs,\n        );\n    }\n\n    get height() {\n        if (!this.userProfile?.height) {\n            return undefined;\n        }\n\n        const heightCm = this.userProfile.height;\n        const heightFeet = Math.floor(heightCm / 30.48);\n        const heightInches = Math.round((heightCm % 30.48) / 2.54);\n\n        return `${heightCm} cm / ${heightFeet}'${heightInches}\"`;\n    }\n\n    get shouldDisplayTable() {\n        return (\n            (this.userProfile?.interests ?? []).length > 0 ||\n            (this.userProfile?.associations ?? []).length > 0 ||\n            this.userProfile?.zodiacSign ||\n            this.userProfile?.sexualOrientation ||\n            this.userProfile?.relationshipType ||\n            this.userProfile?.lookingFor ||\n            this.userProfile?.workout ||\n            this.userProfile?.drinking ||\n            this.userProfile?.smoking ||\n            this.userProfile?.drugs ||\n            this.userProfile?.height\n        );\n    }\n\n    reportUser() {\n        if (!this.userProfile) throw new Error('User profile is undefined');\n\n        this.moderationService.openReportUserModal(\n            this.userProfile.userId,\n            this.userProfile.name ?? '',\n        );\n    }\n\n    blockUser() {\n        if (!this.userProfile) throw new Error('User profile is undefined');\n\n        this.moderationService\n            .openBlockUserModal(\n                this.userProfile.userId,\n                this.userProfile.name ?? '',\n            )\n            .subscribe(() => {\n                this.excludeUser.emit();\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils';\n@import '../../../../styles/variables';\n\n.user-profile {\n    @include no-select;\n\n    $spacing: 18px;\n    $outer-radius: 16px;\n    $inner-radius: 10px;\n\n    position: relative;\n    height: 100%;\n    width: 100%;\n    background-color: var(--theme-background);\n    border: solid 1px rgb(240, 240, 240);\n    border-radius: $outer-radius;\n    overflow-y: hidden;\n    overflow-x: hidden;\n    box-shadow: $default-shadow;\n    transition: ease-in 0.2s opacity, ease-in 0.2s scale;\n    \n\n    &__container {\n        height: 100%;\n        width: 100%;\n        overflow-y: hidden;\n        overflow-x: hidden;\n        display: flex;\n        flex-direction: column;\n        gap: $spacing;\n\n        scroll-behavior: smooth;\n        -ms-overflow-style: none;  /* Internet Explorer 10+ */\n        scrollbar-width: none;  /* Firefox */\n\n        &::-webkit-scrollbar {\n            display: none;  /* Safari and Chrome */\n        }\n    }\n\n    &__main {\n        height: 100%;\n        border-radius: $outer-radius;\n        overflow: hidden;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        flex-shrink: 0;\n        box-sizing: border-box;\n\n        &__picture {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 100%;\n            width: 100%;\n        }\n\n        &__content {\n            z-index: 1;\n            position: relative;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            background-color: rgba(255, 255, 255, 0.9);\n            border-top-left-radius: $inner-radius;\n            border-top-right-radius: $inner-radius;\n            padding: $spacing;\n            width: 100%;\n            box-sizing: border-box;\n            cursor: pointer;\n\n            &__info {\n                p {\n                    margin: 0;\n                    width: 100%;\n                    overflow-x: hidden;\n                    white-space: nowrap;\n                    text-overflow: ellipsis;\n                    flex-shrink: 0;\n                    line-height: 1.2em;\n                }\n    \n                &__name {\n                    font-size: 1.9em;\n                    font-weight: 800;\n                    margin: 0;\n                }\n    \n                &__subtitle {\n                    margin: 0;\n                    font-size: 1.3em;\n                    font-weight: 800;\n                    opacity: 0.55;\n                }\n            }\n\n            &__button {\n                transition: ease-in 0.1s opacity;\n            }\n\n            @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n                background-color: rgba(255, 255, 255, .85);\n                -webkit-backdrop-filter: blur(2em);\n                backdrop-filter: blur(2em);\n            }\n        }\n\n        &__swipe {\n            position: relative;\n            z-index: 1;\n            background-color: white;\n            padding: $spacing;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            height: 70px;\n            box-sizing: border-box;\n            transition: ease-in 0.1s margin-bottom;\n            cursor: grab;\n            overflow: hidden;\n\n            &__button {\n                appearance: none;\n                background: none;\n                border: none;\n                font-size: inherit;\n                padding: 8px;\n                border-radius: 3px;\n                z-index: 1;\n\n                &:active {\n                    background: rgb(0, 0, 0, 0.1);\n                }\n            }\n            \n            &__icon {\n                font-size: 1.7em;\n                transition: ease-in 0.1s opacity;\n                z-index: 1;\n\n                &.fa-times {\n                    color: tomato;\n                }\n\n                &.fa-heart {\n                    color: var(--theme-main);\n                }\n            }\n\n            &__direction {\n                opacity: 0.2;\n                transition: ease-in 0.1s opacity;\n                z-index: 1;\n            }\n\n            &__effect {\n                width: calc(100% + 24px);\n                aspect-ratio: 1;\n                border-radius: 50%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                translate: -50% -50%;\n                scale: 0;\n                transition: ease-in 0.1s scale;\n            }\n\n            &--right,\n            &--left {\n                .user-profile__main__swipe__icon {\n                    color: white;\n                }\n                .user-profile__main__swipe__effect {\n                    scale: 1;\n                }\n            }\n\n            &--right {\n                .user-profile__main__swipe__icon {\n                    &.fa-times {\n                        opacity: 0;\n                    }\n                }\n\n                .user-profile__main__swipe__direction {\n                    &--left {\n                        opacity: 0;\n                    }\n                }\n\n                .user-profile__main__swipe__effect {\n                    background-color: var(--theme-main);\n                }\n            }\n\n            &--left {\n                .user-profile__main__swipe__icon {\n                    &.fa-heart {\n                        opacity: 0;\n                    }\n                }\n\n                .user-profile__main__swipe__direction {\n                    &--right {\n                        opacity: 0;\n                    }\n                }\n\n                .user-profile__main__swipe__effect {\n                    background-color: tomato;\n                }\n            }\n        }\n    }\n\n    &__actions {\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n        height: 90px;\n        margin-bottom: -90px;\n        transition: ease-in 0.1s margin-bottom;\n        pointer-events: auto; \n\n        &__button {\n            position: relative;\n            z-index: 2;\n            appearance: none;\n            background: var(--theme-background);\n            border: solid 1px rgb(240, 240, 240);\n            font-size: 2em;\n            height: 56px;\n            width: 56px;\n            border-radius: 48px;\n            cursor: pointer;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            box-shadow: $default-shadow;\n\n            &--like {\n                color: var(--theme-main);\n                i {\n                    padding-top: 5px;\n                }\n            }\n\n            &--dislike {\n                color: tomato;\n            }\n        }\n\n        &--visible {\n            margin-bottom: 0;\n        }\n    }\n\n    &__content {\n        display: flex;\n        flex-direction: column;\n        gap: $spacing;\n        padding: 0 $spacing 90px $spacing;\n        position: relative;\n        z-index: 1;\n    }\n\n    &__section {\n        display: flex;\n        flex-direction: column;\n        gap: $spacing;\n        padding: $spacing;\n        border: solid 1px rgb(240, 240, 240);\n        border-radius: $inner-radius;\n    }\n\n    app-image {\n        border-radius: $inner-radius;\n        overflow: hidden;\n    }\n\n    &__table {\n        border: solid 1px rgb(240, 240, 240);\n        border-radius: $inner-radius;\n\n        &__entry {\n            padding: 12px 18px;\n\n            &:not(:last-child) {\n                border-bottom: solid 1px rgb(240, 240, 240);\n            }\n\n            i {\n                width: 18px;\n                margin-right: 8px;\n            }\n\n            &--multiple {\n                display: flex;\n                overflow-y: auto;\n                gap: 36px;\n                -ms-overflow-style: none;  /* Internet Explorer 10+ */\n                scrollbar-width: none;  /* Firefox */\n\n                &::-webkit-scrollbar {\n                    display: none;  /* Safari and Chrome */\n                }\n\n                .user-profile__table__entry__item {\n                    flex-shrink: 0;\n\n                    i {\n                        width: 18px;\n                        margin-right: 2px;\n                    }\n\n                    &:not(:last-child) {\n                        &::after {\n                            content: '';\n                            position: relative;\n                            height: 100%;\n                            width: 1px;\n                        }\n                    }\n                }\n            }\n        }\n\n        &:empty {\n            display: none;\n            margin-bottom: -$spacing;\n        }\n    }\n\n    &__list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 6px;\n\n        &__item {\n            border: solid 1px rgb(240, 240, 240);\n            padding: 4px 12px;\n            border-radius: 24px;\n        }\n    }\n\n    &__user-actions {\n        display: flex;\n        flex-direction: column;\n        gap: 4px;\n    }\n\n    &--info-visible {\n        .user-profile__container {\n            overflow-y: auto;\n        }\n\n        .user-profile__main {\n            &__content {\n                &__button {\n                    opacity: 0;\n                    visibility: hidden;\n                }\n            }\n\n            &__swipe {\n                margin-bottom: -70px;\n            }\n        }\n    }\n\n    &--swiping-completed {\n        scale: 1.1;\n        opacity: 0;\n        pointer-events: none;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        $spacing: 12px;\n        \n        .user-profile__container {\n            gap: $spacing;\n        }\n\n        .user-profile__content {\n            gap: $spacing;\n            padding: 0 $spacing 90px $spacing;\n        }\n    }\n}\n",
                    "styleUrl": "./user-profile-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "moderationService",
                        "type": "ModerationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "likeScale": {
                    "name": "likeScale",
                    "getSignature": {
                        "name": "likeScale",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "dislikeScale": {
                    "name": "dislikeScale",
                    "getSignature": {
                        "name": "dislikeScale",
                        "type": "",
                        "returnType": "",
                        "line": 127
                    }
                },
                "program": {
                    "name": "program",
                    "getSignature": {
                        "name": "program",
                        "type": "",
                        "returnType": "",
                        "line": 133
                    }
                },
                "interests": {
                    "name": "interests",
                    "getSignature": {
                        "name": "interests",
                        "type": "",
                        "returnType": "[] | undefined",
                        "line": 140
                    }
                },
                "associations": {
                    "name": "associations",
                    "getSignature": {
                        "name": "associations",
                        "type": "",
                        "returnType": "[] | undefined",
                        "line": 148
                    }
                },
                "zodiacSign": {
                    "name": "zodiacSign",
                    "getSignature": {
                        "name": "zodiacSign",
                        "type": "",
                        "returnType": "",
                        "line": 156
                    }
                },
                "sexualOrientation": {
                    "name": "sexualOrientation",
                    "getSignature": {
                        "name": "sexualOrientation",
                        "type": "",
                        "returnType": "",
                        "line": 162
                    }
                },
                "relationshipType": {
                    "name": "relationshipType",
                    "getSignature": {
                        "name": "relationshipType",
                        "type": "",
                        "returnType": "",
                        "line": 169
                    }
                },
                "lookingFor": {
                    "name": "lookingFor",
                    "getSignature": {
                        "name": "lookingFor",
                        "type": "",
                        "returnType": "",
                        "line": 175
                    }
                },
                "workout": {
                    "name": "workout",
                    "getSignature": {
                        "name": "workout",
                        "type": "",
                        "returnType": "",
                        "line": 181
                    }
                },
                "drinking": {
                    "name": "drinking",
                    "getSignature": {
                        "name": "drinking",
                        "type": "",
                        "returnType": "",
                        "line": 187
                    }
                },
                "smoking": {
                    "name": "smoking",
                    "getSignature": {
                        "name": "smoking",
                        "type": "",
                        "returnType": "",
                        "line": 193
                    }
                },
                "drugs": {
                    "name": "drugs",
                    "getSignature": {
                        "name": "drugs",
                        "type": "",
                        "returnType": "",
                        "line": 199
                    }
                },
                "height": {
                    "name": "height",
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "",
                        "line": 205
                    }
                },
                "shouldDisplayTable": {
                    "name": "shouldDisplayTable",
                    "getSignature": {
                        "name": "shouldDisplayTable",
                        "type": "",
                        "returnType": "",
                        "line": 217
                    }
                }
            },
            "templateData": "<div class=\"user-profile\" [ngClass]=\"{'user-profile--info-visible': infoVisible, 'user-profile--swiping-completed': swipingCompleted}\" *ngIf=\"userProfile\">\n    <div class=\"user-profile__container\" (scroll)=\"onScroll($event)\" #container>\n        <div class=\"user-profile__main\">\n            <app-image\n                [publicID]=\"userProfile.pictures?.[0]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 363, height: 486}\"\n                [inferSize]=\"true\"\n                class=\"user-profile__main__picture\"\n            ></app-image>\n    \n            <div class=\"user-profile__main__content\" (click)=\"!infoVisible && showInfo()\">\n                <div class=\"user-profile__main__content__info\">\n                    <p class=\"user-profile__main__content__info__name\">{{userProfile.name}}</p>\n                    <p class=\"user-profile__main__content__info__subtitle\">\n                        <span class=\"user-profile__main__content__info__subtitle__age\">{{userProfile.age}}</span>\n                        <span class=\"user-profile__main__content__info__subtitle__program\" *ngIf=\"program\">, {{program}}</span>\n                    </p>\n                </div>\n    \n                <app-button icon=\"fas fa-arrow-down\" color=\"primary\" [iconOnly]=\"true\" class=\"user-profile__main__content__button\"></app-button>\n            </div>\n    \n            <div *ngIf=\"!disableInteractions\" [class]=\"'user-profile__main__swipe user-profile__main__swipe--' + currentSwipeOutput\" (mousedown)=\"onSwipeStart($event)\" (touchstart)=\"onSwipeStart($event)\">\n                <button class=\"user-profile__main__swipe__button\" (click)=\"swipe(false)\">\n                    <i class=\"user-profile__main__swipe__icon fas fa-times\" [style.scale]=\"dislikeScale\"></i>\n                </button>\n                <span class=\"user-profile__main__swipe__direction user-profile__main__swipe__direction--left\">\n                    <i class=\"fas fa-chevron-left\"></i>\n                    <i class=\"fas fa-chevron-left\"></i>\n                    <i class=\"fas fa-chevron-left\"></i>\n                    <i class=\"fas fa-chevron-left\"></i>\n                </span>\n                <span class=\"user-profile__main__swipe__direction user-profile__main__swipe__direction--right\">\n                    <i class=\"fas fa-chevron-right\"></i>\n                    <i class=\"fas fa-chevron-right\"></i>\n                    <i class=\"fas fa-chevron-right\"></i>\n                    <i class=\"fas fa-chevron-right\"></i>\n                </span>\n                <button class=\"user-profile__main__swipe__button\" (click)=\"swipe(true)\">\n                    <i class=\"user-profile__main__swipe__icon fas fa-heart\" [style.scale]=\"likeScale\"></i>\n                </button>\n    \n                <div class=\"user-profile__main__swipe__effect\"></div>\n            </div>\n        </div>\n    \n        <div class=\"user-profile__content\">\n            <div class=\"user-profile__bio user-profile__section\">\n                <p class=\"user-profile__section-title user-profile__bio__title\"><i class=\"fas fa-pen\"></i> À propos de moi</p>\n                <p>{{userProfile.bio}}</p>\n            </div>\n\n            <div class=\"user-profile__looking-for user-profile__section\" *ngIf=\"lookingFor\">\n                <p class=\"user-profile__section-title user-profile__bio__title\"><i class=\"fas fa-flower-tulip\"></i> À la recherche de</p>\n                <p class=\"user-profile__looking-for__content\"><span>{{lookingFor.emoji}}</span> {{lookingFor.name}}</p>\n            </div>\n            \n            <app-image\n                [publicID]=\"userProfile.pictures?.[1]\"\n                *ngIf=\"userProfile.pictures?.[1]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 352, height: 600}\"\n                class=\"user-profile__picture\"\n                [inferSize]=\"true\"\n            ></app-image>\n    \n            <div class=\"user-profile__table\" *ngIf=\"shouldDisplayTable\">\n                <div class=\"user-profile__table__entry user-profile__table__entry--multiple\">\n                    <div class=\"user-profile__table__entry__item\" *ngIf=\"userProfile.height\">\n                        <i class=\"fas fa-ruler\"></i> {{height}}\n                    </div>\n                    <div class=\"user-profile__table__entry__item\" *ngIf=\"workout\">\n                        <i class=\"fas fa-running\"></i> {{workout.name}}\n                    </div>\n                    <div class=\"user-profile__table__entry__item\" *ngIf=\"drinking\">\n                        <i class=\"fas fa-wine-glass-alt\"></i> {{drinking.name}}\n                    </div>\n                    <div class=\"user-profile__table__entry__item\" *ngIf=\"smoking\">\n                        <i class=\"fas fa-smoking\"></i> {{smoking.name}}\n                    </div>\n                    <div class=\"user-profile__table__entry__item\" *ngIf=\"drugs\">\n                        <i class=\"fas fa-cannabis\"></i> {{drugs.name}}\n                    </div>\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"userProfile.jobTitle\">\n                    <i class=\"fas fa-suitcase\"></i> {{userProfile.jobTitle}} <span *ngIf=\"userProfile.jobCompany\">chez {{userProfile.jobCompany}}</span>\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"zodiacSign\">\n                    <i class=\"fas fa-star-shooting\"></i> {{zodiacSign.name}}\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"userProfile.livingIn\">\n                    <i class=\"fas fa-city\"></i> {{userProfile.livingIn}}\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"sexualOrientation\">\n                    <i class=\"fas fa-flag\"></i> {{sexualOrientation.name}}\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"relationshipType\">\n                    <i class=\"fas fa-user-friends\"></i> {{relationshipType.name}}\n                </div>\n                <div class=\"user-profile__table__entry\" *ngIf=\"userProfile.gender\">\n                    <i class=\"fas fa-transgender\"></i> {{userProfile.gender}}\n                </div>\n            </div>\n            \n            <app-image\n                [publicID]=\"userProfile.pictures?.[2]\"\n                *ngIf=\"userProfile.pictures?.[2]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 352, height: 600}\"\n                class=\"user-profile__picture\"\n                [inferSize]=\"true\"\n            ></app-image>\n    \n            <div class=\"user-profile__interests user-profile__section\" *ngIf=\"interests\">\n                <p class=\"user-profile__section-title user-profile__interests__title\"><i class=\"fas fa-heart\"></i> Mes intérêts</p>\n                <div class=\"user-profile__list\">\n                    <div class=\"user-profile__list__item\" *ngFor=\"let interest of interests\">\n                        {{interest}}\n                    </div>\n                </div>\n            </div>\n            \n            <app-image\n                [publicID]=\"userProfile.pictures?.[3]\"\n                *ngIf=\"userProfile.pictures?.[3]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 352, height: 600}\"\n                class=\"user-profile__picture\"\n                [inferSize]=\"true\"\n            ></app-image>\n    \n            <div class=\"user-profile__associations user-profile__section\" *ngIf=\"associations\">\n                <p class=\"user-profile__section-title user-profile__associations__title\"><i class=\"fas fa-users\"></i> Mes associations</p>\n                <div class=\"user-profile__list\">\n                    <div class=\"user-profile__list__item\" *ngFor=\"let association of associations\">\n                        {{association}}\n                    </div>\n                </div>\n            </div>\n\n\n            \n            <app-image\n                [publicID]=\"userProfile.pictures?.[4]\"\n                *ngIf=\"userProfile.pictures?.[4]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 352, height: 600}\"\n                class=\"user-profile__picture\"\n                [inferSize]=\"true\"\n            ></app-image>\n            \n            <app-image\n                [publicID]=\"userProfile.pictures?.[5]\"\n                *ngIf=\"userProfile.pictures?.[5]\"\n                [alt]=\"'Photo de ' + userProfile.name\"\n                [size]=\"{width: 352, height: 600}\"\n                class=\"user-profile__picture\"\n                [inferSize]=\"true\"\n            ></app-image>\n        \n            <div class=\"user-profile__user-actions\" *ngIf=\"!disableModeration\">\n                <app-button\n                    icon=\"fas fa-flag\"\n                    (btnClick)=\"reportUser()\"\n                    interactable=\"small\"\n                >Signaler</app-button>\n                <app-button\n                    icon=\"fas fa-times\"\n                    (btnClick)=\"blockUser()\"\n                    interactable=\"small\"\n                >Bloquer</app-button>\n            </div>\n        </div>\n    </div>\n    \n\n    <div class=\"user-profile__actions\" [ngClass]=\"{'user-profile__actions--visible': actionsVisible}\">\n        <button class=\"user-profile__actions__button user-profile__actions__button--dislike\" (click)=\"swipe(false)\" *ngIf=\"!disableInteractions\">\n            <i class=\"fas fa-times\"></i>\n        </button>\n        <button class=\"user-profile__actions__button user-profile__actions__button--like\" (click)=\"swipe(true)\" *ngIf=\"!disableInteractions\">\n            <i class=\"fas fa-heart\"></i>\n        </button>\n    </div>\n</div>\n"
        },
        {
            "name": "UserProfileEditPageComponent",
            "id": "component-UserProfileEditPageComponent-75786d3a3a57d51d8b6c800fb74ed31ab1549d478f1b76f8b38c2288d8263635cfbdcaaadb12bcf3e89ecfeb674908352c87b2edd00d2e7c752e7cf383847f93",
            "file": "src/modules/user-profile/pages/user-profile-edit-page/user-profile-edit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-edit-page",
            "styleUrls": [
                "./user-profile-edit-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-edit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "askDeleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UserService } from 'src/modules/user/services/user.service';\n\n@Component({\n    selector: 'app-user-profile-edit-page',\n    templateUrl: './user-profile-edit-page.component.html',\n    styleUrls: ['./user-profile-edit-page.component.scss'],\n})\nexport class UserProfileEditPageComponent {\n    constructor(private readonly userService: UserService) {}\n\n    askDeleteUser() {\n        this.userService.askDeleteUser();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    padding-bottom: 100px;\n\n    app-user-profile-form {\n        max-width: 600px;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding-bottom: 72px;\n    }\n}",
                    "styleUrl": "./user-profile-edit-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-layout headerType=\"transparent\">\n    <app-layout-action layout-action-left icon=\"fas fa-chevron-left\" link=\"/profile\" [iconAdjustH]=\"-1\"></app-layout-action>\n\n    <span layout-title>Modifier mon profil</span>\n\n    <div class=\"container\">\n        <app-user-profile-form></app-user-profile-form>\n\n        <app-button icon=\"fas fa-trash\" (btnClick)=\"askDeleteUser()\" color=\"danger\">Supprimer mon compte</app-button>\n    </div>\n</app-layout>"
        },
        {
            "name": "UserProfileFormComponent",
            "id": "component-UserProfileFormComponent-8456502364d1b56ef0550fb5dbbb95a2925f146f218887abdf5bb20a2628c23a42f650c256fca03aaf4800e0c1c393e346e7c42e45597604c307bda53266dca1",
            "file": "src/modules/user-profile/components/user-profile-form/user-profile-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-form",
            "styleUrls": [
                "./user-profile-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "associations",
                    "defaultValue": "ASSOCIATIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "drinkingHabits",
                    "defaultValue": "DRINKING_HABITS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "drugHabits",
                    "defaultValue": "DRUGS_HABITS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "genderIdentities",
                    "defaultValue": "GENDER_IDENTITIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "genderPreferences",
                    "defaultValue": "GENDER_PREFERENCES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "genders",
                    "defaultValue": "GENDERS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "interests",
                    "defaultValue": "INTERESTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "lookingFor",
                    "defaultValue": "LOOKING_FOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "pictures",
                    "defaultValue": "[\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "programs",
                    "defaultValue": "PROGRAMS_ARRAY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "relationshipTypes",
                    "defaultValue": "RELATIONSHIP_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "sexualities",
                    "defaultValue": "SEXUAL_ORIENTATIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "smokingHabits",
                    "defaultValue": "SMOKING_HABITS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "userProfileForm",
                    "defaultValue": "new FormGroup({\n        pictures: new FormControl(new Array<string | undefined>(), [\n            // profilePictureValidator,\n        ]),\n        name: new FormControl('', [\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(255),\n        ]),\n        age: new FormControl(0, [\n            Validators.required,\n            Validators.min(0),\n            Validators.max(150),\n        ]),\n        bio: new FormControl('', [\n            Validators.required,\n            Validators.minLength(5),\n            Validators.maxLength(255),\n        ]),\n        program: new FormControl('', [\n            containedInValidator(\n                PROGRAMS_ARRAY,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        height: new FormControl(0, [Validators.min(0), Validators.max(300)]),\n        interests: new FormControl<string[]>(\n            [],\n            [arrayContainedInValidator(INTERESTS)],\n        ),\n        associations: new FormControl<string[]>(\n            [],\n            // [arrayContainedInValidator(ASSOCIATIONS)],\n        ),\n        lookingFor: new FormControl('', [\n            containedInValidator(\n                LOOKING_FOR,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        relationshipType: new FormControl('', [\n            containedInValidator(\n                RELATIONSHIP_TYPES,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        zodiacSign: new FormControl('', [\n            containedInValidator(\n                ZODIAC_SIGNS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        drinking: new FormControl('', [\n            containedInValidator(\n                DRINKING_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        smoking: new FormControl('', [\n            containedInValidator(\n                SMOKING_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        drugs: new FormControl('', [\n            containedInValidator(\n                DRUGS_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        workout: new FormControl('', [\n            containedInValidator(\n                WORKOUT_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        jobTitle: new FormControl(''),\n        jobCompany: new FormControl(''),\n        livingIn: new FormControl(''),\n        gender: new FormControl(''),\n        genderCategory: new FormControl('', [\n            Validators.required,\n            containedInValidator(GENDERS, (item, value) => item.id === value),\n        ]),\n        genderPreference: new FormControl('', [\n            Validators.required,\n            containedInValidator(\n                GENDER_PREFERENCES,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        sexualOrientation: new FormControl('', [\n            containedInValidator(\n                SEXUAL_ORIENTATIONS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "workoutHabits",
                    "defaultValue": "WORKOUT_HABITS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "zodiacSigns",
                    "defaultValue": "ZODIAC_SIGNS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                }
            ],
            "methodsClass": [
                {
                    "name": "markDirty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    PROGRAMS_ARRAY,\n    LOOKING_FOR,\n    RELATIONSHIP_TYPES,\n    ZODIAC_SIGNS,\n    DRINKING_HABITS,\n    DRUGS_HABITS,\n    SMOKING_HABITS,\n    WORKOUT_HABITS,\n    GENDERS,\n    GENDER_IDENTITIES,\n    GENDER_PREFERENCES,\n    SEXUAL_ORIENTATIONS,\n    INTERESTS,\n    ASSOCIATIONS,\n} from '../../constants';\nimport { UserProfileService } from '../../services/user-profile-service/user-profile.service';\nimport { UserProfile } from 'common/models/user';\nimport { BehaviorSubject, catchError, combineLatest, debounceTime } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n    arrayContainedInValidator,\n    containedInValidator,\n} from '../../validators/contained-in-validator';\n// import { profilePictureValidator } from '../../validators/profile-picture-validator';\n\n@Component({\n    selector: 'app-user-profile-form',\n    templateUrl: './user-profile-form.component.html',\n    styleUrls: ['./user-profile-form.component.scss'],\n})\nexport class UserProfileFormComponent {\n    userProfileForm = new FormGroup({\n        pictures: new FormControl(new Array<string | undefined>(), [\n            // profilePictureValidator,\n        ]),\n        name: new FormControl('', [\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(255),\n        ]),\n        age: new FormControl(0, [\n            Validators.required,\n            Validators.min(0),\n            Validators.max(150),\n        ]),\n        bio: new FormControl('', [\n            Validators.required,\n            Validators.minLength(5),\n            Validators.maxLength(255),\n        ]),\n        program: new FormControl('', [\n            containedInValidator(\n                PROGRAMS_ARRAY,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        height: new FormControl(0, [Validators.min(0), Validators.max(300)]),\n        interests: new FormControl<string[]>(\n            [],\n            [arrayContainedInValidator(INTERESTS)],\n        ),\n        associations: new FormControl<string[]>(\n            [],\n            // [arrayContainedInValidator(ASSOCIATIONS)],\n        ),\n        lookingFor: new FormControl('', [\n            containedInValidator(\n                LOOKING_FOR,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        relationshipType: new FormControl('', [\n            containedInValidator(\n                RELATIONSHIP_TYPES,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        zodiacSign: new FormControl('', [\n            containedInValidator(\n                ZODIAC_SIGNS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        drinking: new FormControl('', [\n            containedInValidator(\n                DRINKING_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        smoking: new FormControl('', [\n            containedInValidator(\n                SMOKING_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        drugs: new FormControl('', [\n            containedInValidator(\n                DRUGS_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        workout: new FormControl('', [\n            containedInValidator(\n                WORKOUT_HABITS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        jobTitle: new FormControl(''),\n        jobCompany: new FormControl(''),\n        livingIn: new FormControl(''),\n        gender: new FormControl(''),\n        genderCategory: new FormControl('', [\n            Validators.required,\n            containedInValidator(GENDERS, (item, value) => item.id === value),\n        ]),\n        genderPreference: new FormControl('', [\n            Validators.required,\n            containedInValidator(\n                GENDER_PREFERENCES,\n                (item, value) => item.id === value,\n            ),\n        ]),\n        sexualOrientation: new FormControl('', [\n            containedInValidator(\n                SEXUAL_ORIENTATIONS,\n                (item, value) => item.id === value,\n            ),\n        ]),\n    });\n    programs = PROGRAMS_ARRAY;\n    lookingFor = LOOKING_FOR;\n    relationshipTypes = RELATIONSHIP_TYPES;\n    zodiacSigns = ZODIAC_SIGNS;\n    drinkingHabits = DRINKING_HABITS;\n    smokingHabits = SMOKING_HABITS;\n    drugHabits = DRUGS_HABITS;\n    workoutHabits = WORKOUT_HABITS;\n    genders = GENDERS;\n    genderIdentities = GENDER_IDENTITIES;\n    genderPreferences = GENDER_PREFERENCES;\n    sexualities = SEXUAL_ORIENTATIONS;\n    interests = INTERESTS;\n    associations = ASSOCIATIONS;\n\n    pictures = [\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n        new BehaviorSubject<string | undefined>(undefined),\n    ];\n\n    loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    constructor(\n        private readonly userProfileService: UserProfileService,\n        private readonly snackBar: MatSnackBar,\n    ) {\n        this.userProfileService.getUserProfile().subscribe((userProfile) => {\n            if (userProfile) {\n                this.userProfileForm.patchValue(userProfile);\n\n                if (userProfile.pictures) {\n                    for (let i = 0; i < this.pictures.length; i++) {\n                        this.pictures[i].next(userProfile.pictures[i]);\n                    }\n                }\n\n                this.userProfileForm.markAsPristine();\n            }\n        });\n\n        combineLatest(this.pictures)\n            .pipe(debounceTime(1))\n            .subscribe((pictures) => {\n                this.userProfileForm.patchValue({ pictures });\n            });\n    }\n\n    get userProfile() {\n        return this.userProfileService.getUserProfile();\n    }\n\n    onSubmit() {\n        if (this.userProfileForm.invalid) {\n            return;\n        }\n\n        const res: Omit<Partial<UserProfile>, 'userId'> = {};\n\n        for (const [k, v] of Object.entries(this.userProfileForm.value)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (res as any)[k] = v ?? undefined;\n        }\n\n        this.loading$.next(true);\n        this.userProfileForm.markAsPending();\n        this.userProfileService.updateUserProfile(res);\n        this.userProfileService\n            .applyUserProfileChanges()\n            .pipe(\n                catchError((err) => {\n                    this.snackBar.open(\n                        'Erreur lors de la mise à jour du profil',\n                        undefined,\n                        {\n                            duration: 2000,\n                            politeness: 'assertive',\n                            verticalPosition: 'top',\n                        },\n                    );\n                    this.loading$.next(false);\n                    return err;\n                }),\n            )\n            .subscribe(() => {\n                this.snackBar.open('Profil mis à jour', undefined, {\n                    duration: 2000,\n                    politeness: 'polite',\n                    verticalPosition: 'top',\n                });\n                this.loading$.next(false);\n            });\n    }\n\n    markDirty() {\n        this.userProfileForm.markAsDirty();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.form {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: 24px;\n    padding: 24px;\n\n    a {\n        color: rgba(var(--theme-background-contrast-rgb), 0.75);\n    }\n\n    &__title {\n        font-size: 1.2em;\n        font-weight: 500;\n        margin-bottom: 36px;\n        opacity: 0.75;\n\n        i {\n            margin-right: 6px;\n        }\n    }\n\n    mat-form-field {\n        width: 100%;\n\n        mat-label {\n            i {\n                margin-right: 6px;\n            }\n        }\n    }\n\n    &__pictures {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n        gap: 24px;\n\n        &__control {\n            aspect-ratio: 3/4;\n            width: 100%;\n        }\n\n        @media screen and (min-width: $mobile-breakpoint) {\n            grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));\n        }\n    }\n\n    &__submit {\n        position: fixed;\n        bottom: 24px;\n        right: 24px;\n        font-size: 1.2em;\n        z-index: 2;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        gap: 12px;\n        padding: 12px;\n\n        section {\n            padding: 12px;\n        }\n\n        &__pictures {\n            gap: 12px;\n        }\n\n        &__submit {\n            bottom: 61px;\n            left: 50%;\n            translate: -50% 0;\n            margin-bottom: 12px;\n            width: calc(100% - 24px);\n            max-width: 225px;\n        }\n    }\n}",
                    "styleUrl": "./user-profile-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 157,
                "jsdoctags": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userProfile": {
                    "name": "userProfile",
                    "getSignature": {
                        "name": "userProfile",
                        "type": "",
                        "returnType": "",
                        "line": 184
                    }
                }
            },
            "templateData": "<ng-template #formInvalid>\n    <app-card *ngIf=\"userProfileForm.invalid\" color=\"danger\">\n        Assurez-vous d'avoir rempli tous les champs obligatoires (incluant au moins une image).\n    </app-card>\n</ng-template>\n\n<form [formGroup]=\"userProfileForm\" (submit)=\"onSubmit()\" class=\"form\">\n    <ng-container *ngTemplateOutlet=\"formInvalid\"></ng-container>\n\n    <app-card title=\"Mes photos\" icon=\"fas fa-camera-retro\">\n        <div class=\"form__pictures\">\n            <app-image-control\n                *ngFor=\"let picture of pictures; let index = index\"\n                class=\"form__pictures__control\"\n                [value]=\"picture\"\n                crop=\"3:4\"\n                (change)=\"markDirty()\"\n                [canDelete]=\"index !== 0\"\n            ></app-image-control>\n        </div>\n        <mat-error *ngIf=\"userProfileForm.controls.pictures.getError('picturesNotValid')\">Au moins une photo est requise</mat-error>\n    </app-card>\n\n    <app-card title=\"Mon profil\" icon=\"fas fa-user\">\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-signature\"></i> Nom</mat-label>\n            <input formControlName=\"name\" matInput>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-calendar\"></i> Age</mat-label>\n            <input formControlName=\"age\" matInput type=\"number\">\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-book\"></i> À propos de moi</mat-label>\n            <textarea formControlName=\"bio\" rows=\"5\" matInput></textarea>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-ruler\"></i> Taille (cm)</mat-label>\n            <input formControlName=\"height\" matInput type=\"number\">\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-city\"></i> Ville</mat-label>\n            <input formControlName=\"livingIn\" matInput>\n        </mat-form-field>\n    </app-card>\n\n    <app-card title=\"Ma vie amoureuse\" icon=\"fas fa-heart\">\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-heart\"></i> Ouvert à</mat-label>\n            <mat-select formControlName=\"lookingFor\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let lookingFor of lookingFor\" [value]=\"lookingFor.id\">{{ lookingFor.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.lookingFor.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-user-friends\"></i> Type de relation</mat-label>\n            <mat-select formControlName=\"relationshipType\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let relationshipType of relationshipTypes\" [value]=\"relationshipType.id\">{{ relationshipType.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.relationshipType.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-transgender\"></i> Catégorie de genre</mat-label>\n            <mat-select formControlName=\"genderCategory\">\n                <mat-option *ngFor=\"let gender of genders\" [value]=\"gender.id\">{{ gender.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.genderCategory.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-transgender\"></i> Identitée de genre</mat-label>\n            <mat-select formControlName=\"gender\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let gender of genderIdentities\" [value]=\"gender\">{{ gender }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.gender.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-transgender\"></i> À la recherche de</mat-label>\n            <mat-select formControlName=\"genderPreference\">\n                <mat-option *ngFor=\"let gender of genderPreferences\" [value]=\"gender.id\">{{ gender.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.genderPreference.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-flag\"></i> Sexualité</mat-label>\n            <mat-select formControlName=\"sexualOrientation\">\n                <mat-option *ngFor=\"let sexuality of sexualities\" [value]=\"sexuality.id\">{{ sexuality.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.sexualOrientation.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <a href=\"/about/ressources/inclusivity\" target=\"__BLANK\"><i class=\"fas fa-info-circle\"></i> En savoir plus sur les genres et la sexualité</a>\n    </app-card>\n\n    <app-card title=\"Ma vie à Poly\" icon=\"fas fa-school\">\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-graduation-cap\"></i> Programme d'étude</mat-label>\n            <mat-select formControlName=\"program\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let program of programs\" [value]=\"program.id\">{{ program.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.program.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-graduation-cap\"></i> Comités et Associations</mat-label>\n            <mat-select formControlName=\"associations\" multiple>\n                <mat-option \n                    *ngFor=\"let association of associations\"\n                    [value]=\"association\"\n                >\n                    {{association}}\n                </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.associations.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n    </app-card>\n\n    <app-card title=\"Mon mode de vie\" icon=\"fas fa-leaf\">\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-star-shooting\"></i> Signe zodiac</mat-label>\n            <mat-select formControlName=\"zodiacSign\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let zodiacSign of zodiacSigns\" [value]=\"zodiacSign.id\">{{ zodiacSign.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.zodiacSign.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-glass-martini\"></i> Alcool</mat-label>\n            <mat-select formControlName=\"drinking\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let drinkingHabit of drinkingHabits\" [value]=\"drinkingHabit.id\">{{ drinkingHabit.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.drinking.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-smoking\"></i> Cigarette</mat-label>\n            <mat-select formControlName=\"smoking\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let smokingHabit of smokingHabits\" [value]=\"smokingHabit.id\">{{ smokingHabit.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.smoking.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-cannabis\"></i> Drogues</mat-label>\n            <mat-select formControlName=\"drugs\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let drugHabit of drugHabits\" [value]=\"drugHabit.id\">{{ drugHabit.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.drugs.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-dumbbell\"></i> Sports</mat-label>\n            <mat-select formControlName=\"workout\">\n                <mat-option value=\"\">No spécifié</mat-option>\n                <mat-option *ngFor=\"let workoutHabit of workoutHabits\" [value]=\"workoutHabit.id\">{{ workoutHabit.name }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.workout.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-graduation-cap\"></i> Intérets et passes-temps</mat-label>\n            <mat-select formControlName=\"interests\" multiple>\n                <mat-option \n                    *ngFor=\"let interests of interests\"\n                    [value]=\"interests\"\n                >\n                    {{interests}}\n                </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"userProfileForm.controls.interests.getError('notContainedIn')\">Valeur invalide</mat-error>\n        </mat-form-field>\n    </app-card>\n\n    <app-card title=\"Ma vie profesionnelle\" icon=\"fas fa-briefcase\">\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-briefcase\"></i> Emploi</mat-label>\n            <input formControlName=\"jobTitle\" matInput>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label><i class=\"fas fa-briefcase\"></i> Compagnie</mat-label>\n            <input formControlName=\"jobCompany\" matInput>\n        </mat-form-field>\n    </app-card>\n\n    <ng-container *ngTemplateOutlet=\"formInvalid\"></ng-container>\n\n    <app-button\n        class=\"form__submit\"\n        icon=\"fas fa-save\"\n        [shadow]=\"true\"\n        interactable=\"small\"\n        type=\"submit\"\n        [disabled]=\"!userProfileForm.dirty || userProfileForm.invalid\"\n        [isLoading]=\"loading$ | async\"\n        color=\"primary\"\n    >Enregistrer</app-button>\n</form>\n"
        },
        {
            "name": "UserProfilePageComponent",
            "id": "component-UserProfilePageComponent-de40e1aeaf42a25347ce9808da74121436a507bd46754ec58f0fe40d456362fddf3487ca17252dea1a00e42c0234b1851b50aae81664e67804e7c8f3858d9bbb",
            "file": "src/modules/user-profile/pages/user-profile-page/user-profile-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-page",
            "styleUrls": [
                "./user-profile-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestEmailValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UserProfileService } from '../../services/user-profile-service/user-profile.service';\nimport { AuthenticationService } from 'src/modules/authentication/services/authentication-service/authentication.service';\nimport { ValidationService } from 'src/modules/validation/services/validation.service';\n\n@Component({\n    selector: 'app-user-profile-page',\n    templateUrl: './user-profile-page.component.html',\n    styleUrls: ['./user-profile-page.component.scss'],\n})\nexport class UserProfilePageComponent {\n    constructor(\n        private readonly userProfileService: UserProfileService,\n        private readonly authenticationService: AuthenticationService,\n        private readonly validationService: ValidationService,\n    ) {}\n\n    get userProfile() {\n        return this.userProfileService.getUserProfile();\n    }\n\n    get userProfileReady() {\n        return this.validationService.userProfileReady;\n    }\n\n    get emailValidated() {\n        return this.validationService.emailValidated;\n    }\n\n    logout() {\n        this.authenticationService.logout().subscribe();\n    }\n\n    requestEmailValidation() {\n        this.validationService.requestEmailValidation().subscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.user-profile {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 24px;\n    padding: 64px 24px;\n\n    &__info {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        gap: 16px;\n\n        &__avatar {\n            height: 180px;\n            width: 180px;\n            object-fit: cover;\n            border-radius: 12px;\n            box-shadow: $default-shadow;\n            background-color: rgb(240, 240, 240);\n            overflow: hidden;\n        }\n\n        &__name {\n            font-size: 24px;\n            font-weight: 500;\n        }\n    }\n\n    &__actions {\n        display: flex;\n        flex-direction: column;\n        gap: 16px;\n        width: 100%;\n        max-width: 450px;\n\n        &__btn {\n            &__pill {\n                background: linear-gradient(90deg, var(--theme-main), rgba(var(--theme-main-rgb), 0.6));\n                color: var(--theme-main-contrast);\n                font-size: 0.9em;\n                padding: 2px 12px;\n                border-radius: 20px;\n\n                &--error {\n                    background: tomato !important;\n                }\n            }\n        }\n    }\n}\n\nhr {\n    width: 100%;\n    border: none;\n    height: 1px;\n    background: rgb(240, 240, 240);\n}",
                    "styleUrl": "./user-profile-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userProfile": {
                    "name": "userProfile",
                    "getSignature": {
                        "name": "userProfile",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "userProfileReady": {
                    "name": "userProfileReady",
                    "getSignature": {
                        "name": "userProfileReady",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                },
                "emailValidated": {
                    "name": "emailValidated",
                    "getSignature": {
                        "name": "emailValidated",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<app-layout headerType=\"hidden\">\n    <div class=\"user-profile\" *ngIf=\"userProfile | async; let userProfile\">\n        <app-card color=\"danger\" *ngIf=\"(emailValidated | async) === false\">\n            <p><b>Email non validé</b></p>\n            <p>Veuillez vérifier votre boite de courriel ou cliquez sur le bouton ci-dessous.</p>\n            <app-button (btnClick)=\"requestEmailValidation()\" interactable=\"small\">Réenvoyer un email de validation</app-button>\n        </app-card>\n\n        <div class=\"user-profile__info\">\n            <app-image\n                class=\"user-profile__info__avatar\"\n                [publicID]=\"userProfile.pictures?.[0]\"\n                [size]=\"{ square: 180 }\"\n                [alt]=\"'Photo de profile de ' + userProfile.name\"\n            ></app-image>\n            <p class=\"user-profile__info__name\">{{userProfile.name ?? 'Sans nom'}}<span *ngIf=\"userProfile.age\">, {{userProfile.age}}</span></p>\n        </div>\n    \n        <div class=\"user-profile__actions\">\n            <app-button icon=\"fas fa-user-edit\" link=\"/profile-edit\" interactable=\"small\" [shadow]=\"true\">\n                Modifier mon profil\n                <span class=\"user-profile__actions__btn__pill user-profile__actions__btn__pill--error\" *ngIf=\"(userProfileReady | async) === false\">1</span>\n            </app-button>\n\n            <app-button icon=\"fas fa-user\" link=\"/profile-preview\" interactable=\"small\" [shadow]=\"true\">Visualiser mon profil</app-button>\n            <!-- <button class=\"user-profile__actions__btn interactable--small\">\n                <i class=\"fas fa-cog\"></i>\n                Préférences\n            </button> -->\n            <app-button icon=\"fas fa-sign-out\" [shadow]=\"true\" interactable=\"small\" [matMenuTriggerFor]=\"logoutMenu\">Se déconnecter</app-button>\n            <mat-menu #logoutMenu=\"matMenu\">\n                <button (click)=\"logout()\" mat-menu-item><i class=\"fas fa-sign-out\"></i> Se déconnecter</button>\n            </mat-menu>\n            \n            <hr>\n            <app-button icon=\"fas fa-info-circle\" link=\"/about\" interactable=\"small\" [shadow]=\"true\">À propos</app-button>\n            <app-button icon=\"fab fa-github\" link=\"https://github.com/PolyTinder/poly-tinder\" interactable=\"small\" [shadow]=\"true\">Github</app-button>\n        </div>\n    </div>\n</app-layout>\n"
        },
        {
            "name": "UserProfilePreviewComponent",
            "id": "component-UserProfilePreviewComponent-1a5a33786405149f5db666fb6a9058a29140dbaf0f74970703b57915731d5a55c33221b8ca4e731dc4066346b855855cea49ba826592e20043d180a78584012d",
            "file": "src/modules/user-profile/pages/user-profile-preview/user-profile-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-preview",
            "styleUrls": [
                "./user-profile-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-preview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UserProfileService } from '../../services/user-profile-service/user-profile.service';\n\n@Component({\n    selector: 'app-user-profile-preview',\n    templateUrl: './user-profile-preview.component.html',\n    styleUrls: ['./user-profile-preview.component.scss'],\n})\nexport class UserProfilePreviewComponent {\n    constructor(private readonly userProfileService: UserProfileService) {}\n\n    get userProfile() {\n        return this.userProfileService.getUserProfile();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/variables';\n\n.container {\n    display: grid;\n    grid-template-rows: minmax(0, 1fr);\n    grid-template-columns: minmax(0, 1fr);\n    height: 100%;\n    width: 100%;\n    max-width: 400px;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    padding: 24px;\n    box-sizing: border-box;\n\n    app-user-profile-card {\n        flex-grow: 1;\n        width: 100%;\n        max-height: 600px;\n        height: 100%;\n    }\n\n    @media screen and (max-width: $mobile-breakpoint) {\n        padding: 12px;\n    }\n}",
                    "styleUrl": "./user-profile-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userProfileService",
                        "type": "UserProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userProfile": {
                    "name": "userProfile",
                    "getSignature": {
                        "name": "userProfile",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<app-layout headerType=\"transparent\">\n    <app-layout-action layout-action-left icon=\"fas fa-chevron-left\" link=\"/profile\"></app-layout-action>\n\n    <span layout-title>Visualiser mon profil</span>\n\n    <div class=\"container\">\n        <app-user-profile-card [userProfile]=\"userProfile | async\" [disableModeration]=\"true\" [disableInteractions]=\"true\"></app-user-profile-card>\n    </div>\n</app-layout>"
        }
    ],
    "modules": [
        {
            "name": "AboutModule",
            "id": "module-AboutModule-113823508771774299e9a9c4b84d38163aeaf6edebcf60daa2c72c7500074c25ca8f614f5e36605befd68c1fb536b49a9f4233342d3b3cfa3e7fbe12bafc9e10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/about/about.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AboutPageComponent } from './pages/about-page/about-page.component';\nimport { UiModule } from '../ui/ui.module';\nimport { PrivacyPolicyComponent } from './pages/application-rules/privacy-policy/privacy-policy.component';\nimport { TermsAndConditionsComponent } from './pages/application-rules/terms-and-conditions/terms-and-conditions.component';\nimport { AcceptableUsePolicyComponent } from './pages/application-rules/acceptable-use-policy/acceptable-use-policy.component';\nimport { AboutCardComponent } from './components/about-card/about-card.component';\nimport { AboutLayoutComponent } from './components/about-layout/about-layout.component';\nimport { GeneralRulesPageComponent } from './pages/application-rules/general-rules-page/general-rules-page.component';\nimport { PoliciesPageComponent } from './pages/application-rules/policies-page/policies-page.component';\nimport { HowToReportPageComponent } from './pages/security/how-to-report-page/how-to-report-page.component';\nimport { HowToBlockPageComponent } from './pages/security/how-to-block-page/how-to-block-page.component';\nimport { HowToUnmatchComponent } from './pages/security/how-to-unmatch/how-to-unmatch.component';\nimport { InclusivityPageComponent } from './pages/ressources/inclusivity-page/inclusivity-page.component';\nimport { AidOrganizationsPageComponent } from './pages/ressources/aid-organizations-page/aid-organizations-page.component';\nimport { ConsentPageComponent } from './pages/ressources/consent-page/consent-page.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    declarations: [\n        AboutPageComponent,\n        PrivacyPolicyComponent,\n        TermsAndConditionsComponent,\n        AcceptableUsePolicyComponent,\n        AboutCardComponent,\n        AboutLayoutComponent,\n        GeneralRulesPageComponent,\n        PoliciesPageComponent,\n        HowToReportPageComponent,\n        HowToBlockPageComponent,\n        HowToUnmatchComponent,\n        InclusivityPageComponent,\n        AidOrganizationsPageComponent,\n        ConsentPageComponent,\n    ],\n    imports: [CommonModule, UiModule, RouterModule],\n    exports: [],\n})\nexport class AboutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutCardComponent"
                        },
                        {
                            "name": "AboutLayoutComponent"
                        },
                        {
                            "name": "AboutPageComponent"
                        },
                        {
                            "name": "AcceptableUsePolicyComponent"
                        },
                        {
                            "name": "AidOrganizationsPageComponent"
                        },
                        {
                            "name": "ConsentPageComponent"
                        },
                        {
                            "name": "GeneralRulesPageComponent"
                        },
                        {
                            "name": "HowToBlockPageComponent"
                        },
                        {
                            "name": "HowToReportPageComponent"
                        },
                        {
                            "name": "HowToUnmatchComponent"
                        },
                        {
                            "name": "InclusivityPageComponent"
                        },
                        {
                            "name": "PoliciesPageComponent"
                        },
                        {
                            "name": "PrivacyPolicyComponent"
                        },
                        {
                            "name": "TermsAndConditionsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-beb44613a2655e2e260e8b639b765900cc068e2c228d930d28dffc15f682179157062547b5826de9bcc570c79b75f8766778bd6376a7a6ee209ec9e1c272ac3c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app.module.ts",
            "methods": [],
            "sourceCode": "import { APP_INITIALIZER, NgModule, isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './modules/app-routing.module';\nimport { AppComponent } from './app/app.component';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ApiInterceptor } from 'src/middlewares/api';\nimport { InitializerService } from 'src/services/initializer-service/initializer.service';\nimport { AuthenticationModule } from './modules/authentication/authentication.module';\nimport { AuthenticationInterceptor } from './middlewares/auth';\nimport { NavigationComponent } from './components/navigation/navigation.component';\nimport { UserProfileModule } from './modules/user-profile/user-profile.module';\nimport { MatchingModule } from './modules/matching/matching.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { AboutModule } from './modules/about/about.module';\nimport { StatusPageComponent } from './components/status-page/status-page.component';\nimport { UserModule } from './modules/user/user.module';\nimport { UiModule } from './modules/ui/ui.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\n@NgModule({\n    declarations: [AppComponent, NavigationComponent, StatusPageComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        AuthenticationModule,\n        UserProfileModule,\n        MatchingModule,\n        AboutModule,\n        BrowserAnimationsModule,\n        MatTooltipModule,\n        MatMenuModule,\n        UserModule,\n        UiModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            // Register the ServiceWorker as soon as the application is stable\n            // or after 30 seconds (whichever comes first).\n            registrationStrategy: 'registerWhenStable:30000',\n        }),\n    ],\n    providers: [\n        InitializerService,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: (initializer: InitializerService) => async () =>\n                await initializer.initialize(),\n            deps: [InitializerService],\n            multi: true,\n        },\n        { provide: HTTP_INTERCEPTORS, useClass: ApiInterceptor, multi: true },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: AuthenticationInterceptor,\n            multi: true,\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiInterceptor"
                        },
                        {
                            "name": "AuthenticationInterceptor"
                        },
                        {
                            "name": "InitializerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "StatusPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AboutModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthenticationModule"
                        },
                        {
                            "name": "MatchingModule"
                        },
                        {
                            "name": "UiModule"
                        },
                        {
                            "name": "UserModule"
                        },
                        {
                            "name": "UserProfileModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-8e3bc08c81a8709fa8db3f42c18727e87e9f1f88885475faaef0423c845d050ee3bf9e4a71c87a83d7874bde2cb089138002f3fe39a8355a749b99c1028d6b30",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Route, RouterModule, Routes } from '@angular/router';\nimport { LoginPageComponent } from './authentication/pages/login-page/login-page.component';\nimport {\n    LOGIN_ROUTE,\n    MATCHED_USER_PROFILE_ROUTE,\n    MATCHED_USER_ROUTE,\n    MATCHES_ROUTE,\n    PASSWORD_RESET_ROUTE,\n    PROFILE_EDIT_ROUTE,\n    PROFILE_PREVIEW_ROUTE,\n    PROFILE_ROUTE,\n    REQUEST_PASSWORD_RESET_ROUTE,\n    SIGNUP_ROUTE,\n    SWIPING_ROUTE,\n} from 'src/constants/routes';\nimport { SignupPageComponent } from './authentication/pages/signup-page/signup-page.component';\nimport { UserProfilePageComponent } from './user-profile/pages/user-profile-page/user-profile-page.component';\nimport { MatchesPageComponent } from './matching/pages/matches-page/matches-page.component';\nimport { SwipingPageComponent } from './matching/pages/swiping-page/swiping-page.component';\nimport { UserProfileEditPageComponent } from './user-profile/pages/user-profile-edit-page/user-profile-edit-page.component';\nimport { UserProfilePreviewComponent } from './user-profile/pages/user-profile-preview/user-profile-preview.component';\nimport { MatchedUserPageComponent } from './matching/pages/matched-user-page/matched-user-page.component';\nimport { RequestPasswordResetPageComponent } from './authentication/pages/request-password-reset-page/request-password-reset-page.component';\nimport { PasswordResetPageComponent } from './authentication/pages/password-reset-page/password-reset-page.component';\nimport { aboutRoutes } from './about/about-routing.module';\nimport { MatchedUserProfilePageComponent } from './matching/pages/matched-user-profile-page/matched-user-profile-page.component';\n\nconst privateRoute: Route = {\n    // canActivate: [privateRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n};\n\nconst publicRoute: Route = {\n    // canActivate: [publicRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n};\n\nconst routes: Routes = [\n    { path: SWIPING_ROUTE, component: SwipingPageComponent, ...privateRoute },\n    {\n        path: PROFILE_ROUTE,\n        component: UserProfilePageComponent,\n        ...privateRoute,\n    },\n    {\n        path: PROFILE_EDIT_ROUTE,\n        component: UserProfileEditPageComponent,\n        ...privateRoute,\n    },\n    {\n        path: PROFILE_PREVIEW_ROUTE,\n        component: UserProfilePreviewComponent,\n        ...privateRoute,\n    },\n    { path: MATCHES_ROUTE, component: MatchesPageComponent, ...privateRoute },\n    {\n        path: MATCHED_USER_PROFILE_ROUTE,\n        component: MatchedUserProfilePageComponent,\n        ...privateRoute,\n    },\n    {\n        path: MATCHED_USER_ROUTE,\n        component: MatchedUserPageComponent,\n        ...privateRoute,\n    },\n    { path: LOGIN_ROUTE, component: LoginPageComponent, ...publicRoute },\n    { path: SIGNUP_ROUTE, component: SignupPageComponent, ...publicRoute },\n    {\n        path: REQUEST_PASSWORD_RESET_ROUTE,\n        component: RequestPasswordResetPageComponent,\n        ...publicRoute,\n    },\n    {\n        path: PASSWORD_RESET_ROUTE,\n        component: PasswordResetPageComponent,\n        ...publicRoute,\n    },\n];\n\nconst notFoundRoutes: Routes = [\n    { path: '**', redirectTo: SWIPING_ROUTE, pathMatch: 'full' },\n];\n\nconst routeNames = routes.map((route) => ({\n    ...route,\n    path: route.path?.replace(/^\\//, ''),\n}));\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(routeNames, {\n            scrollPositionRestoration: 'top',\n        }),\n        RouterModule.forRoot(aboutRoutes, {\n            scrollPositionRestoration: 'top',\n        }),\n        RouterModule.forRoot(notFoundRoutes, {\n            scrollPositionRestoration: 'top',\n        }),\n    ],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "id": "module-AuthenticationModule-45102f8d021ae7e0a218cbdd2ec72ba3dee5ace524cc057142fc71e2fbdde06985333092019b186b94a8f960d0d1d8f35523e0bdc173ab321536487607882676",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/authentication/authentication.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SignupPageComponent } from './pages/signup-page/signup-page.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { UiModule } from '../ui/ui.module';\nimport { RequestPasswordResetPageComponent } from './pages/request-password-reset-page/request-password-reset-page.component';\nimport { PasswordResetPageComponent } from './pages/password-reset-page/password-reset-page.component';\nimport { AuthenticationLayoutComponent } from './components/authentication-layout/authentication-layout.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    declarations: [\n        LoginPageComponent,\n        SignupPageComponent,\n        RequestPasswordResetPageComponent,\n        PasswordResetPageComponent,\n        AuthenticationLayoutComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatCheckboxModule,\n        UiModule,\n    ],\n    exports: [\n        LoginPageComponent,\n        SignupPageComponent,\n        RequestPasswordResetPageComponent,\n        PasswordResetPageComponent,\n    ],\n})\nexport class AuthenticationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthenticationLayoutComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "PasswordResetPageComponent"
                        },
                        {
                            "name": "RequestPasswordResetPageComponent"
                        },
                        {
                            "name": "SignupPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "PasswordResetPageComponent"
                        },
                        {
                            "name": "RequestPasswordResetPageComponent"
                        },
                        {
                            "name": "SignupPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ImageModule",
            "id": "module-ImageModule-311aafeca051810e46b7c1f924862497bcbb8f693e403e89729230ca79b8805f97b4797fa883f0412e73e35615076c44dce25d9729b761c5f43266d55c79913e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/image/image.module.ts",
            "methods": [],
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ImageControlComponent } from './components/image-control/image-control.component';\nimport { CloudinaryModule } from '@cloudinary/ng';\nimport { UiModule } from '../ui/ui.module';\n\n@NgModule({\n    declarations: [ImageControlComponent],\n    imports: [CommonModule, CloudinaryModule, UiModule],\n    exports: [ImageControlComponent],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ImageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageControlComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageControlComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MatchingModule",
            "id": "module-MatchingModule-f3fd78101c29dd2496be4fa08b2312041972630a563786174c8216b4f999fb895d6ffadffa27957467f90bd0ae209623a586646e07b241c8066c50494c532f59",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/matching/matching.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatchesPageComponent } from './pages/matches-page/matches-page.component';\nimport { UserProfileModule } from '../user-profile/user-profile.module';\nimport { SwipingPageComponent } from './pages/swiping-page/swiping-page.component';\nimport { UiModule } from '../ui/ui.module';\nimport { MatchListComponent } from './components/match-list/match-list.component';\nimport { MatchedUserPageComponent } from './pages/matched-user-page/matched-user-page.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatchedModalComponent } from './components/matched-modal/matched-modal.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ConversationListComponent } from './components/conversation-list/conversation-list.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { ModalsModule } from '../modals/modals.module';\nimport { ModerationModule } from '../moderation/moderation.module';\nimport { RouterModule } from '@angular/router';\nimport { MatchedUserProfilePageComponent } from './pages/matched-user-profile-page/matched-user-profile-page.component';\n\n@NgModule({\n    declarations: [\n        MatchesPageComponent,\n        SwipingPageComponent,\n        MatchListComponent,\n        MatchedUserPageComponent,\n        MatchedModalComponent,\n        ConversationListComponent,\n        MatchedUserProfilePageComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        UserProfileModule,\n        UiModule,\n        MatMenuModule,\n        ModalsModule,\n        ModerationModule,\n    ],\n    exports: [\n        MatchesPageComponent,\n        MatchedUserPageComponent,\n        MatchedUserProfilePageComponent,\n    ],\n})\nexport class MatchingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConversationListComponent"
                        },
                        {
                            "name": "MatchListComponent"
                        },
                        {
                            "name": "MatchedModalComponent"
                        },
                        {
                            "name": "MatchedUserPageComponent"
                        },
                        {
                            "name": "MatchedUserProfilePageComponent"
                        },
                        {
                            "name": "MatchesPageComponent"
                        },
                        {
                            "name": "SwipingPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ModalsModule"
                        },
                        {
                            "name": "ModerationModule"
                        },
                        {
                            "name": "UiModule"
                        },
                        {
                            "name": "UserProfileModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MatchedUserPageComponent"
                        },
                        {
                            "name": "MatchedUserProfilePageComponent"
                        },
                        {
                            "name": "MatchesPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalsModule",
            "id": "module-ModalsModule-2f14b8bb5441fc5f78228d0c85d88f85eb09b237cd456b7376b57bad1d57b5431beb5a2673b34fc41184151e89ed3d2000da05dbe9c305d14e19ee75b041c6e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/modals/modals.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DefaultModalComponent } from './components/default-modal/default-modal.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n    declarations: [DefaultModalComponent],\n    imports: [CommonModule, MatDialogModule],\n})\nexport class ModalsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModerationModule",
            "id": "module-ModerationModule-49c02a367f5b1cebfe961ac46ffc78f6acd99a77ca7695f055b18b9e81ec48560cdb4eee614c212feecf389f26d4d956b9e7c2b6c34896ef4988d91afcebfca6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/moderation/moderation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ReportUserModalComponent } from './components/report-user-modal/report-user-modal.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ModalsModule } from '../modals/modals.module';\n\n@NgModule({\n    declarations: [ReportUserModalComponent],\n    imports: [\n        CommonModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        ReactiveFormsModule,\n        MatSnackBarModule,\n        ModalsModule,\n    ],\n})\nexport class ModerationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ReportUserModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ModalsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "id": "module-UiModule-c83aa2542a6432bc1bf84c5386a3cc2210a72e0840cda29810f3023bf6cc1acc3093d6c3a2bc1c9fd20c0b3dcbe27a435c097b64f6fa7deb75fe41b1b7a30aae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/ui/ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LayoutComponent } from './components/layout/layout.component';\nimport { CardComponent } from './components/card/card.component';\nimport { LayoutActionComponent } from './components/layout-action/layout-action.component';\nimport { ButtonComponent } from './components/button/button.component';\nimport { RouterModule } from '@angular/router';\nimport { ImageComponent } from './components/image/image.component';\nimport { CloudinaryModule } from '@cloudinary/ng';\n\n@NgModule({\n    declarations: [\n        LayoutComponent,\n        CardComponent,\n        LayoutActionComponent,\n        ButtonComponent,\n        ImageComponent,\n    ],\n    imports: [CommonModule, RouterModule, CloudinaryModule],\n    exports: [\n        LayoutComponent,\n        LayoutActionComponent,\n        CardComponent,\n        ButtonComponent,\n        ImageComponent,\n    ],\n})\nexport class UiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "LayoutActionComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "LayoutActionComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-e5ae35dfc361e35fb5769a0698f4462c4866d01682c868f797a02540c9ef6b0139742803f9e563375c6f00861902d6698bc70040147f8dab695351ff77c8f6d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DeleteUserModalComponent } from './components/delete-user-modal/delete-user-modal.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { UiModule } from '../ui/ui.module';\n\n@NgModule({\n    declarations: [DeleteUserModalComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatDialogModule,\n        UiModule,\n    ],\n})\nexport class UserModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DeleteUserModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileModule",
            "id": "module-UserProfileModule-370d172aa8f43f07d2796e4b5aa2afe5b4ef77ca4a0088d1611c8d77d773506567465f0aecd9b988206e561f3f27672adb97ed7456949b09c529336c6bd4a98c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/user-profile/user-profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserProfilePageComponent } from './pages/user-profile-page/user-profile-page.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { UserProfileFormComponent } from './components/user-profile-form/user-profile-form.component';\nimport { UserProfileCardComponent } from './components/user-profile-card/user-profile-card.component';\nimport { ImageModule } from '../image/image.module';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { UserProfileEditPageComponent } from './pages/user-profile-edit-page/user-profile-edit-page.component';\nimport { UiModule } from '../ui/ui.module';\nimport {\n    MAT_FORM_FIELD_DEFAULT_OPTIONS,\n    MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { UserProfilePreviewComponent } from './pages/user-profile-preview/user-profile-preview.component';\n\n@NgModule({\n    declarations: [\n        UserProfilePageComponent,\n        UserProfileFormComponent,\n        UserProfileCardComponent,\n        UserProfileEditPageComponent,\n        UserProfilePreviewComponent,\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        UiModule,\n        ImageModule,\n        MatMenuModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatSnackBarModule,\n    ],\n    exports: [\n        UserProfilePageComponent,\n        UserProfileEditPageComponent,\n        UserProfileCardComponent,\n        UserProfilePreviewComponent,\n    ],\n    providers: [\n        {\n            provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n            useValue: { appearance: 'outline' },\n        },\n    ],\n})\nexport class UserProfileModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserProfileCardComponent"
                        },
                        {
                            "name": "UserProfileEditPageComponent"
                        },
                        {
                            "name": "UserProfileFormComponent"
                        },
                        {
                            "name": "UserProfilePageComponent"
                        },
                        {
                            "name": "UserProfilePreviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ImageModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UserProfileCardComponent"
                        },
                        {
                            "name": "UserProfileEditPageComponent"
                        },
                        {
                            "name": "UserProfilePageComponent"
                        },
                        {
                            "name": "UserProfilePreviewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ValidationModule",
            "id": "module-ValidationModule-7486f9d331574c8dae543e1dfba79dc8e7208d191ea7f4a41152dc2b831565296b7ba9556138825b44f3cd32ab0c3439ec32c453ed6ca12b3e50001e23ae0198",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/validation/validation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [],\n    imports: [CommonModule],\n})\nexport class ValidationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ABOUT_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about'"
            },
            {
                "name": "aboutRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/about-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes.map((route) => ({\n    ...route,\n    path: route.path?.replace(/^\\//, ''),\n}))"
            },
            {
                "name": "ACCEPTABLE_USE_POLICY_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/rules/policies/acceptable-use-policy'"
            },
            {
                "name": "AID_ORGANIZATIONS_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/ressources/aid-organizations'"
            },
            {
                "name": "arrayContainedInValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/validators/contained-in-validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl<V[]>): ValidationErrors | null => {\n        if (\n            control.value &&\n            !control.value.filter((v) => typeof(v) === 'string' ? v.length : true).every((item: V) =>\n                array.find((arrayItem) => predicate(arrayItem, item)),\n            )\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
            },
            {
                "name": "arrayContainedInValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/validators/profile-picture-validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl<V[]>): ValidationErrors | null => {\n        if (\n            control.value &&\n            !control.value.filter((v) => typeof(v) === 'string' ? v.length : true).every((item: V) =>\n                array.find((arrayItem) => predicate(arrayItem, item)),\n            )\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
            },
            {
                "name": "ASSOCIATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/associations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    'CEGM',\n    'CEGMines',\n    'CEGP',\n    'CEAP',\n    'CEGA',\n    'CEGBiomed',\n    'CEGCh',\n    'CEGCi',\n    'CEGE',\n    'CEGéo',\n    'CEGI',\n    'CEGInfo',\n    'CEGL',\n    'Agenda',\n    'Allo-Poly',\n    'Association des étudiants musulmans (AEMUDM)',\n    'Bannière de Polytechnique',\n    'CCGP - Comité de consultation en gestion de Polytechnique',\n    \"CCIP - Comité des Compétitions d'Ingénierie de Polytechnique\",\n    \"Chapitre étudiant de l'OSA-SPIE\",\n    'CLÉE - Comité de Liaison Étudiants/Entreprises de Polytechnique',\n    'Club Poly Énergies',\n    'Comic',\n    \"Comité à l'éducation pour l'année préparatoire\",\n    'Comité international de projets outre-mer (CIPO)',\n    'Foire aux livres',\n    'Houblonneries',\n    'Ingénieurs sans frontières (ISF)',\n    'Jeux de Génie - EPM',\n    'Le Polyscope',\n    'Le Pub',\n    'PINEP',\n    'Poly-Débat',\n    'Poly-FI',\n    'Poly-Habs',\n    'Poly-international',\n    'Poly-Monde',\n    'Poly-Out',\n    'Poly-Party',\n    'Poly-Projet',\n    'Poly-Show',\n    'Poly-Théâtre',\n    'PolyAir',\n    'PolyExplore',\n    'PolyFinances',\n    'PolyJam',\n    'PolyParcs',\n    'Polyphonie',\n    'PolyPhoto',\n    'PolyRad',\n    'PolySphère',\n    'PolySports',\n    'PolyTV',\n    'PolyVoile',\n    'Poly Entrepreneuriat',\n    'Poly Hx',\n    'Projet PC2',\n    'Promo 146',\n    'Station Polytechnique',\n    'STEP',\n]"
            },
            {
                "name": "BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/image/constants/uploadcare.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://ucarecdn.com/'"
            },
            {
                "name": "confirmPasswordValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/validators/confirm-password-validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(passwordControlName: string = 'password') =>\n    (control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            control.parent &&\n            control.parent.get(passwordControlName) &&\n            control.value !== control.parent!.get(passwordControlName)!.value\n        ) {\n            return { passwordMismatch: true };\n        }\n        return null;\n    }"
            },
            {
                "name": "CONSENT_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/ressources/consent'"
            },
            {
                "name": "containedInValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/validators/contained-in-validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            !array.find((item) => predicate(item, control.value))\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        title: undefined,\n        icon: undefined,\n        content: 'This is a danger card',\n        color: 'danger',\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/conversation-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        conversations: [\n            {\n                value: of({\n                    userId: 0,\n                    name: 'John Doe',\n                    pictures: [\n                        'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                    ],\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent by me',\n                    lastMessageAuthorId: 1,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n            {\n                value: of({\n                    userId: 2,\n                    name: 'Jane Doe',\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent user',\n                    lastMessageAuthorId: 2,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n        ] as MatchListItemClass[],\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/match-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        matches: [\n            {\n                value: of({\n                    userId: 0,\n                    name: 'John Doe',\n                    pictures: [\n                        'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                    ],\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent by me',\n                    lastMessageAuthorId: 1,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n            {\n                value: of({\n                    userId: 2,\n                    name: 'Jane Doe',\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent user',\n                    lastMessageAuthorId: 2,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n        ] as MatchListItemClass[],\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "DRINKING_HABITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/lifestyle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'socially',\n        name: 'Socialement',\n    },\n    {\n        id: 'often',\n        name: 'Souvent',\n    },\n    {\n        id: 'party',\n        name: 'Party animal',\n    },\n]"
            },
            {
                "name": "DRUGS_HABITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/lifestyle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'sometimes',\n        name: 'Parfois',\n    },\n    {\n        id: 'socially',\n        name: 'Sociallement',\n    },\n    {\n        id: 'stoner',\n        name: 'Stoner',\n    },\n]"
            },
            {
                "name": "EMAIL_VALIDATION_TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/user-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'email-verification-token'"
            },
            {
                "name": "EMAIL_VALIDATION_URL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/user-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\/verify-email\\?(?:.+&)?(?:token=(?<token>[a-zA-Z0-9._-]+))/gm"
            },
            {
                "name": "EMOJI_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])+$/"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/conversation-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        conversations: [],\n    },\n}"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/match-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        matches: [],\n    },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    ws: {\n        url: 'ws://localhost:3000',\n        reconnectInterval: 5000,\n        reconnectAttempts: 5,\n    },\n    api: {\n        url: 'http://localhost:3000',\n    },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true,\n    ws: {\n        url: 'ws://api.polytinder.com',\n        reconnectInterval: 5000,\n        reconnectAttempts: 5,\n    },\n    api: {\n        url: 'https://api.polytinder.com',\n    },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/stories/status-page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isLoading: false,\n        isError: true,\n        message: 'Error!',\n    },\n}"
            },
            {
                "name": "GENDER_IDENTITIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/gender.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    'Agenre',\n    'Ambisexué',\n    'Amphigame',\n    'Androgyne',\n    'Androgynie',\n    'Autogynéphilie',\n    'Bardache',\n    'Bi-spiritualité',\n    'Bigenre',\n    'Binarité de genre',\n    'Bispirituel',\n    'Bispirituelle',\n    'Bissu',\n    'Butch',\n    'Camp',\n    'Castrat',\n    'Çauz',\n    'Ceuxelles',\n    'Cis het',\n    'Cisgenre',\n    'Demi-fille',\n    'Demi-garçon',\n    'Demi-genre',\n    'Diamorique',\n    'Drag king',\n    'Drag queen',\n    'Dyacis',\n    'Efféminé',\n    'El',\n    'Emo-sexualité',\n    'En questionnement',\n    'Enby',\n    'Eunuque',\n    'Femme',\n    'Garçonne',\n    'Gender fluid',\n    'Genderflux',\n    'Genderqueer',\n    'Genre X',\n    'Gynandre',\n    'Gynoïde',\n    'Hijra',\n    'Hommasse',\n    'Homme',\n    'Iel',\n    'Ielle',\n    'Ille',\n    'Mahu',\n    'Mâle',\n    'Masculin',\n    'Masculinisation',\n    'Mix',\n    'Multigenre',\n    'Nat-kadaw',\n    'Neutrois',\n    'New half',\n    'Non binaire',\n    'Omnigenre',\n    'Pangenre',\n    'Rae rae',\n    'Transidentité',\n    'Travelo',\n    'Travesti',\n    'Troisième genre',\n    'Two-spirit',\n]"
            },
            {
                "name": "GENDER_PREFERENCES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/gender.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'man',\n        name: 'Homme',\n    },\n    {\n        id: 'woman',\n        name: 'Femme',\n    },\n    {\n        id: 'all',\n        name: 'Tout le monde',\n    },\n]"
            },
            {
                "name": "GENDERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/gender.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'man',\n        name: 'Homme',\n    },\n    {\n        id: 'woman',\n        name: 'Femme',\n    },\n    {\n        id: 'other',\n        name: 'Autre',\n    },\n]"
            },
            {
                "name": "groupMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/utils/messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(messages: Message[]): MessageGroup[] => {\n    const groupedMessages: MessageGroup[] = [];\n    let currentGroup: MessageGroup | undefined = undefined;\n    let previousMessage: Message | undefined = undefined;\n\n    for (const message of messages) {\n        message.timestamp = new Date(message.timestamp);\n\n        if (!previousMessage || !isSameGroup(message, previousMessage)) {\n            currentGroup = {\n                timestamp: message.timestamp,\n                senderId: message.senderId,\n                messages: [],\n            };\n            groupedMessages.push(currentGroup);\n        }\n\n        currentGroup!.messages.push(message);\n\n        previousMessage = message;\n    }\n\n    return groupedMessages;\n}"
            },
            {
                "name": "HOME_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/'"
            },
            {
                "name": "HOW_TO_BLOCK_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/security/how-to-block'"
            },
            {
                "name": "HOW_TO_REPORT_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/security/how-to-report'"
            },
            {
                "name": "HOW_TO_UNMATCH_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/security/how-to-unmatch'"
            },
            {
                "name": "INCLUSIVITY_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/ressources/inclusivity'"
            },
            {
                "name": "INTERESTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/interests.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    'Animation stop-motion',\n    'Antiquités',\n    'Apiculture',\n    'Archéologie',\n    'Astronomie',\n    'Bandes dessinées',\n    'Barbecue',\n    'Basketball',\n    'Bibliophilie',\n    'Billard',\n    'Bingo',\n    'Botanique',\n    'Bougie artisanale',\n    'Bricolage',\n    'Bridge',\n    'Broderie',\n    'Calligraphie',\n    'Camping',\n    'Canoë-kayak',\n    'Chasse au trésor',\n    'Chasse photographique',\n    'Chorale communautaire',\n    \"Cinéma d'animation\",\n    'Cinéma',\n    'Collection de pièces de monnaie',\n    'Collection de timbres',\n    'Comédies musicales',\n    'Confitures maison',\n    'Course à pied',\n    'Course de chevaux',\n    'Couture',\n    'Création de bijoux',\n    'Création de mosaïques',\n    'Critique de films',\n    'Crochet',\n    'Cuisine végétalienne',\n    'Cuisine',\n    'Curling',\n    'Danse contemporaine',\n    'Danse',\n    'Découpage',\n    'Dégustation de thé',\n    'Dégustation de vins',\n    'Dessin',\n    'Disney',\n    'Doctor Who',\n    'Documentaires',\n    'Échecs',\n    'Écriture',\n    \"Élevage d'animaux de compagnie\",\n    \"Élevage de plantes d'intérieur\",\n    'Énigmes et casse-tête',\n    'Escalade',\n    'Escape games',\n    'Escrime',\n    'Étude de la généalogie',\n    'Étude de la météorologie',\n    'Étude des constellations',\n    'Étude des étoiles',\n    'Étude des insectes',\n    'Étude des oiseaux',\n    'Étude des sciences naturelles',\n    'Fabrication de bijoux',\n    'Fabrication de chandelles',\n    'Fléchettes',\n    'Football',\n    'Game of Thrones',\n    'Géologie',\n    'Golf',\n    'Graffiti',\n    'Guitare',\n    'Gymnastique',\n    'Harry Potter',\n    'Hip-hop',\n    \"Histoire de l'art\",\n    'Jardinage',\n    'Jazz',\n    'Jeu de cartes',\n    'Jeu de dames',\n    'Jeu de dominos',\n    'Jeu de tarot',\n    'Jeux de société',\n    'Jeux vidéo',\n    'Jogging',\n    'Karaoké',\n    'Lancer de frisbee',\n    'Le Seigneur des Anneaux',\n    'Lecture de poésie',\n    'Lecture de roman classique',\n    'Lecture',\n    'Livres audio',\n    'Manga',\n    'Marionnettes',\n    'Marvel Cinematic Universe',\n    'Mixologie',\n    'Modélisme',\n    'Mosaïque',\n    'Musique classique',\n    'Musique électronique',\n    'Musique',\n    'Natation',\n    'Observation des étoiles',\n    'Observation des papillons',\n    'Origami',\n    'Patin à roulettes',\n    'Patinage artistique',\n    'Patinage de vitesse',\n    'Pâtisserie',\n    'Pêche',\n    'Peinture',\n    'Percussions',\n    'Pétanque',\n    'Photographie',\n    'Piano',\n    'Plongée',\n    'Poésie',\n    'Pokémon',\n    'Poker',\n    'Polo à cheval',\n    'Poterie',\n    'Randonnée',\n    'Réalisation de vidéos familiales',\n    'Reconstitution historique',\n    'Rédaction de lettres manuscrites',\n    'Reliure de livres',\n    'Réparation de vélos',\n    'Restauration de meubles anciens',\n    \"Rock'n'roll\",\n    'Romans policiers',\n    'Science-fiction',\n    'Scrapbooking',\n    'Sculpture',\n    'Séries télévisées',\n    'Ski',\n    'Star Trek',\n    'Star Wars',\n    'Sudoku',\n    'Taylor Swift',\n    'Tennis',\n    'The Hunger Games',\n    'Théâtre',\n    'Tissage',\n    'Tricot',\n    'Ultimate Frisbee',\n    'Vélo',\n    'Violon',\n    'Visite de jardins botaniques',\n    \"Visite de musées d'art\",\n    'Visite de parcs nationaux',\n    'Vol en montgolfière',\n    'Voyage',\n    'Water-polo',\n]"
            },
            {
                "name": "isSameGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/utils/messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: Message, previousMessage: Message): boolean => {\n    return (\n        message.senderId === previousMessage.senderId &&\n        message.timestamp.getTime() - previousMessage.timestamp.getTime() <\n            5 * 60 * 1000\n    );\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/stories/status-page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isLoading: true,\n    },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navigation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    decorators: [\n        moduleMetadata({\n            providers: [\n                {\n                    provide: SessionService,\n                    useValue: {\n                        isLoggedIn: () => of(true),\n                        session: of({}),\n                    },\n                },\n            ],\n        }),\n    ],\n}"
            },
            {
                "name": "LOGIN_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/login'"
            },
            {
                "name": "LOOKING_FOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/looking-for.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'lt',\n        name: 'Long terme',\n        emoji: '💕',\n        color: '234, 46, 172',\n    },\n    {\n        id: 'ltst',\n        name: 'Long terme, ouvert à du court terme',\n        emoji: '💖',\n        color: '238, 106, 192',\n    },\n    {\n        id: 'stlt',\n        name: 'Court terme, ouvert à du long terme',\n        emoji: '🍻',\n        color: '253, 223, 131',\n    },\n    {\n        id: 'fun',\n        name: 'Fun',\n        emoji: '🍆',\n        color: '110, 55, 107',\n    },\n    {\n        id: 'friend',\n        name: 'Amitié',\n        emoji: '🤝',\n        color: '255, 228, 115',\n    },\n    {\n        id: 'idk',\n        name: 'Je sais pas',\n        emoji: '🤷‍♀️',\n        color: '255, 228, 115',\n    },\n]"
            },
            {
                "name": "MATCHED_USER_PROFILE_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/matches/profile/:id'"
            },
            {
                "name": "MATCHED_USER_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/matches/:id'"
            },
            {
                "name": "MATCHES_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/matches'"
            },
            {
                "name": "MAX_FILE_SIZE_BYTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/image/constants/uploadcare.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "500000000"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navigation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NavigationComponent>",
                "defaultValue": "{\n    title: 'Navigation',\n    component: NavigationComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                MatSnackBarModule,\n                UiModule,\n            ],\n            providers: [\n                AuthenticationService,\n                UserProfileService,\n                ValidationService,\n                PublicProfileService,\n            ],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"height: 100vh;\">${story}</div>`,\n        ),\n    ],\n    parameters: {\n        layout: 'fullscreen',\n    },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AuthenticationLayoutComponent>",
                "defaultValue": "{\n    title: 'Authentication/Layout',\n    component: AuthenticationLayoutComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                UiModule,\n                BrowserAnimationsModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n                MatFormFieldModule,\n                MatInputModule,\n            ],\n        }),\n    ],\n    args: {\n        name: 'Authentication',\n        description: 'Authentication description',\n        formGroup: new FormGroup({\n            email: new FormControl('', []),\n        }),\n        loading: false,\n        disabled: false,\n    },\n    argTypes: {\n        loading: {\n            type: 'boolean',\n        },\n        disabled: {\n            type: 'boolean',\n        },\n        formGroup: {\n            table: {\n                disable: true,\n            },\n        },\n        formsErrors: {\n            table: {\n                disable: true,\n            },\n        },\n    },\n    parameters: {\n        layout: 'fullscreen',\n    },\n    render: (args: AuthenticationLayoutComponent) => ({\n        props: args,\n        template: `\n            <app-authentication-layout\n                [name]=\"name\"\n                [description]=\"description\"\n                [formGroup]=\"formGroup\"\n                [loading]=\"loading\"\n                [disabled]=\"disabled\"\n            >\n                <mat-form-field auth-form-field>\n                    <mat-label><i class=\"fas fa-envelope\"></i> Email</mat-label>\n                    <input formControlName=\"email\" matInput>\n                </mat-form-field>\n            </app-authentication-layout>\n        `,\n    }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/stories/status-page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StatusPageComponent>",
                "defaultValue": "{\n    title: 'Status Page',\n    component: StatusPageComponent,\n    parameters: {\n        layout: 'fullscreen',\n    },\n    args: {\n        message: 'Loading...',\n        isLoading: true,\n        isError: false,\n    },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/conversation-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ConversationListComponent>",
                "defaultValue": "{\n    title: 'Matching/Conversation List',\n    component: ConversationListComponent,\n    decorators: [\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n        moduleMetadata({\n            imports: [\n                RouterTestingModule.withRoutes([\n                    { path: '**', component: ConversationListComponent },\n                ]),\n                HttpClientTestingModule,\n                MatDialogModule,\n                MatSnackBarModule,\n                MatMenuModule,\n                UiModule,\n            ],\n            providers: [\n                MatchingService,\n                ModerationService,\n                PublicProfileService,\n                ValidationService,\n                ModalService,\n            ],\n        }),\n    ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/stories/match-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MatchListComponent>",
                "defaultValue": "{\n    title: 'Matching/Match List',\n    component: MatchListComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [UiModule],\n        }),\n    ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryType>",
                "defaultValue": "{\n    title: 'UI/Button',\n    component: ButtonComponent,\n    argTypes: {\n        color: {\n            control: 'select',\n            options: ['primary', 'default', 'transparent', 'danger'],\n        },\n        interactable: {\n            control: 'select',\n            options: ['default', 'large', 'small', 'none'],\n        },\n    },\n    args: {\n        content: 'This is a button',\n        color: 'default',\n        disabled: false,\n        icon: 'fas fa-flag',\n        iconOnly: false,\n        isLoading: false,\n        shadow: false,\n        interactable: 'small',\n    },\n    decorators: [\n        componentWrapperDecorator(\n            (story) => `<div style=\"display: flex;\">${story}</div>`,\n        ),\n    ],\n    render: (args: StoryType) => ({\n        props: args,\n        template: `\n            <app-button\n                link=\"/about\"\n                [color]=\"color\"\n                [disabled]=\"disabled\"\n                [icon]=\"icon\"\n                [iconOnly]=\"iconOnly\"\n                [isLoading]=\"isLoading\"\n                [shadow]=\"shadow\"\n                [interactable]=\"interactable\"\n            >\n                ${args.content}\n            </app-button>\n        `,\n    }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryType>",
                "defaultValue": "{\n    title: 'UI/Card',\n    component: CardComponent,\n    args: {\n        title: 'This is a title',\n        icon: 'fas fa-flag',\n        content: 'This is a card',\n        noPadding: false,\n        color: 'default',\n    },\n    render: (args: StoryType) => ({\n        props: args,\n        template: `\n            <app-card\n                [icon]=\"icon\"\n                [title]=\"title\"\n                [anchor]=\"anchor\"\n                [noPadding]=\"noPadding\"\n                [color]=\"color\"\n            >\n                ${args.content}\n            </app-card>\n        `,\n    }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryType>",
                "defaultValue": "{\n    title: 'UI/Layout',\n    component: LayoutComponent,\n    decorators: [\n        moduleMetadata({\n            declarations: [LayoutComponent, LayoutActionComponent],\n        }),\n    ],\n    args: {\n        title: 'Title',\n        content: 'This is the content',\n        actionsLeft: [\n            {\n                icon: 'fas fa-chevron-left',\n            },\n        ],\n        actionsRight: [\n            {\n                content: 'Action',\n            },\n            {\n                icon: 'fas fa-ellipsis-v',\n            },\n        ],\n    },\n    parameters: {\n        layout: 'fullscreen',\n    },\n    render: (args) => ({\n        props: args,\n        template: `\n            <app-layout>\n                <span layout-title>{{ title }}</span>\n\n                <app-layout-action\n                    layout-action-left\n                    *ngFor=\"let action of actionsLeft\"\n                    [icon]=\"action.icon\"\n                    [content]=\"action.content\"\n                    [disabled]=\"action.disabled\"\n                    [iconAdjustH]=\"action.iconAdjustH\"\n                    [iconAdjustV]=\"action.iconAdjustV\"\n                ></app-layout-action>\n\n                <app-layout-action\n                    layout-action-right\n                    *ngFor=\"let action of actionsRight\"\n                    [icon]=\"action.icon\"\n                    [content]=\"action.content\"\n                    [disabled]=\"action.disabled\"\n                    [iconAdjustH]=\"action.iconAdjustH\"\n                    [iconAdjustV]=\"action.iconAdjustV\"\n                ></app-layout-action>\n\n                <span style=\"padding: 0 24px;\">{{ content }}</span>\n            </app-layout>\n        `,\n    }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<UserProfileCardComponent>",
                "defaultValue": "{\n    title: 'User Profile/Card',\n    component: UserProfileCardComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                importProvidersFrom(MatDialogModule),\n                importProvidersFrom(MatSnackBarModule),\n                importProvidersFrom(HttpClientModule),\n            ],\n        }),\n        moduleMetadata({\n            declarations: [ImageComponent, ButtonComponent],\n        }),\n        componentWrapperDecorator(\n            (story) =>\n                `<div style=\"max-width: 400px; height: 600px;\">${story}</div>`,\n        ),\n    ],\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n            ],\n            interests: ['Dogs', 'Taylor Swift'],\n            associations: ['PolyRad', 'Poly-Hab'],\n            program: 'bacc_log',\n            height: 186,\n            lookingFor: 'ltst',\n            relationshipType: 'mono',\n            zodiacSign: 'cancer',\n            drinking: 'never',\n            smoking: 'never',\n            drugs: 'never',\n            workout: 'sometimes',\n            jobTitle: 'Barista',\n            jobCompany: 'Starbucks',\n            livingIn: 'Montreal',\n            gender: 'Man',\n            genderCategory: 'other',\n            genderPreference: 'all',\n            sexualOrientation: 'Queer',\n        },\n    },\n    render: (args) => ({\n        props: args,\n        template: `\n            <app-user-profile-card\n                [userProfile]=\"userProfile\"\n                [disableModeration]=\"disableModeration\"\n                style=\"width: 100%; height: 100%;\"\n            ></app-user-profile-card>\n        `,\n    }),\n}"
            },
            {
                "name": "Minimal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n            ],\n            genderCategory: 'other',\n            genderPreference: 'all',\n        },\n    },\n}"
            },
            {
                "name": "NAVIGATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        text: 'Découvrir',\n        href: SWIPING_ROUTE,\n        icon: 'telescope',\n    },\n    {\n        text: 'Mes matchs',\n        href: MATCHES_ROUTE,\n        icon: 'comment',\n    },\n    {\n        text: 'Mon profil',\n        href: PROFILE_ROUTE,\n        icon: 'user',\n    },\n]"
            },
            {
                "name": "NAVIGATION_NOT_LOGGED_IN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        text: 'Se connecter',\n        href: '/login',\n        icon: 'sign-in',\n    },\n    {\n        text: \"S'inscrire\",\n        href: '/signup',\n        icon: 'user-plus',\n    },\n    {\n        text: 'À propos',\n        href: '/about',\n        icon: 'info-circle',\n    },\n]"
            },
            {
                "name": "NO_NAVIGATION_ROUTES_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MATCHED_USER_ROUTE]"
            },
            {
                "name": "NoPictures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [],\n            genderCategory: 'other',\n            genderPreference: 'all',\n        },\n    },\n}"
            },
            {
                "name": "NotLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navigation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    decorators: [\n        moduleMetadata({\n            providers: [\n                {\n                    provide: SessionService,\n                    useValue: {\n                        isLoggedIn: () => of(false),\n                        session: of({}),\n                    },\n                },\n            ],\n        }),\n    ],\n}"
            },
            {
                "name": "onlyHasEmoji",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string): boolean => {\n    return EMOJI_REGEX.test(str);\n}"
            },
            {
                "name": "PASSWORD_RESET_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/password-reset'"
            },
            {
                "name": "POLICIES_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/rules/policies'"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        color: 'primary',\n    },\n}"
            },
            {
                "name": "PRIVACY_POLICY_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/rules/policies/privacy-policy'"
            },
            {
                "name": "privateRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n    // canActivate: [privateRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n}"
            },
            {
                "name": "privateRouteGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/guards/private-route/private-route.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "() => {\n    const router = inject(Router);\n    const sessionService = inject(SessionService);\n    const stateService = inject(StateService);\n\n    return combineLatest([\n        sessionService.isLoggedIn(),\n        stateService.state,\n    ]).pipe(\n        map(([isLoggedIn, state]) => {\n            if (state !== State.READY) {\n                return true;\n            }\n\n            if (!isLoggedIn) {\n                router.navigate([LOGIN_ROUTE]);\n            }\n\n            return isLoggedIn;\n        }),\n    );\n}"
            },
            {
                "name": "PROFILE_EDIT_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/profile-edit'"
            },
            {
                "name": "PROFILE_PREVIEW_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/profile-preview'"
            },
            {
                "name": "PROFILE_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/profile'"
            },
            {
                "name": "profilePictureValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/validators/profile-picture-validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            control.value.filter((v: (string | undefined)) => typeof(v) === 'string' ? v.length : true).length > 0\n        ) {\n            return { picturesNotValid: true };\n        }\n        return null;\n    }"
            },
            {
                "name": "PROGRAMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/programs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    bacc_aero: 'Génie aérospatial',\n    bacc_bio: 'Génie biomédical',\n    bacc_chim: 'Génie chimique',\n    bacc_civ: 'Génie civil',\n    bacc_mine: 'Génie des mines',\n    bacc_ele: 'Génie électrique',\n    bacc_geo: 'Génie géologique',\n    bacc_ind: 'Génie industriel',\n    bacc_info: 'Génie informatique',\n    bacc_log: 'Génie logiciel',\n    bacc_meca: 'Génie mécanique',\n    bacc_phys: 'Génie physique',\n    mat_dd: 'Maîtrise développement durable',\n    mat_ergo: 'Maîtrise ergonomie et ergonomie du logiciel',\n    mat_aero: 'Maîtrise génie aérospatial',\n    mat_bio: 'Maîtrise génie biomédical',\n    mat_chim: 'Maîtrise génie chimique',\n    mat_civ: 'Maîtrise génie civil',\n    mat_mat: 'Maîtrise génie des matériaux',\n    mat_ele: 'Maîtrise génie électrique',\n    mat_eners: 'Maîtrise génie énergétique et nucléaire',\n    mat_ind: 'Maîtrise génie industriel',\n    mat_infolog: 'Maîtrise génie informatique et génie logiciel',\n    mat_meca: 'Maîtrise génie mécanique',\n    mat_mine: 'Maîtrise génie minéral',\n    mat_phys: 'Maîtrise génie physique',\n    mat_math: 'Maîtrise mathématiques',\n    mat_tech: 'Maîtrise technologie',\n    other_cert_micro: 'Certificats et microprogrammes de 1e cycle',\n    other_form_cont: 'Formation continue',\n    other_dd_hec: 'Double diplôme HEC Montréal (Baccalauréat)',\n}"
            },
            {
                "name": "PROGRAMS_ARRAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/programs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.entries(PROGRAMS).map(([id, name]) => ({\n    id,\n    name,\n}))"
            },
            {
                "name": "PROGRAMS_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/programs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    bacc: 'Baccalauréat',\n    mat: 'Maîtrise',\n    other: 'Autres',\n}"
            },
            {
                "name": "PUBLIC_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/image/constants/uploadcare.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'c0ec01f83f7cfe5121f1'"
            },
            {
                "name": "PUBLIC_ROUTES_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[LOGIN_ROUTE, SIGNUP_ROUTE]"
            },
            {
                "name": "PUBLICLY_ACCESSIBLE_ROUTES_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    LOGIN_ROUTE,\n    SIGNUP_ROUTE,\n    REQUEST_PASSWORD_RESET_ROUTE,\n    PASSWORD_RESET_ROUTE,\n]"
            },
            {
                "name": "publicRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n    // canActivate: [publicRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n}"
            },
            {
                "name": "publicRouteGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/guards/public-route/public-route.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "() => {\n    const router = inject(Router);\n    const sessionService = inject(SessionService);\n    const stateService = inject(StateService);\n\n    return combineLatest([\n        sessionService.isLoggedIn(),\n        stateService.state,\n    ]).pipe(\n        map(([isLoggedIn, state]) => {\n            if (state !== State.READY) {\n                return true;\n            }\n\n            if (isLoggedIn) {\n                router.navigate([HOME_ROUTE]);\n            }\n\n            return !isLoggedIn;\n        }),\n    );\n}"
            },
            {
                "name": "QUESTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/matching/constants/questions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    \"Qu'est-ce que tu penses que je fais pour m'amuser ?\",\n    'Comment as-tu choisi ton programme ?',\n    \"Si tu n'étais pas à l'école, que ferais-tu ?\",\n    'À quelle distance de chez toi es-tu ?',\n    \"Comment se passe l'école en un mot ?\",\n    \"Que penses-tu que faire après l'école ?\",\n    \"Qu'est-ce que je devrais regarder dès que j'aurai du temps ?\",\n    \"Quelle caractéristique principale penses-tu que j'ai ?\",\n    'Quelle est la chose la plus inexplicable qui te soit arrivée ?',\n    'Quelle est ta caractéristique la plus toxique que tu peux admettre ?',\n    'À quoi penses-tu trop en ce moment ?',\n    \"Qu'est-ce que toi plus jeune aurait du mal à croire de ta vie aujourd'hui ?\",\n    'Quel est ton adjectif préféré pour te décrire et pourquoi ?',\n    'Quelle est la plus grosse erreur que tu aies commise ?',\n    'Si nous étions un groupe de musique, quel serait notre nom ?',\n    'Quel souvenir te fait instantanément sourire ?',\n    'À quoi penses-tu le plus souvent ?',\n    'Quel est quelque chose que tu apprécies et dont tu ne te lasses jamais ?',\n    \"Quelle est une chose qui devrait être enseignée, mais ne l'est pas ?\",\n    \"Si tu avais une étiquette d'avertissement, que dirait-elle ?\",\n    'Un étranger a-t-il déjà changé ta vie ?',\n    'Quel est le compliment que tu préfères recevoir ?',\n    'Quel est ton tout premier souvenir de bonheur ?',\n    \"Si tu devais résumer l'espèce humaine en 3 mots, quels seraient ces mots ?\",\n    \"Si tu mourais aujourd'hui, quels regrets aurais-tu de ta vie ?\",\n    'Pour quoi es-tu le plus reconnaissant en ce moment ?',\n    'Quel conseil en matière de rencontres donnerais-tu à ton moi plus jeune ?',\n    'Quelle est la dernière chose que tu as mentie ?',\n    \"Quand as-tu ressenti pour la dernière fois de la chance d'être toi ?\",\n    \"Quelle est la pire hypothèse que quelqu'un ait faite à ton sujet ?\",\n    \"Qu'as-tu le plus peur : de l'échec ou du succès, et pourquoi ?\",\n    \"Quelle est la caractéristique de personnalité que tu détestes le plus chez quelqu'un ?\",\n    'Quelle est ta citation de chanson préférée à laquelle tu peux penser spontanément ?',\n]"
            },
            {
                "name": "RELATIONSHIP_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/relationship-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'mono',\n        name: 'Monogame',\n    },\n    {\n        id: 'poly',\n        name: 'Polygame',\n    },\n    {\n        id: 'open',\n        name: 'En relation ouverte',\n    },\n    {\n        id: 'exp',\n        name: \"Ouvert à l'expérience\",\n    },\n]"
            },
            {
                "name": "REPORT_REASONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/modals/constants/reports.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    \"Faux profil ou usurpation d'identité\",\n    'La personne est mineure',\n    'Nudité ou contenu explicite/innaproprié',\n    'Comportement abusif ou harcèlement',\n    'Autre',\n]"
            },
            {
                "name": "REQUEST_PASSWORD_RESET_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/request-password-reset'"
            },
            {
                "name": "routeNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes.map((route) => ({\n    ...route,\n    path: route.path?.replace(/^\\//, ''),\n}))"
            },
            {
                "name": "RULES_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/rules/general-rules'"
            },
            {
                "name": "SESSION_TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/authentication/constants/local-storage.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user-session-token'"
            },
            {
                "name": "SEXUAL_ORIENTATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/gender.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'straight',\n        name: 'Hétéro',\n    },\n    {\n        id: 'gay',\n        name: 'Gay',\n    },\n    {\n        id: 'lestbian',\n        name: 'Lesbienne',\n    },\n    {\n        id: 'bi',\n        name: 'Bisexual',\n    },\n    {\n        id: 'pan',\n        name: 'Pansexuel',\n    },\n    {\n        id: 'ace',\n        name: 'Asexuel',\n    },\n    {\n        id: 'queer',\n        name: 'Queer',\n    },\n    {\n        id: 'questioning',\n        name: 'En questionnement',\n    },\n    {\n        id: 'aromantic',\n        name: 'Aromantique',\n    },\n    {\n        id: 'other',\n        name: 'Autre',\n    },\n]"
            },
            {
                "name": "SIGNUP_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/signup'"
            },
            {
                "name": "SMOKING_HABITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/lifestyle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'quitting',\n        name: \"En train d'arrêter\",\n    },\n    {\n        id: 'socially',\n        name: 'Socialement',\n    },\n    {\n        id: 'when_drinking',\n        name: 'Quand je bois',\n    },\n    {\n        id: 'party',\n        name: 'Party animal',\n    },\n]"
            },
            {
                "name": "SWIPING_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/swiping'"
            },
            {
                "name": "TERMS_AND_CONDITIONS_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/about/constants/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/about/rules/policies/terms-and-conditions'"
            },
            {
                "name": "WORKOUT_HABITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/lifestyle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n        emoji: '🥔',\n    },\n    {\n        id: 'sometimes',\n        name: 'Parfois',\n        emoji: '🚶',\n    },\n    {\n        id: 'often',\n        name: 'Souvent',\n        emoji: '🏃',\n    },\n    {\n        id: 'athlete',\n        name: 'Athlète',\n        emoji: '🏋️‍♀️',\n    },\n]"
            },
            {
                "name": "ZODIAC_SIGNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user-profile/constants/zodiac.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        id: 'capricorn',\n        name: 'Capricorne',\n        emoji: '♑',\n    },\n    {\n        id: 'aquarius',\n        name: 'Verseau',\n        emoji: '♒',\n    },\n    {\n        id: 'pisces',\n        name: 'Poissons',\n        emoji: '♓',\n    },\n    {\n        id: 'aries',\n        name: 'Bélier',\n        emoji: '♈',\n    },\n    {\n        id: 'taurus',\n        name: 'Taureau',\n        emoji: '♉',\n    },\n    {\n        id: 'gemini',\n        name: 'Gémeaux',\n        emoji: '♊',\n    },\n    {\n        id: 'cancer',\n        name: 'Cancer',\n        emoji: '♋',\n    },\n    {\n        id: 'leo',\n        name: 'Lion',\n        emoji: '♌',\n    },\n    {\n        id: 'virgo',\n        name: 'Vierge',\n        emoji: '♍',\n    },\n    {\n        id: 'libra',\n        name: 'Balance',\n        emoji: '♎',\n    },\n    {\n        id: 'scorpio',\n        name: 'Scorpion',\n        emoji: '♏',\n    },\n    {\n        id: 'sagittarius',\n        name: 'Sagittaire',\n        emoji: '♐',\n    },\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CloudinaryWidgetSourceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"local\" | \"url\" | \"camera\" | \"dropbox\" | \"image_search\" | \"shutterstock\" | \"gettyimages\" | \"istock\" | \"unsplash\" | \"google_drive\"",
                "file": "src/types/cloudinary.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ImageSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ImageSizeFixed | ImageSizeWidth | ImageSizeHeight | ImageSizeSquare",
                "file": "src/modules/ui/components/image/image.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "LayoutAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/modules/ui/models/layout.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "LayoutAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/modules/ui/stories/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 197
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NavigationComponent>",
                "file": "src/stories/navigation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AuthenticationLayoutComponent>",
                "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StatusPageComponent>",
                "file": "src/modules/authentication/stories/status-page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ConversationListComponent>",
                "file": "src/modules/matching/stories/conversation-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MatchListComponent>",
                "file": "src/modules/matching/stories/match-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryType>",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryType>",
                "file": "src/modules/ui/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryType>",
                "file": "src/modules/ui/stories/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<UserProfileCardComponent>",
                "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/modules/ui/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/modules/ui/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/modules/ui/stories/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            }
        ],
        "enumerations": [
            {
                "name": "State",
                "childs": [
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    },
                    {
                        "name": "READY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/states.ts"
            }
        ],
        "groupedVariables": {
            "src/modules/about/constants/routes.ts": [
                {
                    "name": "ABOUT_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about'"
                },
                {
                    "name": "ACCEPTABLE_USE_POLICY_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/rules/policies/acceptable-use-policy'"
                },
                {
                    "name": "AID_ORGANIZATIONS_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/ressources/aid-organizations'"
                },
                {
                    "name": "CONSENT_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/ressources/consent'"
                },
                {
                    "name": "HOW_TO_BLOCK_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/security/how-to-block'"
                },
                {
                    "name": "HOW_TO_REPORT_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/security/how-to-report'"
                },
                {
                    "name": "HOW_TO_UNMATCH_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/security/how-to-unmatch'"
                },
                {
                    "name": "INCLUSIVITY_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/ressources/inclusivity'"
                },
                {
                    "name": "POLICIES_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/rules/policies'"
                },
                {
                    "name": "PRIVACY_POLICY_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/rules/policies/privacy-policy'"
                },
                {
                    "name": "RULES_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/rules/general-rules'"
                },
                {
                    "name": "TERMS_AND_CONDITIONS_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/about/rules/policies/terms-and-conditions'"
                }
            ],
            "src/modules/about/about-routing.module.ts": [
                {
                    "name": "aboutRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/about/about-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes.map((route) => ({\n    ...route,\n    path: route.path?.replace(/^\\//, ''),\n}))"
                }
            ],
            "src/modules/user-profile/validators/contained-in-validator.ts": [
                {
                    "name": "arrayContainedInValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/validators/contained-in-validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl<V[]>): ValidationErrors | null => {\n        if (\n            control.value &&\n            !control.value.filter((v) => typeof(v) === 'string' ? v.length : true).every((item: V) =>\n                array.find((arrayItem) => predicate(arrayItem, item)),\n            )\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
                },
                {
                    "name": "containedInValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/validators/contained-in-validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            !array.find((item) => predicate(item, control.value))\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
                }
            ],
            "src/modules/user-profile/validators/profile-picture-validator.ts": [
                {
                    "name": "arrayContainedInValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/validators/profile-picture-validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T, V = any>(\n        array: T[],\n        predicate: (item: T, value: V) => boolean = (item, value) => item == (value as unknown),\n    ) =>\n    (control: AbstractControl<V[]>): ValidationErrors | null => {\n        if (\n            control.value &&\n            !control.value.filter((v) => typeof(v) === 'string' ? v.length : true).every((item: V) =>\n                array.find((arrayItem) => predicate(arrayItem, item)),\n            )\n        ) {\n            return { notContainedIn: true };\n        }\n        return null;\n    }"
                },
                {
                    "name": "profilePictureValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/validators/profile-picture-validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            control.value.filter((v: (string | undefined)) => typeof(v) === 'string' ? v.length : true).length > 0\n        ) {\n            return { picturesNotValid: true };\n        }\n        return null;\n    }"
                }
            ],
            "src/modules/user-profile/constants/associations.ts": [
                {
                    "name": "ASSOCIATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/associations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    'CEGM',\n    'CEGMines',\n    'CEGP',\n    'CEAP',\n    'CEGA',\n    'CEGBiomed',\n    'CEGCh',\n    'CEGCi',\n    'CEGE',\n    'CEGéo',\n    'CEGI',\n    'CEGInfo',\n    'CEGL',\n    'Agenda',\n    'Allo-Poly',\n    'Association des étudiants musulmans (AEMUDM)',\n    'Bannière de Polytechnique',\n    'CCGP - Comité de consultation en gestion de Polytechnique',\n    \"CCIP - Comité des Compétitions d'Ingénierie de Polytechnique\",\n    \"Chapitre étudiant de l'OSA-SPIE\",\n    'CLÉE - Comité de Liaison Étudiants/Entreprises de Polytechnique',\n    'Club Poly Énergies',\n    'Comic',\n    \"Comité à l'éducation pour l'année préparatoire\",\n    'Comité international de projets outre-mer (CIPO)',\n    'Foire aux livres',\n    'Houblonneries',\n    'Ingénieurs sans frontières (ISF)',\n    'Jeux de Génie - EPM',\n    'Le Polyscope',\n    'Le Pub',\n    'PINEP',\n    'Poly-Débat',\n    'Poly-FI',\n    'Poly-Habs',\n    'Poly-international',\n    'Poly-Monde',\n    'Poly-Out',\n    'Poly-Party',\n    'Poly-Projet',\n    'Poly-Show',\n    'Poly-Théâtre',\n    'PolyAir',\n    'PolyExplore',\n    'PolyFinances',\n    'PolyJam',\n    'PolyParcs',\n    'Polyphonie',\n    'PolyPhoto',\n    'PolyRad',\n    'PolySphère',\n    'PolySports',\n    'PolyTV',\n    'PolyVoile',\n    'Poly Entrepreneuriat',\n    'Poly Hx',\n    'Projet PC2',\n    'Promo 146',\n    'Station Polytechnique',\n    'STEP',\n]"
                }
            ],
            "src/modules/image/constants/uploadcare.ts": [
                {
                    "name": "BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/image/constants/uploadcare.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://ucarecdn.com/'"
                },
                {
                    "name": "MAX_FILE_SIZE_BYTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/image/constants/uploadcare.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "500000000"
                },
                {
                    "name": "PUBLIC_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/image/constants/uploadcare.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'c0ec01f83f7cfe5121f1'"
                }
            ],
            "src/modules/authentication/validators/confirm-password-validator.ts": [
                {
                    "name": "confirmPasswordValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/validators/confirm-password-validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(passwordControlName: string = 'password') =>\n    (control: AbstractControl): ValidationErrors | null => {\n        if (\n            control.value &&\n            control.parent &&\n            control.parent.get(passwordControlName) &&\n            control.value !== control.parent!.get(passwordControlName)!.value\n        ) {\n            return { passwordMismatch: true };\n        }\n        return null;\n    }"
                }
            ],
            "src/modules/ui/stories/card.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        title: undefined,\n        icon: undefined,\n        content: 'This is a danger card',\n        color: 'danger',\n    },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryType>",
                    "defaultValue": "{\n    title: 'UI/Card',\n    component: CardComponent,\n    args: {\n        title: 'This is a title',\n        icon: 'fas fa-flag',\n        content: 'This is a card',\n        noPadding: false,\n        color: 'default',\n    },\n    render: (args: StoryType) => ({\n        props: args,\n        template: `\n            <app-card\n                [icon]=\"icon\"\n                [title]=\"title\"\n                [anchor]=\"anchor\"\n                [noPadding]=\"noPadding\"\n                [color]=\"color\"\n            >\n                ${args.content}\n            </app-card>\n        `,\n    }),\n}"
                }
            ],
            "src/modules/authentication/stories/authentication-layout.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AuthenticationLayoutComponent>",
                    "defaultValue": "{\n    title: 'Authentication/Layout',\n    component: AuthenticationLayoutComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                UiModule,\n                BrowserAnimationsModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n                MatFormFieldModule,\n                MatInputModule,\n            ],\n        }),\n    ],\n    args: {\n        name: 'Authentication',\n        description: 'Authentication description',\n        formGroup: new FormGroup({\n            email: new FormControl('', []),\n        }),\n        loading: false,\n        disabled: false,\n    },\n    argTypes: {\n        loading: {\n            type: 'boolean',\n        },\n        disabled: {\n            type: 'boolean',\n        },\n        formGroup: {\n            table: {\n                disable: true,\n            },\n        },\n        formsErrors: {\n            table: {\n                disable: true,\n            },\n        },\n    },\n    parameters: {\n        layout: 'fullscreen',\n    },\n    render: (args: AuthenticationLayoutComponent) => ({\n        props: args,\n        template: `\n            <app-authentication-layout\n                [name]=\"name\"\n                [description]=\"description\"\n                [formGroup]=\"formGroup\"\n                [loading]=\"loading\"\n                [disabled]=\"disabled\"\n            >\n                <mat-form-field auth-form-field>\n                    <mat-label><i class=\"fas fa-envelope\"></i> Email</mat-label>\n                    <input formControlName=\"email\" matInput>\n                </mat-form-field>\n            </app-authentication-layout>\n        `,\n    }),\n}"
                }
            ],
            "src/modules/matching/stories/conversation-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/conversation-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        conversations: [\n            {\n                value: of({\n                    userId: 0,\n                    name: 'John Doe',\n                    pictures: [\n                        'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                    ],\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent by me',\n                    lastMessageAuthorId: 1,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n            {\n                value: of({\n                    userId: 2,\n                    name: 'Jane Doe',\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent user',\n                    lastMessageAuthorId: 2,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n        ] as MatchListItemClass[],\n    },\n}"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/conversation-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        conversations: [],\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/conversation-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ConversationListComponent>",
                    "defaultValue": "{\n    title: 'Matching/Conversation List',\n    component: ConversationListComponent,\n    decorators: [\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n        moduleMetadata({\n            imports: [\n                RouterTestingModule.withRoutes([\n                    { path: '**', component: ConversationListComponent },\n                ]),\n                HttpClientTestingModule,\n                MatDialogModule,\n                MatSnackBarModule,\n                MatMenuModule,\n                UiModule,\n            ],\n            providers: [\n                MatchingService,\n                ModerationService,\n                PublicProfileService,\n                ValidationService,\n                ModalService,\n            ],\n        }),\n    ],\n}"
                }
            ],
            "src/modules/matching/stories/match-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/match-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        matches: [\n            {\n                value: of({\n                    userId: 0,\n                    name: 'John Doe',\n                    pictures: [\n                        'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                    ],\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent by me',\n                    lastMessageAuthorId: 1,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n            {\n                value: of({\n                    userId: 2,\n                    name: 'Jane Doe',\n                }),\n                queryInfo: {\n                    messagesCount: 0,\n                    unreadMessagesCount: 0,\n                    lastMessage: 'Last message sent user',\n                    lastMessageAuthorId: 2,\n                    lastMessageTimestamp: new Date(),\n                },\n            },\n        ] as MatchListItemClass[],\n    },\n}"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/match-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        matches: [],\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/stories/match-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MatchListComponent>",
                    "defaultValue": "{\n    title: 'Matching/Match List',\n    component: MatchListComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [UiModule],\n        }),\n    ],\n}"
                }
            ],
            "src/modules/ui/stories/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isLoading: true,\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryType>",
                    "defaultValue": "{\n    title: 'UI/Button',\n    component: ButtonComponent,\n    argTypes: {\n        color: {\n            control: 'select',\n            options: ['primary', 'default', 'transparent', 'danger'],\n        },\n        interactable: {\n            control: 'select',\n            options: ['default', 'large', 'small', 'none'],\n        },\n    },\n    args: {\n        content: 'This is a button',\n        color: 'default',\n        disabled: false,\n        icon: 'fas fa-flag',\n        iconOnly: false,\n        isLoading: false,\n        shadow: false,\n        interactable: 'small',\n    },\n    decorators: [\n        componentWrapperDecorator(\n            (story) => `<div style=\"display: flex;\">${story}</div>`,\n        ),\n    ],\n    render: (args: StoryType) => ({\n        props: args,\n        template: `\n            <app-button\n                link=\"/about\"\n                [color]=\"color\"\n                [disabled]=\"disabled\"\n                [icon]=\"icon\"\n                [iconOnly]=\"iconOnly\"\n                [isLoading]=\"isLoading\"\n                [shadow]=\"shadow\"\n                [interactable]=\"interactable\"\n            >\n                ${args.content}\n            </app-button>\n        `,\n    }),\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        color: 'primary',\n    },\n}"
                }
            ],
            "src/modules/ui/stories/layout.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/ui/stories/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryType>",
                    "defaultValue": "{\n    title: 'UI/Layout',\n    component: LayoutComponent,\n    decorators: [\n        moduleMetadata({\n            declarations: [LayoutComponent, LayoutActionComponent],\n        }),\n    ],\n    args: {\n        title: 'Title',\n        content: 'This is the content',\n        actionsLeft: [\n            {\n                icon: 'fas fa-chevron-left',\n            },\n        ],\n        actionsRight: [\n            {\n                content: 'Action',\n            },\n            {\n                icon: 'fas fa-ellipsis-v',\n            },\n        ],\n    },\n    parameters: {\n        layout: 'fullscreen',\n    },\n    render: (args) => ({\n        props: args,\n        template: `\n            <app-layout>\n                <span layout-title>{{ title }}</span>\n\n                <app-layout-action\n                    layout-action-left\n                    *ngFor=\"let action of actionsLeft\"\n                    [icon]=\"action.icon\"\n                    [content]=\"action.content\"\n                    [disabled]=\"action.disabled\"\n                    [iconAdjustH]=\"action.iconAdjustH\"\n                    [iconAdjustV]=\"action.iconAdjustV\"\n                ></app-layout-action>\n\n                <app-layout-action\n                    layout-action-right\n                    *ngFor=\"let action of actionsRight\"\n                    [icon]=\"action.icon\"\n                    [content]=\"action.content\"\n                    [disabled]=\"action.disabled\"\n                    [iconAdjustH]=\"action.iconAdjustH\"\n                    [iconAdjustV]=\"action.iconAdjustV\"\n                ></app-layout-action>\n\n                <span style=\"padding: 0 24px;\">{{ content }}</span>\n            </app-layout>\n        `,\n    }),\n}"
                }
            ],
            "src/modules/user-profile/stories/user-profile-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<UserProfileCardComponent>",
                    "defaultValue": "{\n    title: 'User Profile/Card',\n    component: UserProfileCardComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                importProvidersFrom(MatDialogModule),\n                importProvidersFrom(MatSnackBarModule),\n                importProvidersFrom(HttpClientModule),\n            ],\n        }),\n        moduleMetadata({\n            declarations: [ImageComponent, ButtonComponent],\n        }),\n        componentWrapperDecorator(\n            (story) =>\n                `<div style=\"max-width: 400px; height: 600px;\">${story}</div>`,\n        ),\n    ],\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n            ],\n            interests: ['Dogs', 'Taylor Swift'],\n            associations: ['PolyRad', 'Poly-Hab'],\n            program: 'bacc_log',\n            height: 186,\n            lookingFor: 'ltst',\n            relationshipType: 'mono',\n            zodiacSign: 'cancer',\n            drinking: 'never',\n            smoking: 'never',\n            drugs: 'never',\n            workout: 'sometimes',\n            jobTitle: 'Barista',\n            jobCompany: 'Starbucks',\n            livingIn: 'Montreal',\n            gender: 'Man',\n            genderCategory: 'other',\n            genderPreference: 'all',\n            sexualOrientation: 'Queer',\n        },\n    },\n    render: (args) => ({\n        props: args,\n        template: `\n            <app-user-profile-card\n                [userProfile]=\"userProfile\"\n                [disableModeration]=\"disableModeration\"\n                style=\"width: 100%; height: 100%;\"\n            ></app-user-profile-card>\n        `,\n    }),\n}"
                },
                {
                    "name": "Minimal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [\n                'https://ucarecdn.com/890d60d3-21aa-42f6-9124-3ca0da561f4b/-/crop/626x834/252,0/-/preview/',\n            ],\n            genderCategory: 'other',\n            genderPreference: 'all',\n        },\n    },\n}"
                },
                {
                    "name": "NoPictures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        userProfile: {\n            userId: 0,\n            name: 'John Doe',\n            age: 22,\n            bio: 'Hello, I am John Doe',\n            pictures: [],\n            genderCategory: 'other',\n            genderPreference: 'all',\n        },\n    },\n}"
                }
            ],
            "src/modules/user-profile/constants/lifestyle.ts": [
                {
                    "name": "DRINKING_HABITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/lifestyle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'socially',\n        name: 'Socialement',\n    },\n    {\n        id: 'often',\n        name: 'Souvent',\n    },\n    {\n        id: 'party',\n        name: 'Party animal',\n    },\n]"
                },
                {
                    "name": "DRUGS_HABITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/lifestyle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'sometimes',\n        name: 'Parfois',\n    },\n    {\n        id: 'socially',\n        name: 'Sociallement',\n    },\n    {\n        id: 'stoner',\n        name: 'Stoner',\n    },\n]"
                },
                {
                    "name": "SMOKING_HABITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/lifestyle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n    },\n    {\n        id: 'quitting',\n        name: \"En train d'arrêter\",\n    },\n    {\n        id: 'socially',\n        name: 'Socialement',\n    },\n    {\n        id: 'when_drinking',\n        name: 'Quand je bois',\n    },\n    {\n        id: 'party',\n        name: 'Party animal',\n    },\n]"
                },
                {
                    "name": "WORKOUT_HABITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/lifestyle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'never',\n        name: 'Jamais',\n        emoji: '🥔',\n    },\n    {\n        id: 'sometimes',\n        name: 'Parfois',\n        emoji: '🚶',\n    },\n    {\n        id: 'often',\n        name: 'Souvent',\n        emoji: '🏃',\n    },\n    {\n        id: 'athlete',\n        name: 'Athlète',\n        emoji: '🏋️‍♀️',\n    },\n]"
                }
            ],
            "src/constants/user-validation.ts": [
                {
                    "name": "EMAIL_VALIDATION_TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/user-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'email-verification-token'"
                },
                {
                    "name": "EMAIL_VALIDATION_URL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/user-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\/verify-email\\?(?:.+&)?(?:token=(?<token>[a-zA-Z0-9._-]+))/gm"
                }
            ],
            "src/modules/matching/utils/utils.ts": [
                {
                    "name": "EMOJI_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])+$/"
                },
                {
                    "name": "onlyHasEmoji",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string): boolean => {\n    return EMOJI_REGEX.test(str);\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    ws: {\n        url: 'ws://localhost:3000',\n        reconnectInterval: 5000,\n        reconnectAttempts: 5,\n    },\n    api: {\n        url: 'http://localhost:3000',\n    },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n    ws: {\n        url: 'ws://api.polytinder.com',\n        reconnectInterval: 5000,\n        reconnectAttempts: 5,\n    },\n    api: {\n        url: 'https://api.polytinder.com',\n    },\n}"
                }
            ],
            "src/modules/authentication/stories/status-page.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/stories/status-page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isLoading: false,\n        isError: true,\n        message: 'Error!',\n    },\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/stories/status-page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/stories/status-page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StatusPageComponent>",
                    "defaultValue": "{\n    title: 'Status Page',\n    component: StatusPageComponent,\n    parameters: {\n        layout: 'fullscreen',\n    },\n    args: {\n        message: 'Loading...',\n        isLoading: true,\n        isError: false,\n    },\n}"
                }
            ],
            "src/modules/user-profile/constants/gender.ts": [
                {
                    "name": "GENDER_IDENTITIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/gender.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    'Agenre',\n    'Ambisexué',\n    'Amphigame',\n    'Androgyne',\n    'Androgynie',\n    'Autogynéphilie',\n    'Bardache',\n    'Bi-spiritualité',\n    'Bigenre',\n    'Binarité de genre',\n    'Bispirituel',\n    'Bispirituelle',\n    'Bissu',\n    'Butch',\n    'Camp',\n    'Castrat',\n    'Çauz',\n    'Ceuxelles',\n    'Cis het',\n    'Cisgenre',\n    'Demi-fille',\n    'Demi-garçon',\n    'Demi-genre',\n    'Diamorique',\n    'Drag king',\n    'Drag queen',\n    'Dyacis',\n    'Efféminé',\n    'El',\n    'Emo-sexualité',\n    'En questionnement',\n    'Enby',\n    'Eunuque',\n    'Femme',\n    'Garçonne',\n    'Gender fluid',\n    'Genderflux',\n    'Genderqueer',\n    'Genre X',\n    'Gynandre',\n    'Gynoïde',\n    'Hijra',\n    'Hommasse',\n    'Homme',\n    'Iel',\n    'Ielle',\n    'Ille',\n    'Mahu',\n    'Mâle',\n    'Masculin',\n    'Masculinisation',\n    'Mix',\n    'Multigenre',\n    'Nat-kadaw',\n    'Neutrois',\n    'New half',\n    'Non binaire',\n    'Omnigenre',\n    'Pangenre',\n    'Rae rae',\n    'Transidentité',\n    'Travelo',\n    'Travesti',\n    'Troisième genre',\n    'Two-spirit',\n]"
                },
                {
                    "name": "GENDER_PREFERENCES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/gender.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'man',\n        name: 'Homme',\n    },\n    {\n        id: 'woman',\n        name: 'Femme',\n    },\n    {\n        id: 'all',\n        name: 'Tout le monde',\n    },\n]"
                },
                {
                    "name": "GENDERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/gender.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'man',\n        name: 'Homme',\n    },\n    {\n        id: 'woman',\n        name: 'Femme',\n    },\n    {\n        id: 'other',\n        name: 'Autre',\n    },\n]"
                },
                {
                    "name": "SEXUAL_ORIENTATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/gender.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'straight',\n        name: 'Hétéro',\n    },\n    {\n        id: 'gay',\n        name: 'Gay',\n    },\n    {\n        id: 'lestbian',\n        name: 'Lesbienne',\n    },\n    {\n        id: 'bi',\n        name: 'Bisexual',\n    },\n    {\n        id: 'pan',\n        name: 'Pansexuel',\n    },\n    {\n        id: 'ace',\n        name: 'Asexuel',\n    },\n    {\n        id: 'queer',\n        name: 'Queer',\n    },\n    {\n        id: 'questioning',\n        name: 'En questionnement',\n    },\n    {\n        id: 'aromantic',\n        name: 'Aromantique',\n    },\n    {\n        id: 'other',\n        name: 'Autre',\n    },\n]"
                }
            ],
            "src/modules/matching/utils/messages.ts": [
                {
                    "name": "groupMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/utils/messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(messages: Message[]): MessageGroup[] => {\n    const groupedMessages: MessageGroup[] = [];\n    let currentGroup: MessageGroup | undefined = undefined;\n    let previousMessage: Message | undefined = undefined;\n\n    for (const message of messages) {\n        message.timestamp = new Date(message.timestamp);\n\n        if (!previousMessage || !isSameGroup(message, previousMessage)) {\n            currentGroup = {\n                timestamp: message.timestamp,\n                senderId: message.senderId,\n                messages: [],\n            };\n            groupedMessages.push(currentGroup);\n        }\n\n        currentGroup!.messages.push(message);\n\n        previousMessage = message;\n    }\n\n    return groupedMessages;\n}"
                },
                {
                    "name": "isSameGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/utils/messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: Message, previousMessage: Message): boolean => {\n    return (\n        message.senderId === previousMessage.senderId &&\n        message.timestamp.getTime() - previousMessage.timestamp.getTime() <\n            5 * 60 * 1000\n    );\n}"
                }
            ],
            "src/constants/routes.ts": [
                {
                    "name": "HOME_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/'"
                },
                {
                    "name": "LOGIN_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/login'"
                },
                {
                    "name": "MATCHED_USER_PROFILE_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/matches/profile/:id'"
                },
                {
                    "name": "MATCHED_USER_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/matches/:id'"
                },
                {
                    "name": "MATCHES_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/matches'"
                },
                {
                    "name": "NO_NAVIGATION_ROUTES_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MATCHED_USER_ROUTE]"
                },
                {
                    "name": "PASSWORD_RESET_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/password-reset'"
                },
                {
                    "name": "PROFILE_EDIT_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/profile-edit'"
                },
                {
                    "name": "PROFILE_PREVIEW_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/profile-preview'"
                },
                {
                    "name": "PROFILE_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/profile'"
                },
                {
                    "name": "PUBLIC_ROUTES_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[LOGIN_ROUTE, SIGNUP_ROUTE]"
                },
                {
                    "name": "PUBLICLY_ACCESSIBLE_ROUTES_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    LOGIN_ROUTE,\n    SIGNUP_ROUTE,\n    REQUEST_PASSWORD_RESET_ROUTE,\n    PASSWORD_RESET_ROUTE,\n]"
                },
                {
                    "name": "REQUEST_PASSWORD_RESET_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/request-password-reset'"
                },
                {
                    "name": "SIGNUP_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/signup'"
                },
                {
                    "name": "SWIPING_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/swiping'"
                }
            ],
            "src/modules/user-profile/constants/interests.ts": [
                {
                    "name": "INTERESTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/interests.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    'Animation stop-motion',\n    'Antiquités',\n    'Apiculture',\n    'Archéologie',\n    'Astronomie',\n    'Bandes dessinées',\n    'Barbecue',\n    'Basketball',\n    'Bibliophilie',\n    'Billard',\n    'Bingo',\n    'Botanique',\n    'Bougie artisanale',\n    'Bricolage',\n    'Bridge',\n    'Broderie',\n    'Calligraphie',\n    'Camping',\n    'Canoë-kayak',\n    'Chasse au trésor',\n    'Chasse photographique',\n    'Chorale communautaire',\n    \"Cinéma d'animation\",\n    'Cinéma',\n    'Collection de pièces de monnaie',\n    'Collection de timbres',\n    'Comédies musicales',\n    'Confitures maison',\n    'Course à pied',\n    'Course de chevaux',\n    'Couture',\n    'Création de bijoux',\n    'Création de mosaïques',\n    'Critique de films',\n    'Crochet',\n    'Cuisine végétalienne',\n    'Cuisine',\n    'Curling',\n    'Danse contemporaine',\n    'Danse',\n    'Découpage',\n    'Dégustation de thé',\n    'Dégustation de vins',\n    'Dessin',\n    'Disney',\n    'Doctor Who',\n    'Documentaires',\n    'Échecs',\n    'Écriture',\n    \"Élevage d'animaux de compagnie\",\n    \"Élevage de plantes d'intérieur\",\n    'Énigmes et casse-tête',\n    'Escalade',\n    'Escape games',\n    'Escrime',\n    'Étude de la généalogie',\n    'Étude de la météorologie',\n    'Étude des constellations',\n    'Étude des étoiles',\n    'Étude des insectes',\n    'Étude des oiseaux',\n    'Étude des sciences naturelles',\n    'Fabrication de bijoux',\n    'Fabrication de chandelles',\n    'Fléchettes',\n    'Football',\n    'Game of Thrones',\n    'Géologie',\n    'Golf',\n    'Graffiti',\n    'Guitare',\n    'Gymnastique',\n    'Harry Potter',\n    'Hip-hop',\n    \"Histoire de l'art\",\n    'Jardinage',\n    'Jazz',\n    'Jeu de cartes',\n    'Jeu de dames',\n    'Jeu de dominos',\n    'Jeu de tarot',\n    'Jeux de société',\n    'Jeux vidéo',\n    'Jogging',\n    'Karaoké',\n    'Lancer de frisbee',\n    'Le Seigneur des Anneaux',\n    'Lecture de poésie',\n    'Lecture de roman classique',\n    'Lecture',\n    'Livres audio',\n    'Manga',\n    'Marionnettes',\n    'Marvel Cinematic Universe',\n    'Mixologie',\n    'Modélisme',\n    'Mosaïque',\n    'Musique classique',\n    'Musique électronique',\n    'Musique',\n    'Natation',\n    'Observation des étoiles',\n    'Observation des papillons',\n    'Origami',\n    'Patin à roulettes',\n    'Patinage artistique',\n    'Patinage de vitesse',\n    'Pâtisserie',\n    'Pêche',\n    'Peinture',\n    'Percussions',\n    'Pétanque',\n    'Photographie',\n    'Piano',\n    'Plongée',\n    'Poésie',\n    'Pokémon',\n    'Poker',\n    'Polo à cheval',\n    'Poterie',\n    'Randonnée',\n    'Réalisation de vidéos familiales',\n    'Reconstitution historique',\n    'Rédaction de lettres manuscrites',\n    'Reliure de livres',\n    'Réparation de vélos',\n    'Restauration de meubles anciens',\n    \"Rock'n'roll\",\n    'Romans policiers',\n    'Science-fiction',\n    'Scrapbooking',\n    'Sculpture',\n    'Séries télévisées',\n    'Ski',\n    'Star Trek',\n    'Star Wars',\n    'Sudoku',\n    'Taylor Swift',\n    'Tennis',\n    'The Hunger Games',\n    'Théâtre',\n    'Tissage',\n    'Tricot',\n    'Ultimate Frisbee',\n    'Vélo',\n    'Violon',\n    'Visite de jardins botaniques',\n    \"Visite de musées d'art\",\n    'Visite de parcs nationaux',\n    'Vol en montgolfière',\n    'Voyage',\n    'Water-polo',\n]"
                }
            ],
            "src/stories/navigation.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navigation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    decorators: [\n        moduleMetadata({\n            providers: [\n                {\n                    provide: SessionService,\n                    useValue: {\n                        isLoggedIn: () => of(true),\n                        session: of({}),\n                    },\n                },\n            ],\n        }),\n    ],\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navigation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NavigationComponent>",
                    "defaultValue": "{\n    title: 'Navigation',\n    component: NavigationComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                MatSnackBarModule,\n                UiModule,\n            ],\n            providers: [\n                AuthenticationService,\n                UserProfileService,\n                ValidationService,\n                PublicProfileService,\n            ],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"height: 100vh;\">${story}</div>`,\n        ),\n    ],\n    parameters: {\n        layout: 'fullscreen',\n    },\n}"
                },
                {
                    "name": "NotLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navigation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    decorators: [\n        moduleMetadata({\n            providers: [\n                {\n                    provide: SessionService,\n                    useValue: {\n                        isLoggedIn: () => of(false),\n                        session: of({}),\n                    },\n                },\n            ],\n        }),\n    ],\n}"
                }
            ],
            "src/modules/user-profile/constants/looking-for.ts": [
                {
                    "name": "LOOKING_FOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/looking-for.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'lt',\n        name: 'Long terme',\n        emoji: '💕',\n        color: '234, 46, 172',\n    },\n    {\n        id: 'ltst',\n        name: 'Long terme, ouvert à du court terme',\n        emoji: '💖',\n        color: '238, 106, 192',\n    },\n    {\n        id: 'stlt',\n        name: 'Court terme, ouvert à du long terme',\n        emoji: '🍻',\n        color: '253, 223, 131',\n    },\n    {\n        id: 'fun',\n        name: 'Fun',\n        emoji: '🍆',\n        color: '110, 55, 107',\n    },\n    {\n        id: 'friend',\n        name: 'Amitié',\n        emoji: '🤝',\n        color: '255, 228, 115',\n    },\n    {\n        id: 'idk',\n        name: 'Je sais pas',\n        emoji: '🤷‍♀️',\n        color: '255, 228, 115',\n    },\n]"
                }
            ],
            "src/constants/navigation.ts": [
                {
                    "name": "NAVIGATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        text: 'Découvrir',\n        href: SWIPING_ROUTE,\n        icon: 'telescope',\n    },\n    {\n        text: 'Mes matchs',\n        href: MATCHES_ROUTE,\n        icon: 'comment',\n    },\n    {\n        text: 'Mon profil',\n        href: PROFILE_ROUTE,\n        icon: 'user',\n    },\n]"
                },
                {
                    "name": "NAVIGATION_NOT_LOGGED_IN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        text: 'Se connecter',\n        href: '/login',\n        icon: 'sign-in',\n    },\n    {\n        text: \"S'inscrire\",\n        href: '/signup',\n        icon: 'user-plus',\n    },\n    {\n        text: 'À propos',\n        href: '/about',\n        icon: 'info-circle',\n    },\n]"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ],
            "src/modules/app-routing.module.ts": [
                {
                    "name": "privateRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n    // canActivate: [privateRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n}"
                },
                {
                    "name": "publicRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n    // canActivate: [publicRouteGuard],\n    runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n}"
                },
                {
                    "name": "routeNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes.map((route) => ({\n    ...route,\n    path: route.path?.replace(/^\\//, ''),\n}))"
                }
            ],
            "src/guards/private-route/private-route.guard.ts": [
                {
                    "name": "privateRouteGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/guards/private-route/private-route.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "() => {\n    const router = inject(Router);\n    const sessionService = inject(SessionService);\n    const stateService = inject(StateService);\n\n    return combineLatest([\n        sessionService.isLoggedIn(),\n        stateService.state,\n    ]).pipe(\n        map(([isLoggedIn, state]) => {\n            if (state !== State.READY) {\n                return true;\n            }\n\n            if (!isLoggedIn) {\n                router.navigate([LOGIN_ROUTE]);\n            }\n\n            return isLoggedIn;\n        }),\n    );\n}"
                }
            ],
            "src/modules/user-profile/constants/programs.ts": [
                {
                    "name": "PROGRAMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/programs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    bacc_aero: 'Génie aérospatial',\n    bacc_bio: 'Génie biomédical',\n    bacc_chim: 'Génie chimique',\n    bacc_civ: 'Génie civil',\n    bacc_mine: 'Génie des mines',\n    bacc_ele: 'Génie électrique',\n    bacc_geo: 'Génie géologique',\n    bacc_ind: 'Génie industriel',\n    bacc_info: 'Génie informatique',\n    bacc_log: 'Génie logiciel',\n    bacc_meca: 'Génie mécanique',\n    bacc_phys: 'Génie physique',\n    mat_dd: 'Maîtrise développement durable',\n    mat_ergo: 'Maîtrise ergonomie et ergonomie du logiciel',\n    mat_aero: 'Maîtrise génie aérospatial',\n    mat_bio: 'Maîtrise génie biomédical',\n    mat_chim: 'Maîtrise génie chimique',\n    mat_civ: 'Maîtrise génie civil',\n    mat_mat: 'Maîtrise génie des matériaux',\n    mat_ele: 'Maîtrise génie électrique',\n    mat_eners: 'Maîtrise génie énergétique et nucléaire',\n    mat_ind: 'Maîtrise génie industriel',\n    mat_infolog: 'Maîtrise génie informatique et génie logiciel',\n    mat_meca: 'Maîtrise génie mécanique',\n    mat_mine: 'Maîtrise génie minéral',\n    mat_phys: 'Maîtrise génie physique',\n    mat_math: 'Maîtrise mathématiques',\n    mat_tech: 'Maîtrise technologie',\n    other_cert_micro: 'Certificats et microprogrammes de 1e cycle',\n    other_form_cont: 'Formation continue',\n    other_dd_hec: 'Double diplôme HEC Montréal (Baccalauréat)',\n}"
                },
                {
                    "name": "PROGRAMS_ARRAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/programs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.entries(PROGRAMS).map(([id, name]) => ({\n    id,\n    name,\n}))"
                },
                {
                    "name": "PROGRAMS_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/programs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    bacc: 'Baccalauréat',\n    mat: 'Maîtrise',\n    other: 'Autres',\n}"
                }
            ],
            "src/guards/public-route/public-route.guard.ts": [
                {
                    "name": "publicRouteGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/guards/public-route/public-route.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "() => {\n    const router = inject(Router);\n    const sessionService = inject(SessionService);\n    const stateService = inject(StateService);\n\n    return combineLatest([\n        sessionService.isLoggedIn(),\n        stateService.state,\n    ]).pipe(\n        map(([isLoggedIn, state]) => {\n            if (state !== State.READY) {\n                return true;\n            }\n\n            if (isLoggedIn) {\n                router.navigate([HOME_ROUTE]);\n            }\n\n            return !isLoggedIn;\n        }),\n    );\n}"
                }
            ],
            "src/modules/matching/constants/questions.ts": [
                {
                    "name": "QUESTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/matching/constants/questions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    \"Qu'est-ce que tu penses que je fais pour m'amuser ?\",\n    'Comment as-tu choisi ton programme ?',\n    \"Si tu n'étais pas à l'école, que ferais-tu ?\",\n    'À quelle distance de chez toi es-tu ?',\n    \"Comment se passe l'école en un mot ?\",\n    \"Que penses-tu que faire après l'école ?\",\n    \"Qu'est-ce que je devrais regarder dès que j'aurai du temps ?\",\n    \"Quelle caractéristique principale penses-tu que j'ai ?\",\n    'Quelle est la chose la plus inexplicable qui te soit arrivée ?',\n    'Quelle est ta caractéristique la plus toxique que tu peux admettre ?',\n    'À quoi penses-tu trop en ce moment ?',\n    \"Qu'est-ce que toi plus jeune aurait du mal à croire de ta vie aujourd'hui ?\",\n    'Quel est ton adjectif préféré pour te décrire et pourquoi ?',\n    'Quelle est la plus grosse erreur que tu aies commise ?',\n    'Si nous étions un groupe de musique, quel serait notre nom ?',\n    'Quel souvenir te fait instantanément sourire ?',\n    'À quoi penses-tu le plus souvent ?',\n    'Quel est quelque chose que tu apprécies et dont tu ne te lasses jamais ?',\n    \"Quelle est une chose qui devrait être enseignée, mais ne l'est pas ?\",\n    \"Si tu avais une étiquette d'avertissement, que dirait-elle ?\",\n    'Un étranger a-t-il déjà changé ta vie ?',\n    'Quel est le compliment que tu préfères recevoir ?',\n    'Quel est ton tout premier souvenir de bonheur ?',\n    \"Si tu devais résumer l'espèce humaine en 3 mots, quels seraient ces mots ?\",\n    \"Si tu mourais aujourd'hui, quels regrets aurais-tu de ta vie ?\",\n    'Pour quoi es-tu le plus reconnaissant en ce moment ?',\n    'Quel conseil en matière de rencontres donnerais-tu à ton moi plus jeune ?',\n    'Quelle est la dernière chose que tu as mentie ?',\n    \"Quand as-tu ressenti pour la dernière fois de la chance d'être toi ?\",\n    \"Quelle est la pire hypothèse que quelqu'un ait faite à ton sujet ?\",\n    \"Qu'as-tu le plus peur : de l'échec ou du succès, et pourquoi ?\",\n    \"Quelle est la caractéristique de personnalité que tu détestes le plus chez quelqu'un ?\",\n    'Quelle est ta citation de chanson préférée à laquelle tu peux penser spontanément ?',\n]"
                }
            ],
            "src/modules/user-profile/constants/relationship-type.ts": [
                {
                    "name": "RELATIONSHIP_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/relationship-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'mono',\n        name: 'Monogame',\n    },\n    {\n        id: 'poly',\n        name: 'Polygame',\n    },\n    {\n        id: 'open',\n        name: 'En relation ouverte',\n    },\n    {\n        id: 'exp',\n        name: \"Ouvert à l'expérience\",\n    },\n]"
                }
            ],
            "src/modules/modals/constants/reports.ts": [
                {
                    "name": "REPORT_REASONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/modals/constants/reports.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    \"Faux profil ou usurpation d'identité\",\n    'La personne est mineure',\n    'Nudité ou contenu explicite/innaproprié',\n    'Comportement abusif ou harcèlement',\n    'Autre',\n]"
                }
            ],
            "src/modules/authentication/constants/local-storage.ts": [
                {
                    "name": "SESSION_TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/authentication/constants/local-storage.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user-session-token'"
                }
            ],
            "src/modules/user-profile/constants/zodiac.ts": [
                {
                    "name": "ZODIAC_SIGNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user-profile/constants/zodiac.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        id: 'capricorn',\n        name: 'Capricorne',\n        emoji: '♑',\n    },\n    {\n        id: 'aquarius',\n        name: 'Verseau',\n        emoji: '♒',\n    },\n    {\n        id: 'pisces',\n        name: 'Poissons',\n        emoji: '♓',\n    },\n    {\n        id: 'aries',\n        name: 'Bélier',\n        emoji: '♈',\n    },\n    {\n        id: 'taurus',\n        name: 'Taureau',\n        emoji: '♉',\n    },\n    {\n        id: 'gemini',\n        name: 'Gémeaux',\n        emoji: '♊',\n    },\n    {\n        id: 'cancer',\n        name: 'Cancer',\n        emoji: '♋',\n    },\n    {\n        id: 'leo',\n        name: 'Lion',\n        emoji: '♌',\n    },\n    {\n        id: 'virgo',\n        name: 'Vierge',\n        emoji: '♍',\n    },\n    {\n        id: 'libra',\n        name: 'Balance',\n        emoji: '♎',\n    },\n    {\n        id: 'scorpio',\n        name: 'Scorpion',\n        emoji: '♏',\n    },\n    {\n        id: 'sagittarius',\n        name: 'Sagittaire',\n        emoji: '♐',\n    },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/constants/states.ts": [
                {
                    "name": "State",
                    "childs": [
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        },
                        {
                            "name": "READY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/states.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/types/cloudinary.ts": [
                {
                    "name": "CloudinaryWidgetSourceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"local\" | \"url\" | \"camera\" | \"dropbox\" | \"image_search\" | \"shutterstock\" | \"gettyimages\" | \"istock\" | \"unsplash\" | \"google_drive\"",
                    "file": "src/types/cloudinary.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "src/modules/ui/components/image/image.component.ts": [
                {
                    "name": "ImageSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ImageSizeFixed | ImageSizeWidth | ImageSizeHeight | ImageSizeSquare",
                    "file": "src/modules/ui/components/image/image.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "src/modules/ui/models/layout.ts": [
                {
                    "name": "LayoutAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/modules/ui/models/layout.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/modules/ui/stories/layout.stories.ts": [
                {
                    "name": "LayoutAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/modules/ui/stories/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 197
                },
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryType>",
                    "file": "src/modules/ui/stories/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/modules/ui/stories/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/stories/navigation.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NavigationComponent>",
                    "file": "src/stories/navigation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/modules/authentication/stories/authentication-layout.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AuthenticationLayoutComponent>",
                    "file": "src/modules/authentication/stories/authentication-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/modules/authentication/stories/status-page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StatusPageComponent>",
                    "file": "src/modules/authentication/stories/status-page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/modules/matching/stories/conversation-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ConversationListComponent>",
                    "file": "src/modules/matching/stories/conversation-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/modules/matching/stories/match-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MatchListComponent>",
                    "file": "src/modules/matching/stories/match-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/modules/ui/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryType>",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/modules/ui/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/modules/ui/stories/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryType>",
                    "file": "src/modules/ui/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/modules/ui/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/modules/user-profile/stories/user-profile-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<UserProfileCardComponent>",
                    "file": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "notFoundRoutes",
                "filename": "src/modules/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "**",
                        "redirectTo": "SWIPING_ROUTE",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/status-page/status-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/constants/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION_NOT_LOGGED_IN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOME_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MATCHED_USER_PROFILE_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MATCHED_USER_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MATCHES_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_NAVIGATION_ROUTES_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PASSWORD_RESET_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROFILE_EDIT_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROFILE_PREVIEW_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROFILE_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PUBLIC_ROUTES_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PUBLICLY_ACCESSIBLE_ROUTES_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REQUEST_PASSWORD_RESET_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SWIPING_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/user-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_VALIDATION_TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/constants/user-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_VALIDATION_URL_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/guards/private-route/private-route.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "privateRouteGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/guards/public-route/public-route.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "publicRouteGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/middlewares/api.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/middlewares/auth.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthenticationInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/about-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aboutRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/components/about-card/about-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/components/about-layout/about-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ABOUT_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCEPTABLE_USE_POLICY_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AID_ORGANIZATIONS_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONSENT_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOW_TO_BLOCK_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOW_TO_REPORT_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOW_TO_UNMATCH_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INCLUSIVITY_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POLICIES_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRIVACY_POLICY_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RULES_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/constants/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TERMS_AND_CONDITIONS_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/about-page/about-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/application-rules/acceptable-use-policy/acceptable-use-policy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AcceptableUsePolicyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/application-rules/general-rules-page/general-rules-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GeneralRulesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/application-rules/policies-page/policies-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PoliciesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/application-rules/privacy-policy/privacy-policy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrivacyPolicyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/application-rules/terms-and-conditions/terms-and-conditions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TermsAndConditionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/ressources/aid-organizations-page/aid-organizations-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AidOrganizationsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/ressources/consent-page/consent-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsentPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/ressources/inclusivity-page/inclusivity-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InclusivityPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/security/how-to-block-page/how-to-block-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HowToBlockPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/security/how-to-report-page/how-to-report-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HowToReportPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/about/pages/security/how-to-unmatch/how-to-unmatch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HowToUnmatchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "privateRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "publicRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/components/authentication-layout/authentication-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/constants/local-storage.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/pages/password-reset-page/password-reset-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordResetPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/pages/request-password-reset-page/request-password-reset-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestPasswordResetPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/pages/signup-page/signup-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/services/authentication-service/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/services/session-service/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/stories/authentication-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/stories/authentication-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/stories/status-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/stories/status-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/stories/status-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/authentication/validators/confirm-password-validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmPasswordValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/components/image-control/image-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/constants/uploadcare.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/constants/uploadcare.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_FILE_SIZE_BYTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/constants/uploadcare.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PUBLIC_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/models/event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadcareEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/image/models/image.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadcareFile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/components/conversation-list/conversation-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConversationListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/components/match-list/match-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/components/matched-modal/matched-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchedModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/constants/questions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUESTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/models/match-list-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MatchListItemClass",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/models/public-user-result.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PublicUserResultClass",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/models/public-user-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadedPublicUserResultClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/models/public-user-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotLoadedPublicUserResultClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/pages/matched-user-page/matched-user-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchedUserPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/pages/matched-user-profile-page/matched-user-profile-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchedUserProfilePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/pages/matches-page/matches-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/pages/swiping-page/swiping-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwipingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/services/matching-service/matching.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MatchingService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/services/messages-service/messages.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessagesService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/services/public-profile-service/public-profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PublicProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/conversation-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/conversation-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/conversation-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/match-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/match-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/stories/match-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/utils/messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "groupMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/utils/messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSameGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMOJI_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/matching/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyHasEmoji",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/modals/components/default-modal/default-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/modals/constants/reports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REPORT_REASONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/modals/services/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/modals/types/default-modal.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultModalButtonParameters",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/modules/modals/types/default-modal.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultModalParameters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/moderation/components/report-user-modal/report-user-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportUserModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/moderation/services/moderation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModerationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/image/image.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageSizeFixed",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/image/image.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageSizeHeight",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/image/image.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageSizeSquare",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/image/image.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageSizeWidth",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/layout-action/layout-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/components/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/models/layout.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LayoutActionContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/models/layout.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LayoutActionIcon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/ui/stories/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/components/user-profile-card/user-profile-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/components/user-profile-form/user-profile-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/associations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASSOCIATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/gender.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENDER_IDENTITIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/gender.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENDER_PREFERENCES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/gender.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENDERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/gender.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEXUAL_ORIENTATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/interests.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INTERESTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/lifestyle.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DRINKING_HABITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/lifestyle.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DRUGS_HABITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/lifestyle.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SMOKING_HABITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/lifestyle.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WORKOUT_HABITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/looking-for.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOOKING_FOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/programs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROGRAMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/programs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROGRAMS_ARRAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/programs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROGRAMS_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/relationship-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RELATIONSHIP_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/constants/zodiac.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ZODIAC_SIGNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/pages/user-profile-edit-page/user-profile-edit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileEditPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/pages/user-profile-page/user-profile-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfilePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/pages/user-profile-preview/user-profile-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfilePreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/services/user-profile-service/user-profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Minimal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/stories/user-profile-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoPictures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/validators/contained-in-validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "arrayContainedInValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/validators/contained-in-validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "containedInValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/validators/profile-picture-validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "arrayContainedInValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user-profile/validators/profile-picture-validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profilePictureValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/components/delete-user-modal/delete-user-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteUserModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/validation/services/validation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/services/initializer-service/initializer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InitializerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/services/state-service/state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StateService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/services/ws-service/ws.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/cloudinary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CloudinaryWidget",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/types/cloudinary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CloudinaryWidgetEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/types/cloudinary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CloudinaryWidgetEventClose",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/types/cloudinary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CloudinaryWidgetEventSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/types/cloudinary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CloudinaryWidgetEventUploadAdded",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}